#GUSEK CODE BELOW:

#Veiculos por rota:
var OD0to0 >=0; var OD0to1 >=0; var OD0to2 >=0; var OD0to3 >=0; var OD0to4 >=0; var OD0to5 >=0; var OD0to6 >=0; var OD0to7 >=0; var OD0to8 >=0; var OD0to9 >=0; var OD0to10 >=0; var OD0to11 >=0; var OD0to12 >=0; var OD0to13 >=0; var OD0to14 >=0; var OD0to15 >=0; var OD0to16 >=0; var OD1to0 >=0; var OD1to1 >=0; var OD1to2 >=0; var OD1to3 >=0; var OD1to4 >=0; var OD1to5 >=0; var OD1to6 >=0; var OD1to7 >=0; var OD1to8 >=0; var OD1to9 >=0; var OD1to10 >=0; var OD1to11 >=0; var OD1to12 >=0; var OD1to13 >=0; var OD1to14 >=0; var OD1to15 >=0; var OD1to16 >=0; var OD2to0 >=0; var OD2to1 >=0; var OD2to2 >=0; var OD2to3 >=0; var OD2to4 >=0; var OD2to5 >=0; var OD2to6 >=0; var OD2to7 >=0; var OD2to8 >=0; var OD2to9 >=0; var OD2to10 >=0; var OD2to11 >=0; var OD2to12 >=0; var OD2to13 >=0; var OD2to14 >=0; var OD2to15 >=0; var OD2to16 >=0; var OD3to0 >=0; var OD3to1 >=0; var OD3to2 >=0; var OD3to3 >=0; var OD3to4 >=0; var OD3to5 >=0; var OD3to6 >=0; var OD3to7 >=0; var OD3to8 >=0; var OD3to9 >=0; var OD3to10 >=0; var OD3to11 >=0; var OD3to12 >=0; var OD3to13 >=0; var OD3to14 >=0; var OD3to15 >=0; var OD3to16 >=0; var OD4to0 >=0; var OD4to1 >=0; var OD4to2 >=0; var OD4to3 >=0; var OD4to4 >=0; var OD4to5 >=0; var OD4to6 >=0; var OD4to7 >=0; var OD4to8 >=0; var OD4to9 >=0; var OD4to10 >=0; var OD4to11 >=0; var OD4to12 >=0; var OD4to13 >=0; var OD4to14 >=0; var OD4to15 >=0; var OD4to16 >=0; var OD5to0 >=0; var OD5to1 >=0; var OD5to2 >=0; var OD5to3 >=0; var OD5to4 >=0; var OD5to5 >=0; var OD5to6 >=0; var OD5to7 >=0; var OD5to8 >=0; var OD5to9 >=0; var OD5to10 >=0; var OD5to11 >=0; var OD5to12 >=0; var OD5to13 >=0; var OD5to14 >=0; var OD5to15 >=0; var OD5to16 >=0; var OD6to0 >=0; var OD6to1 >=0; var OD6to2 >=0; var OD6to3 >=0; var OD6to4 >=0; var OD6to5 >=0; var OD6to6 >=0; var OD6to7 >=0; var OD6to8 >=0; var OD6to9 >=0; var OD6to10 >=0; var OD6to11 >=0; var OD6to12 >=0; var OD6to13 >=0; var OD6to14 >=0; var OD6to15 >=0; var OD6to16 >=0; var OD7to0 >=0; var OD7to1 >=0; var OD7to2 >=0; var OD7to3 >=0; var OD7to4 >=0; var OD7to5 >=0; var OD7to6 >=0; var OD7to7 >=0; var OD7to8 >=0; var OD7to9 >=0; var OD7to10 >=0; var OD7to11 >=0; var OD7to12 >=0; var OD7to13 >=0; var OD7to14 >=0; var OD7to15 >=0; var OD7to16 >=0; var OD8to0 >=0; var OD8to1 >=0; var OD8to2 >=0; var OD8to3 >=0; var OD8to4 >=0; var OD8to5 >=0; var OD8to6 >=0; var OD8to7 >=0; var OD8to8 >=0; var OD8to9 >=0; var OD8to10 >=0; var OD8to11 >=0; var OD8to12 >=0; var OD8to13 >=0; var OD8to14 >=0; var OD8to15 >=0; var OD8to16 >=0; var OD9to0 >=0; var OD9to1 >=0; var OD9to2 >=0; var OD9to3 >=0; var OD9to4 >=0; var OD9to5 >=0; var OD9to6 >=0; var OD9to7 >=0; var OD9to8 >=0; var OD9to9 >=0; var OD9to10 >=0; var OD9to11 >=0; var OD9to12 >=0; var OD9to13 >=0; var OD9to14 >=0; var OD9to15 >=0; var OD9to16 >=0; var OD10to0 >=0; var OD10to1 >=0; var OD10to2 >=0; var OD10to3 >=0; var OD10to4 >=0; var OD10to5 >=0; var OD10to6 >=0; var OD10to7 >=0; var OD10to8 >=0; var OD10to9 >=0; var OD10to10 >=0; var OD10to11 >=0; var OD10to12 >=0; var OD10to13 >=0; var OD10to14 >=0; var OD10to15 >=0; var OD10to16 >=0; var OD11to0 >=0; var OD11to1 >=0; var OD11to2 >=0; var OD11to3 >=0; var OD11to4 >=0; var OD11to5 >=0; var OD11to6 >=0; var OD11to7 >=0; var OD11to8 >=0; var OD11to9 >=0; var OD11to10 >=0; var OD11to11 >=0; var OD11to12 >=0; var OD11to13 >=0; var OD11to14 >=0; var OD11to15 >=0; var OD11to16 >=0; var OD12to0 >=0; var OD12to1 >=0; var OD12to2 >=0; var OD12to3 >=0; var OD12to4 >=0; var OD12to5 >=0; var OD12to6 >=0; var OD12to7 >=0; var OD12to8 >=0; var OD12to9 >=0; var OD12to10 >=0; var OD12to11 >=0; var OD12to12 >=0; var OD12to13 >=0; var OD12to14 >=0; var OD12to15 >=0; var OD12to16 >=0; var OD13to0 >=0; var OD13to1 >=0; var OD13to2 >=0; var OD13to3 >=0; var OD13to4 >=0; var OD13to5 >=0; var OD13to6 >=0; var OD13to7 >=0; var OD13to8 >=0; var OD13to9 >=0; var OD13to10 >=0; var OD13to11 >=0; var OD13to12 >=0; var OD13to13 >=0; var OD13to14 >=0; var OD13to15 >=0; var OD13to16 >=0; var OD14to0 >=0; var OD14to1 >=0; var OD14to2 >=0; var OD14to3 >=0; var OD14to4 >=0; var OD14to5 >=0; var OD14to6 >=0; var OD14to7 >=0; var OD14to8 >=0; var OD14to9 >=0; var OD14to10 >=0; var OD14to11 >=0; var OD14to12 >=0; var OD14to13 >=0; var OD14to14 >=0; var OD14to15 >=0; var OD14to16 >=0; var OD15to0 >=0; var OD15to1 >=0; var OD15to2 >=0; var OD15to3 >=0; var OD15to4 >=0; var OD15to5 >=0; var OD15to6 >=0; var OD15to7 >=0; var OD15to8 >=0; var OD15to9 >=0; var OD15to10 >=0; var OD15to11 >=0; var OD15to12 >=0; var OD15to13 >=0; var OD15to14 >=0; var OD15to15 >=0; var OD15to16 >=0; var OD16to0 >=0; var OD16to1 >=0; var OD16to2 >=0; var OD16to3 >=0; var OD16to4 >=0; var OD16to5 >=0; var OD16to6 >=0; var OD16to7 >=0; var OD16to8 >=0; var OD16to9 >=0; var OD16to10 >=0; var OD16to11 >=0; var OD16to12 >=0; var OD16to13 >=0; var OD16to14 >=0; var OD16to15 >=0; var OD16to16 >=0; 
#Veiculos em sensor/aresta:
var C8616to8617 >=0; var C45694to135255 >=0; var C7142to160021 >=0; var C135255to3837 >=0; var C146909to8621 >=0; var C8621to8622 >=0; var C8622to27426 >=0; var C160021to160020 >=0; var C160020to7316 >=0; var C7316to160018 >=0; var C27426to146907 >=0; var C146907to8623 >=0; var C160018to7317 >=0; var C7317to160012 >=0; var C160012to160009 >=0; var C160009to160007 >=0; var C160007to7318 >=0; var C7318to160004 >=0; var C8684to122806 >=0; var C3837to140136 >=0; var C140136to126927 >=0; var C160004to160003 >=0; var C160003to7319 >=0; var C3850to3851 >=0; var C2892to2901 >=0; var C2901to2902 >=0; var C2902to2903 >=0; var C7319to160005 >=0; var C160005to160006 >=0; var C160006to7320 >=0; var C7320to160011 >=0; var C160011to160013 >=0; var C160013to7321 >=0; var C7321to160019 >=0; var C3851to129773 >=0; var C129773to3852 >=0; var C160019to7322 >=0; var C122806to9073 >=0; var C2662to2663 >=0; var C2663to2664 >=0; var C8905to8948 >=0; var C7388to7389 >=0; var C7389to7390 >=0; var C7390to7391 >=0; var C7391to7392 >=0; var C1321to124772 >=0; var C7392to7393 >=0; var C3852to3846 >=0; var C7393to7394 >=0; var C7394to7395 >=0; var C8892to122757 >=0; var C7395to7563 >=0; var C7229to7230 >=0; var C7230to7231 >=0; var C3846to3847 >=0; var C3847to3848 >=0; var C3848to3849 >=0; var C122757to8928 >=0; var C8928to122751 >=0; var C7231to7232 >=0; var C2039to120710 >=0; var C7232to7233 >=0; var C7233to7234 >=0; var C122751to8929 >=0; var C8929to8930 >=0; var C8937to8938 >=0; var C7234to7235 >=0; var C120710to2040 >=0; var C2040to2041 >=0; var C8938to8939 >=0; var C8939to8940 >=0; var C3857to3856 >=0; var C8948to118872 >=0; var C118872to8949 >=0; var C8949to118870 >=0; var C118870to8836 >=0; var C3857to3858 >=0; var C3858to3857 >=0; var C7235to7236 >=0; var C3859to3858 >=0; var C3836to3859 >=0; var C3860to853 >=0; var C3861to3860 >=0; var C8836to8937 >=0; var C9067to8963 >=0; var C9016to9062 >=0; var C9062to9063 >=0; var C7236to7237 >=0; var C7237to7238 >=0; var C7238to7239 >=0; var C9063to141758 >=0; var C7239to7240 >=0; var C141758to9064 >=0; var C7240to7241 >=0; var C3861to3857 >=0; var C9064to141759 >=0; var C7241to7242 >=0; var C141759to9065 >=0; var C7242to7243 >=0; var C7243to7244 >=0; var C1351to11060 >=0; var C3402to143395 >=0; var C7244to7245 >=0; var C9065to141760 >=0; var C141760to9066 >=0; var C9066to9067 >=0; var C9132to9115 >=0; var C144255to9130 >=0; var C9130to43195 >=0; var C143395to143392 >=0; var C143392to3395 >=0; var C7245to7246 >=0; var C7246to7247 >=0; var C7247to7248 >=0; var C43195to9131 >=0; var C9131to43198 >=0; var C43198to9132 >=0; var C9126to43214 >=0; var C4101to29501 >=0; var C9312to9288 >=0; var C153432to153430 >=0; var C153430to286 >=0; var C286to153427 >=0; var C153427to153425 >=0; var C153425to153424 >=0; var C153424to287 >=0; var C287to288 >=0; var C9288to143030 >=0; var C143030to9289 >=0; var C9311to9312 >=0; var C89098to143029 >=0; var C143029to9313 >=0; var C517to4959 >=0; var C4959to519 >=0; var C519to521 >=0; var C521to143453 >=0; var C143453to531 >=0; var C531to143454 >=0; var C9313to9314 >=0; var C9314to143028 >=0; var C725to153490 >=0; var C153490to2012 >=0; var C2012to153486 >=0; var C153486to153484 >=0; var C153484to153481 >=0; var C153481to583 >=0; var C583to153477 >=0; var C153477to2013 >=0; var C2013to153473 >=0; var C153473to582 >=0; var C582to153471 >=0; var C153471to2014 >=0; var C143028to9302 >=0; var C3395to3403 >=0; var C9302to9303 >=0; var C7248to4134 >=0; var C7647to7646 >=0; var C133218to7647 >=0; var C7648to133218 >=0; var C133235to7648 >=0; var C9303to143027 >=0; var C3408to3397 >=0; var C3397to3409 >=0; var C3409to143383 >=0; var C143383to3410 >=0; var C3401to165585 >=0; var C165585to3402 >=0; var C29474to133235 >=0; var C7719to7794 >=0; var C127724to7719 >=0; var C143027to89079 >=0; var C89079to9304 >=0; var C49702to7720 >=0; var C7720to122530 >=0; var C122530to116714 >=0; var C116714to49638 >=0; var C49638to7725 >=0; var C8930to9334 >=0; var C9334to9335 >=0; var C9335to9336 >=0; var C9336to119460 >=0; var C119460to119462 >=0; var C119462to9337 >=0; var C9337to9338 >=0; var C9338to9339 >=0; var C153498to153502 >=0; var C153502to153505 >=0; var C153505to593 >=0; var C593to153508 >=0; var C153508to594 >=0; var C594to679 >=0; var C138091to138092 >=0; var C138092to138185 >=0; var C138185to776 >=0; var C9339to9340 >=0; var C2947to2948 >=0; var C7794to122538 >=0; var C4975to4982 >=0; var C4982to4983 >=0; var C9340to9341 >=0; var C122538to7798 >=0; var C7798to937 >=0; var C9341to9342 >=0; var C9342to9343 >=0; var C9343to9344 >=0; var C9344to9318 >=0; var C7795to49672 >=0; var C133215to7795 >=0; var C7801to133215 >=0; var C7784to7801 >=0; var C127731to7784 >=0; var C9349to9348 >=0; var C9348to9347 >=0; var C9323to9354 >=0; var C9354to142181 >=0; var C142181to9355 >=0; var C9355to142183 >=0; var C131008to131004 >=0; var C131004to131006 >=0; var C131006to131003 >=0; var C131003to9370 >=0; var C9370to131000 >=0; var C9637to9624 >=0; var C9624to170743 >=0; var C170743to9641 >=0; var C127730to127731 >=0; var C7816to158788 >=0; var C146288to146287 >=0; var C9641to9632 >=0; var C146287to146286 >=0; var C9632to9631 >=0; var C160343to143520 >=0; var C143520to49698 >=0; var C122940to143636 >=0; var C2993to2994 >=0; var C49698to49703 >=0; var C143636to5161 >=0; var C5161to5162 >=0; var C314to318 >=0; var C9631to9630 >=0; var C9630to9629 >=0; var C5162to5163 >=0; var C5163to5164 >=0; var C19627to19626 >=0; var C19626to19625 >=0; var C19625to19624 >=0; var C19624to43716 >=0; var C9629to9642 >=0; var C5164to5165 >=0; var C5165to5166 >=0; var C9642to144205 >=0; var C5166to5167 >=0; var C49703to49619 >=0; var C5167to5168 >=0; var C5168to5169 >=0; var C5169to5170 >=0; var C49619to49724 >=0; var C2292to9798 >=0; var C9799to168401 >=0; var C49724to49665 >=0; var C5170to5171 >=0; var C168401to9800 >=0; var C5171to4659 >=0; var C5307to163392 >=0; var C163392to5306 >=0; var C49665to124922 >=0; var C124922to146150 >=0; var C146150to125364 >=0; var C5306to5305 >=0; var C135077to69925 >=0; var C5312to40323 >=0; var C9826to9827 >=0; var C9843to9831 >=0; var C9831to9832 >=0; var C9835to9843 >=0; var C9832to9844 >=0; var C125364to49637 >=0; var C9844to9845 >=0; var C40323to163393 >=0; var C163393to5311 >=0; var C3514to9873 >=0; var C49637to49633 >=0; var C49633to10298 >=0; var C5311to40324 >=0; var C40324to5310 >=0; var C9873to9874 >=0; var C7836to7853 >=0; var C142501to142498 >=0; var C142498to142500 >=0; var C142500to142499 >=0; var C142499to142502 >=0; var C142502to142659 >=0; var C142659to3065 >=0; var C3065to355 >=0; var C355to148339 >=0; var C148339to142658 >=0; var C142658to152918 >=0; var C9874to9875 >=0; var C5310to163394 >=0; var C152707to152745 >=0; var C163394to40336 >=0; var C9875to9876 >=0; var C9876to9877 >=0; var C9877to9878 >=0; var C9878to9879 >=0; var C9879to9880 >=0; var C9880to9881 >=0; var C9881to9882 >=0; var C8963to9887 >=0; var C9887to9888 >=0; var C152745to152673 >=0; var C25121to46745 >=0; var C46745to46784 >=0; var C46784to46785 >=0; var C46785to132336 >=0; var C132336to132326 >=0; var C132326to46760 >=0; var C46760to46740 >=0; var C46740to131182 >=0; var C9888to9889 >=0; var C9889to9890 >=0; var C152673to152580 >=0; var C131182to46778 >=0; var C9890to9891 >=0; var C9891to9892 >=0; var C9892to9893 >=0; var C40336to5309 >=0; var C46778to46761 >=0; var C46761to46729 >=0; var C8679to163189 >=0; var C163189to8683 >=0; var C8683to163188 >=0; var C163188to8710 >=0; var C152580to152829 >=0; var C8710to144315 >=0; var C9911to8684 >=0; var C8520to8507 >=0; var C10265to10274 >=0; var C10274to10273 >=0; var C5309to40330 >=0; var C46729to46739 >=0; var C46739to46728 >=0; var C10273to146228 >=0; var C131048to7909 >=0; var C2706to162843 >=0; var C162843to2696 >=0; var C7909to152808 >=0; var C48955to119668 >=0; var C119668to29343 >=0; var C152808to152564 >=0; var C46728to46757 >=0; var C152564to152676 >=0; var C46757to46774 >=0; var C163391to40321 >=0; var C152676to152814 >=0; var C40321to5308 >=0; var C5308to40322 >=0; var C40322to5307 >=0; var C46774to3176 >=0; var C3176to132204 >=0; var C132204to46720 >=0; var C46720to3177 >=0; var C152814to152565 >=0; var C10261to146242 >=0; var C5371to29320 >=0; var C146242to146239 >=0; var C146239to104998 >=0; var C104998to159882 >=0; var C10257to146240 >=0; var C146240to10261 >=0; var C14171to7690 >=0; var C7690to14178 >=0; var C10282to126717 >=0; var C126717to10279 >=0; var C152565to152740 >=0; var C152740to152607 >=0; var C152607to152786 >=0; var C10279to129851 >=0; var C152786to152557 >=0; var C129851to10283 >=0; var C3595to119757 >=0; var C119757to1280 >=0; var C1280to119752 >=0; var C119752to119750 >=0; var C119750to1560 >=0; var C1560to1281 >=0; var C1281to1286 >=0; var C1286to132810 >=0; var C132810to132813 >=0; var C10283to129847 >=0; var C129847to10280 >=0; var C10280to129841 >=0; var C129841to10281 >=0; var C10281to129823 >=0; var C122457to10291 >=0; var C10292to10284 >=0; var C152557to152780 >=0; var C152780to152739 >=0; var C152739to152641 >=0; var C152641to152696 >=0; var C152696to7943 >=0; var C7943to7938 >=0; var C122474to10292 >=0; var C3177to3178 >=0; var C10285to122474 >=0; var C5378to5379 >=0; var C10286to10285 >=0; var C152740to152843 >=0; var C152693to152672 >=0; var C152672to152667 >=0; var C152667to152618 >=0; var C152618to152669 >=0; var C152669to152611 >=0; var C152611to152838 >=0; var C5379to5380 >=0; var C5380to5381 >=0; var C5381to5382 >=0; var C5382to5383 >=0; var C170885to5417 >=0; var C170884to170885 >=0; var C43547to170884 >=0; var C152838to152722 >=0; var C126234to7757 >=0; var C7757to137198 >=0; var C170883to43547 >=0; var C43548to170883 >=0; var C5418to43548 >=0; var C152722to152634 >=0; var C10298to49644 >=0; var C120772to47746 >=0; var C49644to18509 >=0; var C165244to120772 >=0; var C18509to10299 >=0; var C152634to152837 >=0; var C10299to10297 >=0; var C72963to69200 >=0; var C146310to10308 >=0; var C170529to10431 >=0; var C10431to170517 >=0; var C170517to10426 >=0; var C2999to165244 >=0; var C10426to14601 >=0; var C6073to97137 >=0; var C97137to6074 >=0; var C6074to97138 >=0; var C97138to6075 >=0; var C6075to6076 >=0; var C6076to97160 >=0; var C97160to6077 >=0; var C152837to152654 >=0; var C6077to97200 >=0; var C10427to10428 >=0; var C1396to1395 >=0; var C14544to146571 >=0; var C1397to1396 >=0; var C138074to14544 >=0; var C10452to10453 >=0; var C10453to10454 >=0; var C10454to10273 >=0; var C146223to146225 >=0; var C146225to146226 >=0; var C138930to11828 >=0; var C152654to152663 >=0; var C97200to6078 >=0; var C6085to6086 >=0; var C152663to152598 >=0; var C152598to7955 >=0; var C7955to75582 >=0; var C6086to6087 >=0; var C6087to6088 >=0; var C69139to10692 >=0; var C7226to7962 >=0; var C14602to10430 >=0; var C3659to170033 >=0; var C167518to14597 >=0; var C170033to3658 >=0; var C2560to145782 >=0; var C145782to129315 >=0; var C14597to167516 >=0; var C129315to145781 >=0; var C167516to10510 >=0; var C10510to10509 >=0; var C10509to10605 >=0; var C10605to121182 >=0; var C121182to123870 >=0; var C3680to13804 >=0; var C123870to5420 >=0; var C5420to5421 >=0; var C5421to164952 >=0; var C164952to15565 >=0; var C121291to165835 >=0; var C6088to6089 >=0; var C165835to124221 >=0; var C6089to6090 >=0; var C124221to1793 >=0; var C10508to10601 >=0; var C10526to150806 >=0; var C150806to29292 >=0; var C13374to13375 >=0; var C13375to13376 >=0; var C7970to7983 >=0; var C13376to13377 >=0; var C7983to7971 >=0; var C13377to13378 >=0; var C8055to8057 >=0; var C8057to8052 >=0; var C8052to8056 >=0; var C10269to104976 >=0; var C8056to8053 >=0; var C13378to10528 >=0; var C10528to10530 >=0; var C130720to8251 >=0; var C104976to138262 >=0; var C8251to17585 >=0; var C17585to8252 >=0; var C10530to10554 >=0; var C10532to10554 >=0; var C10529to10532 >=0; var C10556to10536 >=0; var C10536to10538 >=0; var C10538to10544 >=0; var C10544to10551 >=0; var C3693to148277 >=0; var C10551to10550 >=0; var C132024to132023 >=0; var C132023to132021 >=0; var C132021to132022 >=0; var C120901to10543 >=0; var C49498to8258 >=0; var C11889to120901 >=0; var C2726to2727 >=0; var C3100to3018 >=0; var C3695to8252 >=0; var C69048to11889 >=0; var C69048to10537 >=0; var C10537to10539 >=0; var C8275to8276 >=0; var C10539to120914 >=0; var C8276to8277 >=0; var C8277to137974 >=0; var C137974to8278 >=0; var C8278to17533 >=0; var C14047to14099 >=0; var C120914to120911 >=0; var C120911to10542 >=0; var C8329to14348 >=0; var C10542to10526 >=0; var C10554to124242 >=0; var C124242to10555 >=0; var C10555to10556 >=0; var C93333to2159 >=0; var C93277to6142 >=0; var C26356to167512 >=0; var C3718to3622 >=0; var C2727to2728 >=0; var C162854to162855 >=0; var C166609to166611 >=0; var C166611to1430 >=0; var C1430to166616 >=0; var C166616to1429 >=0; var C1429to166619 >=0; var C166619to1428 >=0; var C1428to166622 >=0; var C166622to1427 >=0; var C1427to166626 >=0; var C167512to26358 >=0; var C26358to26348 >=0; var C26348to26355 >=0; var C26355to170515 >=0; var C10578to10576 >=0; var C10576to10577 >=0; var C10578to10583 >=0; var C10583to10575 >=0; var C1463to166664 >=0; var C166664to1462 >=0; var C1462to166660 >=0; var C166660to527 >=0; var C527to1461 >=0; var C1461to528 >=0; var C162918to1465 >=0; var C10591to10592 >=0; var C10588to69138 >=0; var C121114to10601 >=0; var C69177to49544 >=0; var C49544to10612 >=0; var C10613to10608 >=0; var C10608to10609 >=0; var C10613to49541 >=0; var C14200to8326 >=0; var C49541to10617 >=0; var C8324to8325 >=0; var C8318to14259 >=0; var C14259to27421 >=0; var C14352to14540 >=0; var C14540to41074 >=0; var C41074to144983 >=0; var C144983to8324 >=0; var C8325to8334 >=0; var C144043to8388 >=0; var C8388to8387 >=0; var C8387to160953 >=0; var C132917to6956 >=0; var C160953to8386 >=0; var C3725to147979 >=0; var C162855to2732 >=0; var C147979to147976 >=0; var C2732to162856 >=0; var C6956to6957 >=0; var C162856to2733 >=0; var C6957to6958 >=0; var C2733to162857 >=0; var C6958to123764 >=0; var C162857to2734 >=0; var C147976to147974 >=0; var C8386to161698 >=0; var C161698to8385 >=0; var C123764to123757 >=0; var C123757to123758 >=0; var C10617to10618 >=0; var C147974to111242 >=0; var C8385to161695 >=0; var C161695to81843 >=0; var C2784to2783 >=0; var C132836to132837 >=0; var C132837to147960 >=0; var C147960to95076 >=0; var C127028to2784 >=0; var C2734to162858 >=0; var C162858to162859 >=0; var C95076to3724 >=0; var C13013to10648 >=0; var C3724to128994 >=0; var C128994to147961 >=0; var C10648to10649 >=0; var C123758to123730 >=0; var C123730to123745 >=0; var C123745to123759 >=0; var C10649to10650 >=0; var C10650to10651 >=0; var C10651to10652 >=0; var C10652to10653 >=0; var C10653to10654 >=0; var C81843to161696 >=0; var C161696to8384 >=0; var C8384to161035 >=0; var C134742to134741 >=0; var C134740to10661 >=0; var C10675to13013 >=0; var C1518to169425 >=0; var C169425to1516 >=0; var C12173to13018 >=0; var C123759to123738 >=0; var C10701to13017 >=0; var C3658to150740 >=0; var C150740to129437 >=0; var C10707to10703 >=0; var C161035to161034 >=0; var C10713to150695 >=0; var C150695to10712 >=0; var C10720to10722 >=0; var C10722to10719 >=0; var C8444to43125 >=0; var C123738to123736 >=0; var C123736to123741 >=0; var C43125to8446 >=0; var C8446to43137 >=0; var C43137to8443 >=0; var C151939to151831 >=0; var C151831to151940 >=0; var C151940to151894 >=0; var C151894to151945 >=0; var C151945to151943 >=0; var C151943to151823 >=0; var C10719to50738 >=0; var C50738to10710 >=0; var C10710to19777 >=0; var C151823to151861 >=0; var C19777to10711 >=0; var C10711to13034 >=0; var C10730to47129 >=0; var C2268to128677 >=0; var C1519to1538 >=0; var C47129to10730 >=0; var C47129to10772 >=0; var C109516to123924 >=0; var C10806to1549 >=0; var C1549to10784 >=0; var C1581to1582 >=0; var C1583to1300 >=0; var C151861to151841 >=0; var C151841to151912 >=0; var C151912to151950 >=0; var C123741to123754 >=0; var C123754to123752 >=0; var C151950to151888 >=0; var C151888to151890 >=0; var C123924to123923 >=0; var C123923to10752 >=0; var C10752to10753 >=0; var C10753to169437 >=0; var C10772to2261 >=0; var C10777to124010 >=0; var C124010to2260 >=0; var C2260to160314 >=0; var C160314to47118 >=0; var C162859to162860 >=0; var C123752to123746 >=0; var C2161to6965 >=0; var C6965to6966 >=0; var C6966to6967 >=0; var C6967to6968 >=0; var C47118to2273 >=0; var C6968to6969 >=0; var C6969to45206 >=0; var C45206to76003 >=0; var C171275to6976 >=0; var C2273to10775 >=0; var C6980to75983 >=0; var C132910to6983 >=0; var C162860to2735 >=0; var C122005to3717 >=0; var C10775to123941 >=0; var C6983to163633 >=0; var C46844to10794 >=0; var C10794to10795 >=0; var C10730to10777 >=0; var C10788to163612 >=0; var C163612to10806 >=0; var C152255to152412 >=0; var C152412to127817 >=0; var C127817to152378 >=0; var C152378to10828 >=0; var C10828to152179 >=0; var C152179to152449 >=0; var C152449to152472 >=0; var C145147to45684 >=0; var C45684to45699 >=0; var C45699to45680 >=0; var C24985to24986 >=0; var C24986to122486 >=0; var C149863to150034 >=0; var C150022to10879 >=0; var C2735to162861 >=0; var C10885to149730 >=0; var C149730to149579 >=0; var C163633to76011 >=0; var C149579to122515 >=0; var C122515to149632 >=0; var C149554to149735 >=0; var C1681to1682 >=0; var C1682to1683 >=0; var C149735to10887 >=0; var C10887to149578 >=0; var C1696to1670 >=0; var C1670to1696 >=0; var C149578to149700 >=0; var C149700to10888 >=0; var C10888to149630 >=0; var C119703to119712 >=0; var C119712to119715 >=0; var C119715to119716 >=0; var C119716to119714 >=0; var C119714to119710 >=0; var C119710to119706 >=0; var C119706to163481 >=0; var C163481to119700 >=0; var C149630to149568 >=0; var C149568to149691 >=0; var C149691to149827 >=0; var C149827to150075 >=0; var C119694to119693 >=0; var C2180to149646 >=0; var C149646to149948 >=0; var C129004to144609 >=0; var C144609to129005 >=0; var C129005to129326 >=0; var C129326to129337 >=0; var C129006to129004 >=0; var C76011to6974 >=0; var C1871to156675 >=0; var C156675to1872 >=0; var C1872to1873 >=0; var C1873to156666 >=0; var C156666to1874 >=0; var C19249to18916 >=0; var C18916to19252 >=0; var C149617to149848 >=0; var C19252to29400 >=0; var C11033to18752 >=0; var C18752to11032 >=0; var C1878to1879 >=0; var C3465to3550 >=0; var C3550to122723 >=0; var C122723to2328 >=0; var C11039to11038 >=0; var C11038to11037 >=0; var C11037to138722 >=0; var C138722to11036 >=0; var C150051to149868 >=0; var C149868to149866 >=0; var C149866to149809 >=0; var C11036to11035 >=0; var C11035to169418 >=0; var C2199to2244 >=0; var C2244to2245 >=0; var C2245to2246 >=0; var C2246to2257 >=0; var C169418to11034 >=0; var C2257to122449 >=0; var C122449to13498 >=0; var C11034to169749 >=0; var C11045to11065 >=0; var C19252to19253 >=0; var C13044to2267 >=0; var C2267to2268 >=0; var C2268to10780 >=0; var C10780to2269 >=0; var C2269to2270 >=0; var C2270to2271 >=0; var C2277to13493 >=0; var C19253to1355 >=0; var C11064to11335 >=0; var C11335to11044 >=0; var C11044to11045 >=0; var C11117to121856 >=0; var C11069to11070 >=0; var C11081to11099 >=0; var C11096to11083 >=0; var C11083to11084 >=0; var C11097to142878 >=0; var C11100to18737 >=0; var C18737to18739 >=0; var C18739to18723 >=0; var C18723to18727 >=0; var C18727to18751 >=0; var C18751to122173 >=0; var C122173to122169 >=0; var C122169to122166 >=0; var C122166to122158 >=0; var C122158to11099 >=0; var C11295to33547 >=0; var C33547to11063 >=0; var C2664to116175 >=0; var C116175to116172 >=0; var C19692to163253 >=0; var C163253to11139 >=0; var C11142to18782 >=0; var C18782to18784 >=0; var C11147to11148 >=0; var C11169to18946 >=0; var C18946to11170 >=0; var C6974to76013 >=0; var C11170to122348 >=0; var C122348to18888 >=0; var C18888to18930 >=0; var C138965to11249 >=0; var C50632to158417 >=0; var C18867to122275 >=0; var C76013to132913 >=0; var C2374to2382 >=0; var C2382to2383 >=0; var C2383to2384 >=0; var C2384to2385 >=0; var C2385to241 >=0; var C2396to2397 >=0; var C2397to2398 >=0; var C2398to2399 >=0; var C2399to2400 >=0; var C2400to2401 >=0; var C2401to148362 >=0; var C122275to11110 >=0; var C11208to18857 >=0; var C11220to11221 >=0; var C2408to2407 >=0; var C11221to11228 >=0; var C11228to69231 >=0; var C11228to11229 >=0; var C11235to11236 >=0; var C132913to6975 >=0; var C6975to171275 >=0; var C5487to7033 >=0; var C7033to7025 >=0; var C7040to7039 >=0; var C7039to7046 >=0; var C11236to11237 >=0; var C11237to11239 >=0; var C48947to11248 >=0; var C11248to18754 >=0; var C18754to11247 >=0; var C11247to11246 >=0; var C11246to11251 >=0; var C127179to3745 >=0; var C3745to159457 >=0; var C159457to159456 >=0; var C11244to158424 >=0; var C3807to3808 >=0; var C158424to11201 >=0; var C11253to169647 >=0; var C11254to11255 >=0; var C11255to169646 >=0; var C8402to8403 >=0; var C8403to8404 >=0; var C8404to8405 >=0; var C8405to8406 >=0; var C169646to11256 >=0; var C11256to11262 >=0; var C11262to169737 >=0; var C169737to11263 >=0; var C11263to169736 >=0; var C169736to11264 >=0; var C11264to11265 >=0; var C11065to33339 >=0; var C33339to11295 >=0; var C11299to11300 >=0; var C11300to11301 >=0; var C11301to122084 >=0; var C122084to11302 >=0; var C11302to11303 >=0; var C11303to127506 >=0; var C127506to11304 >=0; var C11304to11305 >=0; var C11309to11310 >=0; var C11317to11318 >=0; var C11318to11319 >=0; var C11319to11320 >=0; var C11320to11321 >=0; var C94076to171425 >=0; var C171425to28818 >=0; var C28818to94092 >=0; var C8399to8400 >=0; var C8400to8401 >=0; var C11321to11322 >=0; var C3808to3809 >=0; var C79823to7139 >=0; var C11322to11323 >=0; var C8302to8304 >=0; var C11323to11324 >=0; var C8304to8303 >=0; var C11324to169573 >=0; var C3809to49621 >=0; var C8303to13317 >=0; var C8401to8537 >=0; var C8537to8402 >=0; var C169573to11325 >=0; var C11325to11326 >=0; var C166671to166673 >=0; var C166673to2642 >=0; var C2642to2641 >=0; var C13317to138945 >=0; var C25376to25367 >=0; var C25367to8413 >=0; var C13916to45696 >=0; var C45696to130297 >=0; var C130297to45687 >=0; var C45687to45682 >=0; var C45682to45688 >=0; var C8413to8399 >=0; var C4163to153753 >=0; var C153753to8600 >=0; var C11326to169568 >=0; var C169568to11327 >=0; var C123340to123334 >=0; var C123334to18470 >=0; var C18470to5314 >=0; var C5314to18471 >=0; var C8600to153742 >=0; var C153742to153740 >=0; var C153740to8601 >=0; var C8601to153580 >=0; var C153580to8602 >=0; var C18471to5315 >=0; var C5315to41116 >=0; var C41116to7103 >=0; var C7103to41115 >=0; var C69205to1633 >=0; var C1633to1632 >=0; var C11325to169572 >=0; var C169572to122163 >=0; var C169571to11328 >=0; var C41115to7104 >=0; var C7104to7105 >=0; var C45688to45693 >=0; var C8486to8485 >=0; var C7105to41122 >=0; var C7109to41130 >=0; var C41130to18694 >=0; var C18694to18695 >=0; var C8485to168904 >=0; var C11379to97149 >=0; var C97149to11380 >=0; var C1912to11404 >=0; var C11404to11405 >=0; var C2641to2640 >=0; var C11501to11500 >=0; var C171269to5413 >=0; var C45693to45690 >=0; var C25296to11558 >=0; var C2640to150217 >=0; var C168904to8484 >=0; var C45690to45694 >=0;
#Folgas Sensores:
#1000/1000 arestas ok
var fMenos8616to8617 >=0; var fMais8616to8617 >=0; var fMenos45694to135255 >=0; var fMais45694to135255 >=0; var fMenos7142to160021 >=0; var fMais7142to160021 >=0; var fMenos135255to3837 >=0; var fMais135255to3837 >=0; var fMenos146909to8621 >=0; var fMais146909to8621 >=0; var fMenos8621to8622 >=0; var fMais8621to8622 >=0; var fMenos8622to27426 >=0; var fMais8622to27426 >=0; var fMenos160021to160020 >=0; var fMais160021to160020 >=0; var fMenos160020to7316 >=0; var fMais160020to7316 >=0; var fMenos7316to160018 >=0; var fMais7316to160018 >=0; var fMenos27426to146907 >=0; var fMais27426to146907 >=0; var fMenos146907to8623 >=0; var fMais146907to8623 >=0; var fMenos160018to7317 >=0; var fMais160018to7317 >=0; var fMenos7317to160012 >=0; var fMais7317to160012 >=0; var fMenos160012to160009 >=0; var fMais160012to160009 >=0; var fMenos160009to160007 >=0; var fMais160009to160007 >=0; var fMenos160007to7318 >=0; var fMais160007to7318 >=0; var fMenos7318to160004 >=0; var fMais7318to160004 >=0; var fMenos8684to122806 >=0; var fMais8684to122806 >=0; var fMenos3837to140136 >=0; var fMais3837to140136 >=0; var fMenos140136to126927 >=0; var fMais140136to126927 >=0; var fMenos160004to160003 >=0; var fMais160004to160003 >=0; var fMenos160003to7319 >=0; var fMais160003to7319 >=0; var fMenos3850to3851 >=0; var fMais3850to3851 >=0; var fMenos2892to2901 >=0; var fMais2892to2901 >=0; var fMenos2901to2902 >=0; var fMais2901to2902 >=0; var fMenos2902to2903 >=0; var fMais2902to2903 >=0; var fMenos7319to160005 >=0; var fMais7319to160005 >=0; var fMenos160005to160006 >=0; var fMais160005to160006 >=0; var fMenos160006to7320 >=0; var fMais160006to7320 >=0; var fMenos7320to160011 >=0; var fMais7320to160011 >=0; var fMenos160011to160013 >=0; var fMais160011to160013 >=0; var fMenos160013to7321 >=0; var fMais160013to7321 >=0; var fMenos7321to160019 >=0; var fMais7321to160019 >=0; var fMenos3851to129773 >=0; var fMais3851to129773 >=0; var fMenos129773to3852 >=0; var fMais129773to3852 >=0; var fMenos160019to7322 >=0; var fMais160019to7322 >=0; var fMenos122806to9073 >=0; var fMais122806to9073 >=0; var fMenos2662to2663 >=0; var fMais2662to2663 >=0; var fMenos2663to2664 >=0; var fMais2663to2664 >=0; var fMenos8905to8948 >=0; var fMais8905to8948 >=0; var fMenos7388to7389 >=0; var fMais7388to7389 >=0; var fMenos7389to7390 >=0; var fMais7389to7390 >=0; var fMenos7390to7391 >=0; var fMais7390to7391 >=0; var fMenos7391to7392 >=0; var fMais7391to7392 >=0; var fMenos1321to124772 >=0; var fMais1321to124772 >=0; var fMenos7392to7393 >=0; var fMais7392to7393 >=0; var fMenos3852to3846 >=0; var fMais3852to3846 >=0; var fMenos7393to7394 >=0; var fMais7393to7394 >=0; var fMenos7394to7395 >=0; var fMais7394to7395 >=0; var fMenos8892to122757 >=0; var fMais8892to122757 >=0; var fMenos7395to7563 >=0; var fMais7395to7563 >=0; var fMenos7229to7230 >=0; var fMais7229to7230 >=0; var fMenos7230to7231 >=0; var fMais7230to7231 >=0; var fMenos3846to3847 >=0; var fMais3846to3847 >=0; var fMenos3847to3848 >=0; var fMais3847to3848 >=0; var fMenos3848to3849 >=0; var fMais3848to3849 >=0; var fMenos122757to8928 >=0; var fMais122757to8928 >=0; var fMenos8928to122751 >=0; var fMais8928to122751 >=0; var fMenos7231to7232 >=0; var fMais7231to7232 >=0; var fMenos2039to120710 >=0; var fMais2039to120710 >=0; var fMenos7232to7233 >=0; var fMais7232to7233 >=0; var fMenos7233to7234 >=0; var fMais7233to7234 >=0; var fMenos122751to8929 >=0; var fMais122751to8929 >=0; var fMenos8929to8930 >=0; var fMais8929to8930 >=0; var fMenos8937to8938 >=0; var fMais8937to8938 >=0; var fMenos7234to7235 >=0; var fMais7234to7235 >=0; var fMenos120710to2040 >=0; var fMais120710to2040 >=0; var fMenos2040to2041 >=0; var fMais2040to2041 >=0; var fMenos8938to8939 >=0; var fMais8938to8939 >=0; var fMenos8939to8940 >=0; var fMais8939to8940 >=0; var fMenos3857to3856 >=0; var fMais3857to3856 >=0; var fMenos8948to118872 >=0; var fMais8948to118872 >=0; var fMenos118872to8949 >=0; var fMais118872to8949 >=0; var fMenos8949to118870 >=0; var fMais8949to118870 >=0; var fMenos118870to8836 >=0; var fMais118870to8836 >=0; var fMenos3857to3858 >=0; var fMais3857to3858 >=0; var fMenos3858to3857 >=0; var fMais3858to3857 >=0; var fMenos7235to7236 >=0; var fMais7235to7236 >=0; var fMenos3859to3858 >=0; var fMais3859to3858 >=0; var fMenos3836to3859 >=0; var fMais3836to3859 >=0; var fMenos3860to853 >=0; var fMais3860to853 >=0; var fMenos3861to3860 >=0; var fMais3861to3860 >=0; var fMenos8836to8937 >=0; var fMais8836to8937 >=0; var fMenos9067to8963 >=0; var fMais9067to8963 >=0; var fMenos9016to9062 >=0; var fMais9016to9062 >=0; var fMenos9062to9063 >=0; var fMais9062to9063 >=0; var fMenos7236to7237 >=0; var fMais7236to7237 >=0; var fMenos7237to7238 >=0; var fMais7237to7238 >=0; var fMenos7238to7239 >=0; var fMais7238to7239 >=0; var fMenos9063to141758 >=0; var fMais9063to141758 >=0; var fMenos7239to7240 >=0; var fMais7239to7240 >=0; var fMenos141758to9064 >=0; var fMais141758to9064 >=0; var fMenos7240to7241 >=0; var fMais7240to7241 >=0; var fMenos3861to3857 >=0; var fMais3861to3857 >=0; var fMenos9064to141759 >=0; var fMais9064to141759 >=0; var fMenos7241to7242 >=0; var fMais7241to7242 >=0; var fMenos141759to9065 >=0; var fMais141759to9065 >=0; var fMenos7242to7243 >=0; var fMais7242to7243 >=0; var fMenos7243to7244 >=0; var fMais7243to7244 >=0; var fMenos1351to11060 >=0; var fMais1351to11060 >=0; var fMenos3402to143395 >=0; var fMais3402to143395 >=0; var fMenos7244to7245 >=0; var fMais7244to7245 >=0; var fMenos9065to141760 >=0; var fMais9065to141760 >=0; var fMenos141760to9066 >=0; var fMais141760to9066 >=0; var fMenos9066to9067 >=0; var fMais9066to9067 >=0; var fMenos9132to9115 >=0; var fMais9132to9115 >=0; var fMenos144255to9130 >=0; var fMais144255to9130 >=0; var fMenos9130to43195 >=0; var fMais9130to43195 >=0; var fMenos143395to143392 >=0; var fMais143395to143392 >=0; var fMenos143392to3395 >=0; var fMais143392to3395 >=0; var fMenos7245to7246 >=0; var fMais7245to7246 >=0; var fMenos7246to7247 >=0; var fMais7246to7247 >=0; var fMenos7247to7248 >=0; var fMais7247to7248 >=0; var fMenos43195to9131 >=0; var fMais43195to9131 >=0; var fMenos9131to43198 >=0; var fMais9131to43198 >=0; var fMenos43198to9132 >=0; var fMais43198to9132 >=0; var fMenos9126to43214 >=0; var fMais9126to43214 >=0; var fMenos4101to29501 >=0; var fMais4101to29501 >=0; var fMenos9312to9288 >=0; var fMais9312to9288 >=0; var fMenos153432to153430 >=0; var fMais153432to153430 >=0; var fMenos153430to286 >=0; var fMais153430to286 >=0; var fMenos286to153427 >=0; var fMais286to153427 >=0; var fMenos153427to153425 >=0; var fMais153427to153425 >=0; var fMenos153425to153424 >=0; var fMais153425to153424 >=0; var fMenos153424to287 >=0; var fMais153424to287 >=0; var fMenos287to288 >=0; var fMais287to288 >=0; var fMenos9288to143030 >=0; var fMais9288to143030 >=0; var fMenos143030to9289 >=0; var fMais143030to9289 >=0; var fMenos9311to9312 >=0; var fMais9311to9312 >=0; var fMenos89098to143029 >=0; var fMais89098to143029 >=0; var fMenos143029to9313 >=0; var fMais143029to9313 >=0; var fMenos517to4959 >=0; var fMais517to4959 >=0; var fMenos4959to519 >=0; var fMais4959to519 >=0; var fMenos519to521 >=0; var fMais519to521 >=0; var fMenos521to143453 >=0; var fMais521to143453 >=0; var fMenos143453to531 >=0; var fMais143453to531 >=0; var fMenos531to143454 >=0; var fMais531to143454 >=0; var fMenos9313to9314 >=0; var fMais9313to9314 >=0; var fMenos9314to143028 >=0; var fMais9314to143028 >=0; var fMenos725to153490 >=0; var fMais725to153490 >=0; var fMenos153490to2012 >=0; var fMais153490to2012 >=0; var fMenos2012to153486 >=0; var fMais2012to153486 >=0; var fMenos153486to153484 >=0; var fMais153486to153484 >=0; var fMenos153484to153481 >=0; var fMais153484to153481 >=0; var fMenos153481to583 >=0; var fMais153481to583 >=0; var fMenos583to153477 >=0; var fMais583to153477 >=0; var fMenos153477to2013 >=0; var fMais153477to2013 >=0; var fMenos2013to153473 >=0; var fMais2013to153473 >=0; var fMenos153473to582 >=0; var fMais153473to582 >=0; var fMenos582to153471 >=0; var fMais582to153471 >=0; var fMenos153471to2014 >=0; var fMais153471to2014 >=0; var fMenos143028to9302 >=0; var fMais143028to9302 >=0; var fMenos3395to3403 >=0; var fMais3395to3403 >=0; var fMenos9302to9303 >=0; var fMais9302to9303 >=0; var fMenos7248to4134 >=0; var fMais7248to4134 >=0; var fMenos7647to7646 >=0; var fMais7647to7646 >=0; var fMenos133218to7647 >=0; var fMais133218to7647 >=0; var fMenos7648to133218 >=0; var fMais7648to133218 >=0; var fMenos133235to7648 >=0; var fMais133235to7648 >=0; var fMenos9303to143027 >=0; var fMais9303to143027 >=0; var fMenos3408to3397 >=0; var fMais3408to3397 >=0; var fMenos3397to3409 >=0; var fMais3397to3409 >=0; var fMenos3409to143383 >=0; var fMais3409to143383 >=0; var fMenos143383to3410 >=0; var fMais143383to3410 >=0; var fMenos3401to165585 >=0; var fMais3401to165585 >=0; var fMenos165585to3402 >=0; var fMais165585to3402 >=0; var fMenos29474to133235 >=0; var fMais29474to133235 >=0; var fMenos7719to7794 >=0; var fMais7719to7794 >=0; var fMenos127724to7719 >=0; var fMais127724to7719 >=0; var fMenos143027to89079 >=0; var fMais143027to89079 >=0; var fMenos89079to9304 >=0; var fMais89079to9304 >=0; var fMenos49702to7720 >=0; var fMais49702to7720 >=0; var fMenos7720to122530 >=0; var fMais7720to122530 >=0; var fMenos122530to116714 >=0; var fMais122530to116714 >=0; var fMenos116714to49638 >=0; var fMais116714to49638 >=0; var fMenos49638to7725 >=0; var fMais49638to7725 >=0; var fMenos8930to9334 >=0; var fMais8930to9334 >=0; var fMenos9334to9335 >=0; var fMais9334to9335 >=0; var fMenos9335to9336 >=0; var fMais9335to9336 >=0; var fMenos9336to119460 >=0; var fMais9336to119460 >=0; var fMenos119460to119462 >=0; var fMais119460to119462 >=0; var fMenos119462to9337 >=0; var fMais119462to9337 >=0; var fMenos9337to9338 >=0; var fMais9337to9338 >=0; var fMenos9338to9339 >=0; var fMais9338to9339 >=0; var fMenos153498to153502 >=0; var fMais153498to153502 >=0; var fMenos153502to153505 >=0; var fMais153502to153505 >=0; var fMenos153505to593 >=0; var fMais153505to593 >=0; var fMenos593to153508 >=0; var fMais593to153508 >=0; var fMenos153508to594 >=0; var fMais153508to594 >=0; var fMenos594to679 >=0; var fMais594to679 >=0; var fMenos138091to138092 >=0; var fMais138091to138092 >=0; var fMenos138092to138185 >=0; var fMais138092to138185 >=0; var fMenos138185to776 >=0; var fMais138185to776 >=0; var fMenos9339to9340 >=0; var fMais9339to9340 >=0; var fMenos2947to2948 >=0; var fMais2947to2948 >=0; var fMenos7794to122538 >=0; var fMais7794to122538 >=0; var fMenos4975to4982 >=0; var fMais4975to4982 >=0; var fMenos4982to4983 >=0; var fMais4982to4983 >=0; var fMenos9340to9341 >=0; var fMais9340to9341 >=0; var fMenos122538to7798 >=0; var fMais122538to7798 >=0; var fMenos7798to937 >=0; var fMais7798to937 >=0; var fMenos9341to9342 >=0; var fMais9341to9342 >=0; var fMenos9342to9343 >=0; var fMais9342to9343 >=0; var fMenos9343to9344 >=0; var fMais9343to9344 >=0; var fMenos9344to9318 >=0; var fMais9344to9318 >=0; var fMenos7795to49672 >=0; var fMais7795to49672 >=0; var fMenos133215to7795 >=0; var fMais133215to7795 >=0; var fMenos7801to133215 >=0; var fMais7801to133215 >=0; var fMenos7784to7801 >=0; var fMais7784to7801 >=0; var fMenos127731to7784 >=0; var fMais127731to7784 >=0; var fMenos9349to9348 >=0; var fMais9349to9348 >=0; var fMenos9348to9347 >=0; var fMais9348to9347 >=0; var fMenos9323to9354 >=0; var fMais9323to9354 >=0; var fMenos9354to142181 >=0; var fMais9354to142181 >=0; var fMenos142181to9355 >=0; var fMais142181to9355 >=0; var fMenos9355to142183 >=0; var fMais9355to142183 >=0; var fMenos131008to131004 >=0; var fMais131008to131004 >=0; var fMenos131004to131006 >=0; var fMais131004to131006 >=0; var fMenos131006to131003 >=0; var fMais131006to131003 >=0; var fMenos131003to9370 >=0; var fMais131003to9370 >=0; var fMenos9370to131000 >=0; var fMais9370to131000 >=0; var fMenos9637to9624 >=0; var fMais9637to9624 >=0; var fMenos9624to170743 >=0; var fMais9624to170743 >=0; var fMenos170743to9641 >=0; var fMais170743to9641 >=0; var fMenos127730to127731 >=0; var fMais127730to127731 >=0; var fMenos7816to158788 >=0; var fMais7816to158788 >=0; var fMenos146288to146287 >=0; var fMais146288to146287 >=0; var fMenos9641to9632 >=0; var fMais9641to9632 >=0; var fMenos146287to146286 >=0; var fMais146287to146286 >=0; var fMenos9632to9631 >=0; var fMais9632to9631 >=0; var fMenos160343to143520 >=0; var fMais160343to143520 >=0; var fMenos143520to49698 >=0; var fMais143520to49698 >=0; var fMenos122940to143636 >=0; var fMais122940to143636 >=0; var fMenos2993to2994 >=0; var fMais2993to2994 >=0; var fMenos49698to49703 >=0; var fMais49698to49703 >=0; var fMenos143636to5161 >=0; var fMais143636to5161 >=0; var fMenos5161to5162 >=0; var fMais5161to5162 >=0; var fMenos314to318 >=0; var fMais314to318 >=0; var fMenos9631to9630 >=0; var fMais9631to9630 >=0; var fMenos9630to9629 >=0; var fMais9630to9629 >=0; var fMenos5162to5163 >=0; var fMais5162to5163 >=0; var fMenos5163to5164 >=0; var fMais5163to5164 >=0; var fMenos19627to19626 >=0; var fMais19627to19626 >=0; var fMenos19626to19625 >=0; var fMais19626to19625 >=0; var fMenos19625to19624 >=0; var fMais19625to19624 >=0; var fMenos19624to43716 >=0; var fMais19624to43716 >=0; var fMenos9629to9642 >=0; var fMais9629to9642 >=0; var fMenos5164to5165 >=0; var fMais5164to5165 >=0; var fMenos5165to5166 >=0; var fMais5165to5166 >=0; var fMenos9642to144205 >=0; var fMais9642to144205 >=0; var fMenos5166to5167 >=0; var fMais5166to5167 >=0; var fMenos49703to49619 >=0; var fMais49703to49619 >=0; var fMenos5167to5168 >=0; var fMais5167to5168 >=0; var fMenos5168to5169 >=0; var fMais5168to5169 >=0; var fMenos5169to5170 >=0; var fMais5169to5170 >=0; var fMenos49619to49724 >=0; var fMais49619to49724 >=0; var fMenos2292to9798 >=0; var fMais2292to9798 >=0; var fMenos9799to168401 >=0; var fMais9799to168401 >=0; var fMenos49724to49665 >=0; var fMais49724to49665 >=0; var fMenos5170to5171 >=0; var fMais5170to5171 >=0; var fMenos168401to9800 >=0; var fMais168401to9800 >=0; var fMenos5171to4659 >=0; var fMais5171to4659 >=0; var fMenos5307to163392 >=0; var fMais5307to163392 >=0; var fMenos163392to5306 >=0; var fMais163392to5306 >=0; var fMenos49665to124922 >=0; var fMais49665to124922 >=0; var fMenos124922to146150 >=0; var fMais124922to146150 >=0; var fMenos146150to125364 >=0; var fMais146150to125364 >=0; var fMenos5306to5305 >=0; var fMais5306to5305 >=0; var fMenos135077to69925 >=0; var fMais135077to69925 >=0; var fMenos5312to40323 >=0; var fMais5312to40323 >=0; var fMenos9826to9827 >=0; var fMais9826to9827 >=0; var fMenos9843to9831 >=0; var fMais9843to9831 >=0; var fMenos9831to9832 >=0; var fMais9831to9832 >=0; var fMenos9835to9843 >=0; var fMais9835to9843 >=0; var fMenos9832to9844 >=0; var fMais9832to9844 >=0; var fMenos125364to49637 >=0; var fMais125364to49637 >=0; var fMenos9844to9845 >=0; var fMais9844to9845 >=0; var fMenos40323to163393 >=0; var fMais40323to163393 >=0; var fMenos163393to5311 >=0; var fMais163393to5311 >=0; var fMenos3514to9873 >=0; var fMais3514to9873 >=0; var fMenos49637to49633 >=0; var fMais49637to49633 >=0; var fMenos49633to10298 >=0; var fMais49633to10298 >=0; var fMenos5311to40324 >=0; var fMais5311to40324 >=0; var fMenos40324to5310 >=0; var fMais40324to5310 >=0; var fMenos9873to9874 >=0; var fMais9873to9874 >=0; var fMenos7836to7853 >=0; var fMais7836to7853 >=0; var fMenos142501to142498 >=0; var fMais142501to142498 >=0; var fMenos142498to142500 >=0; var fMais142498to142500 >=0; var fMenos142500to142499 >=0; var fMais142500to142499 >=0; var fMenos142499to142502 >=0; var fMais142499to142502 >=0; var fMenos142502to142659 >=0; var fMais142502to142659 >=0; var fMenos142659to3065 >=0; var fMais142659to3065 >=0; var fMenos3065to355 >=0; var fMais3065to355 >=0; var fMenos355to148339 >=0; var fMais355to148339 >=0; var fMenos148339to142658 >=0; var fMais148339to142658 >=0; var fMenos142658to152918 >=0; var fMais142658to152918 >=0; var fMenos9874to9875 >=0; var fMais9874to9875 >=0; var fMenos5310to163394 >=0; var fMais5310to163394 >=0; var fMenos152707to152745 >=0; var fMais152707to152745 >=0; var fMenos163394to40336 >=0; var fMais163394to40336 >=0; var fMenos9875to9876 >=0; var fMais9875to9876 >=0; var fMenos9876to9877 >=0; var fMais9876to9877 >=0; var fMenos9877to9878 >=0; var fMais9877to9878 >=0; var fMenos9878to9879 >=0; var fMais9878to9879 >=0; var fMenos9879to9880 >=0; var fMais9879to9880 >=0; var fMenos9880to9881 >=0; var fMais9880to9881 >=0; var fMenos9881to9882 >=0; var fMais9881to9882 >=0; var fMenos8963to9887 >=0; var fMais8963to9887 >=0; var fMenos9887to9888 >=0; var fMais9887to9888 >=0; var fMenos152745to152673 >=0; var fMais152745to152673 >=0; var fMenos25121to46745 >=0; var fMais25121to46745 >=0; var fMenos46745to46784 >=0; var fMais46745to46784 >=0; var fMenos46784to46785 >=0; var fMais46784to46785 >=0; var fMenos46785to132336 >=0; var fMais46785to132336 >=0; var fMenos132336to132326 >=0; var fMais132336to132326 >=0; var fMenos132326to46760 >=0; var fMais132326to46760 >=0; var fMenos46760to46740 >=0; var fMais46760to46740 >=0; var fMenos46740to131182 >=0; var fMais46740to131182 >=0; var fMenos9888to9889 >=0; var fMais9888to9889 >=0; var fMenos9889to9890 >=0; var fMais9889to9890 >=0; var fMenos152673to152580 >=0; var fMais152673to152580 >=0; var fMenos131182to46778 >=0; var fMais131182to46778 >=0; var fMenos9890to9891 >=0; var fMais9890to9891 >=0; var fMenos9891to9892 >=0; var fMais9891to9892 >=0; var fMenos9892to9893 >=0; var fMais9892to9893 >=0; var fMenos40336to5309 >=0; var fMais40336to5309 >=0; var fMenos46778to46761 >=0; var fMais46778to46761 >=0; var fMenos46761to46729 >=0; var fMais46761to46729 >=0; var fMenos8679to163189 >=0; var fMais8679to163189 >=0; var fMenos163189to8683 >=0; var fMais163189to8683 >=0; var fMenos8683to163188 >=0; var fMais8683to163188 >=0; var fMenos163188to8710 >=0; var fMais163188to8710 >=0; var fMenos152580to152829 >=0; var fMais152580to152829 >=0; var fMenos8710to144315 >=0; var fMais8710to144315 >=0; var fMenos9911to8684 >=0; var fMais9911to8684 >=0; var fMenos8520to8507 >=0; var fMais8520to8507 >=0; var fMenos10265to10274 >=0; var fMais10265to10274 >=0; var fMenos10274to10273 >=0; var fMais10274to10273 >=0; var fMenos5309to40330 >=0; var fMais5309to40330 >=0; var fMenos46729to46739 >=0; var fMais46729to46739 >=0; var fMenos46739to46728 >=0; var fMais46739to46728 >=0; var fMenos10273to146228 >=0; var fMais10273to146228 >=0; var fMenos131048to7909 >=0; var fMais131048to7909 >=0; var fMenos2706to162843 >=0; var fMais2706to162843 >=0; var fMenos162843to2696 >=0; var fMais162843to2696 >=0; var fMenos7909to152808 >=0; var fMais7909to152808 >=0; var fMenos48955to119668 >=0; var fMais48955to119668 >=0; var fMenos119668to29343 >=0; var fMais119668to29343 >=0; var fMenos152808to152564 >=0; var fMais152808to152564 >=0; var fMenos46728to46757 >=0; var fMais46728to46757 >=0; var fMenos152564to152676 >=0; var fMais152564to152676 >=0; var fMenos46757to46774 >=0; var fMais46757to46774 >=0; var fMenos163391to40321 >=0; var fMais163391to40321 >=0; var fMenos152676to152814 >=0; var fMais152676to152814 >=0; var fMenos40321to5308 >=0; var fMais40321to5308 >=0; var fMenos5308to40322 >=0; var fMais5308to40322 >=0; var fMenos40322to5307 >=0; var fMais40322to5307 >=0; var fMenos46774to3176 >=0; var fMais46774to3176 >=0; var fMenos3176to132204 >=0; var fMais3176to132204 >=0; var fMenos132204to46720 >=0; var fMais132204to46720 >=0; var fMenos46720to3177 >=0; var fMais46720to3177 >=0; var fMenos152814to152565 >=0; var fMais152814to152565 >=0; var fMenos10261to146242 >=0; var fMais10261to146242 >=0; var fMenos5371to29320 >=0; var fMais5371to29320 >=0; var fMenos146242to146239 >=0; var fMais146242to146239 >=0; var fMenos146239to104998 >=0; var fMais146239to104998 >=0; var fMenos104998to159882 >=0; var fMais104998to159882 >=0; var fMenos10257to146240 >=0; var fMais10257to146240 >=0; var fMenos146240to10261 >=0; var fMais146240to10261 >=0; var fMenos14171to7690 >=0; var fMais14171to7690 >=0; var fMenos7690to14178 >=0; var fMais7690to14178 >=0; var fMenos10282to126717 >=0; var fMais10282to126717 >=0; var fMenos126717to10279 >=0; var fMais126717to10279 >=0; var fMenos152565to152740 >=0; var fMais152565to152740 >=0; var fMenos152740to152607 >=0; var fMais152740to152607 >=0; var fMenos152607to152786 >=0; var fMais152607to152786 >=0; var fMenos10279to129851 >=0; var fMais10279to129851 >=0; var fMenos152786to152557 >=0; var fMais152786to152557 >=0; var fMenos129851to10283 >=0; var fMais129851to10283 >=0; var fMenos3595to119757 >=0; var fMais3595to119757 >=0; var fMenos119757to1280 >=0; var fMais119757to1280 >=0; var fMenos1280to119752 >=0; var fMais1280to119752 >=0; var fMenos119752to119750 >=0; var fMais119752to119750 >=0; var fMenos119750to1560 >=0; var fMais119750to1560 >=0; var fMenos1560to1281 >=0; var fMais1560to1281 >=0; var fMenos1281to1286 >=0; var fMais1281to1286 >=0; var fMenos1286to132810 >=0; var fMais1286to132810 >=0; var fMenos132810to132813 >=0; var fMais132810to132813 >=0; var fMenos10283to129847 >=0; var fMais10283to129847 >=0; var fMenos129847to10280 >=0; var fMais129847to10280 >=0; var fMenos10280to129841 >=0; var fMais10280to129841 >=0; var fMenos129841to10281 >=0; var fMais129841to10281 >=0; var fMenos10281to129823 >=0; var fMais10281to129823 >=0; var fMenos122457to10291 >=0; var fMais122457to10291 >=0; var fMenos10292to10284 >=0; var fMais10292to10284 >=0; var fMenos152557to152780 >=0; var fMais152557to152780 >=0; var fMenos152780to152739 >=0; var fMais152780to152739 >=0; var fMenos152739to152641 >=0; var fMais152739to152641 >=0; var fMenos152641to152696 >=0; var fMais152641to152696 >=0; var fMenos152696to7943 >=0; var fMais152696to7943 >=0; var fMenos7943to7938 >=0; var fMais7943to7938 >=0; var fMenos122474to10292 >=0; var fMais122474to10292 >=0; var fMenos3177to3178 >=0; var fMais3177to3178 >=0; var fMenos10285to122474 >=0; var fMais10285to122474 >=0; var fMenos5378to5379 >=0; var fMais5378to5379 >=0; var fMenos10286to10285 >=0; var fMais10286to10285 >=0; var fMenos152740to152843 >=0; var fMais152740to152843 >=0; var fMenos152693to152672 >=0; var fMais152693to152672 >=0; var fMenos152672to152667 >=0; var fMais152672to152667 >=0; var fMenos152667to152618 >=0; var fMais152667to152618 >=0; var fMenos152618to152669 >=0; var fMais152618to152669 >=0; var fMenos152669to152611 >=0; var fMais152669to152611 >=0; var fMenos152611to152838 >=0; var fMais152611to152838 >=0; var fMenos5379to5380 >=0; var fMais5379to5380 >=0; var fMenos5380to5381 >=0; var fMais5380to5381 >=0; var fMenos5381to5382 >=0; var fMais5381to5382 >=0; var fMenos5382to5383 >=0; var fMais5382to5383 >=0; var fMenos170885to5417 >=0; var fMais170885to5417 >=0; var fMenos170884to170885 >=0; var fMais170884to170885 >=0; var fMenos43547to170884 >=0; var fMais43547to170884 >=0; var fMenos152838to152722 >=0; var fMais152838to152722 >=0; var fMenos126234to7757 >=0; var fMais126234to7757 >=0; var fMenos7757to137198 >=0; var fMais7757to137198 >=0; var fMenos170883to43547 >=0; var fMais170883to43547 >=0; var fMenos43548to170883 >=0; var fMais43548to170883 >=0; var fMenos5418to43548 >=0; var fMais5418to43548 >=0; var fMenos152722to152634 >=0; var fMais152722to152634 >=0; var fMenos10298to49644 >=0; var fMais10298to49644 >=0; var fMenos120772to47746 >=0; var fMais120772to47746 >=0; var fMenos49644to18509 >=0; var fMais49644to18509 >=0; var fMenos165244to120772 >=0; var fMais165244to120772 >=0; var fMenos18509to10299 >=0; var fMais18509to10299 >=0; var fMenos152634to152837 >=0; var fMais152634to152837 >=0; var fMenos10299to10297 >=0; var fMais10299to10297 >=0; var fMenos72963to69200 >=0; var fMais72963to69200 >=0; var fMenos146310to10308 >=0; var fMais146310to10308 >=0; var fMenos170529to10431 >=0; var fMais170529to10431 >=0; var fMenos10431to170517 >=0; var fMais10431to170517 >=0; var fMenos170517to10426 >=0; var fMais170517to10426 >=0; var fMenos2999to165244 >=0; var fMais2999to165244 >=0; var fMenos10426to14601 >=0; var fMais10426to14601 >=0; var fMenos6073to97137 >=0; var fMais6073to97137 >=0; var fMenos97137to6074 >=0; var fMais97137to6074 >=0; var fMenos6074to97138 >=0; var fMais6074to97138 >=0; var fMenos97138to6075 >=0; var fMais97138to6075 >=0; var fMenos6075to6076 >=0; var fMais6075to6076 >=0; var fMenos6076to97160 >=0; var fMais6076to97160 >=0; var fMenos97160to6077 >=0; var fMais97160to6077 >=0; var fMenos152837to152654 >=0; var fMais152837to152654 >=0; var fMenos6077to97200 >=0; var fMais6077to97200 >=0; var fMenos10427to10428 >=0; var fMais10427to10428 >=0; var fMenos1396to1395 >=0; var fMais1396to1395 >=0; var fMenos14544to146571 >=0; var fMais14544to146571 >=0; var fMenos1397to1396 >=0; var fMais1397to1396 >=0; var fMenos138074to14544 >=0; var fMais138074to14544 >=0; var fMenos10452to10453 >=0; var fMais10452to10453 >=0; var fMenos10453to10454 >=0; var fMais10453to10454 >=0; var fMenos10454to10273 >=0; var fMais10454to10273 >=0; var fMenos146223to146225 >=0; var fMais146223to146225 >=0; var fMenos146225to146226 >=0; var fMais146225to146226 >=0; var fMenos138930to11828 >=0; var fMais138930to11828 >=0; var fMenos152654to152663 >=0; var fMais152654to152663 >=0; var fMenos97200to6078 >=0; var fMais97200to6078 >=0; var fMenos6085to6086 >=0; var fMais6085to6086 >=0; var fMenos152663to152598 >=0; var fMais152663to152598 >=0; var fMenos152598to7955 >=0; var fMais152598to7955 >=0; var fMenos7955to75582 >=0; var fMais7955to75582 >=0; var fMenos6086to6087 >=0; var fMais6086to6087 >=0; var fMenos6087to6088 >=0; var fMais6087to6088 >=0; var fMenos69139to10692 >=0; var fMais69139to10692 >=0; var fMenos7226to7962 >=0; var fMais7226to7962 >=0; var fMenos14602to10430 >=0; var fMais14602to10430 >=0; var fMenos3659to170033 >=0; var fMais3659to170033 >=0; var fMenos167518to14597 >=0; var fMais167518to14597 >=0; var fMenos170033to3658 >=0; var fMais170033to3658 >=0; var fMenos2560to145782 >=0; var fMais2560to145782 >=0; var fMenos145782to129315 >=0; var fMais145782to129315 >=0; var fMenos14597to167516 >=0; var fMais14597to167516 >=0; var fMenos129315to145781 >=0; var fMais129315to145781 >=0; var fMenos167516to10510 >=0; var fMais167516to10510 >=0; var fMenos10510to10509 >=0; var fMais10510to10509 >=0; var fMenos10509to10605 >=0; var fMais10509to10605 >=0; var fMenos10605to121182 >=0; var fMais10605to121182 >=0; var fMenos121182to123870 >=0; var fMais121182to123870 >=0; var fMenos3680to13804 >=0; var fMais3680to13804 >=0; var fMenos123870to5420 >=0; var fMais123870to5420 >=0; var fMenos5420to5421 >=0; var fMais5420to5421 >=0; var fMenos5421to164952 >=0; var fMais5421to164952 >=0; var fMenos164952to15565 >=0; var fMais164952to15565 >=0; var fMenos121291to165835 >=0; var fMais121291to165835 >=0; var fMenos6088to6089 >=0; var fMais6088to6089 >=0; var fMenos165835to124221 >=0; var fMais165835to124221 >=0; var fMenos6089to6090 >=0; var fMais6089to6090 >=0; var fMenos124221to1793 >=0; var fMais124221to1793 >=0; var fMenos10508to10601 >=0; var fMais10508to10601 >=0; var fMenos10526to150806 >=0; var fMais10526to150806 >=0; var fMenos150806to29292 >=0; var fMais150806to29292 >=0; var fMenos13374to13375 >=0; var fMais13374to13375 >=0; var fMenos13375to13376 >=0; var fMais13375to13376 >=0; var fMenos7970to7983 >=0; var fMais7970to7983 >=0; var fMenos13376to13377 >=0; var fMais13376to13377 >=0; var fMenos7983to7971 >=0; var fMais7983to7971 >=0; var fMenos13377to13378 >=0; var fMais13377to13378 >=0; var fMenos8055to8057 >=0; var fMais8055to8057 >=0; var fMenos8057to8052 >=0; var fMais8057to8052 >=0; var fMenos8052to8056 >=0; var fMais8052to8056 >=0; var fMenos10269to104976 >=0; var fMais10269to104976 >=0; var fMenos8056to8053 >=0; var fMais8056to8053 >=0; var fMenos13378to10528 >=0; var fMais13378to10528 >=0; var fMenos10528to10530 >=0; var fMais10528to10530 >=0; var fMenos130720to8251 >=0; var fMais130720to8251 >=0; var fMenos104976to138262 >=0; var fMais104976to138262 >=0; var fMenos8251to17585 >=0; var fMais8251to17585 >=0; var fMenos17585to8252 >=0; var fMais17585to8252 >=0; var fMenos10530to10554 >=0; var fMais10530to10554 >=0; var fMenos10532to10554 >=0; var fMais10532to10554 >=0; var fMenos10529to10532 >=0; var fMais10529to10532 >=0; var fMenos10556to10536 >=0; var fMais10556to10536 >=0; var fMenos10536to10538 >=0; var fMais10536to10538 >=0; var fMenos10538to10544 >=0; var fMais10538to10544 >=0; var fMenos10544to10551 >=0; var fMais10544to10551 >=0; var fMenos3693to148277 >=0; var fMais3693to148277 >=0; var fMenos10551to10550 >=0; var fMais10551to10550 >=0; var fMenos132024to132023 >=0; var fMais132024to132023 >=0; var fMenos132023to132021 >=0; var fMais132023to132021 >=0; var fMenos132021to132022 >=0; var fMais132021to132022 >=0; var fMenos120901to10543 >=0; var fMais120901to10543 >=0; var fMenos49498to8258 >=0; var fMais49498to8258 >=0; var fMenos11889to120901 >=0; var fMais11889to120901 >=0; var fMenos2726to2727 >=0; var fMais2726to2727 >=0; var fMenos3100to3018 >=0; var fMais3100to3018 >=0; var fMenos3695to8252 >=0; var fMais3695to8252 >=0; var fMenos69048to11889 >=0; var fMais69048to11889 >=0; var fMenos69048to10537 >=0; var fMais69048to10537 >=0; var fMenos10537to10539 >=0; var fMais10537to10539 >=0; var fMenos8275to8276 >=0; var fMais8275to8276 >=0; var fMenos10539to120914 >=0; var fMais10539to120914 >=0; var fMenos8276to8277 >=0; var fMais8276to8277 >=0; var fMenos8277to137974 >=0; var fMais8277to137974 >=0; var fMenos137974to8278 >=0; var fMais137974to8278 >=0; var fMenos8278to17533 >=0; var fMais8278to17533 >=0; var fMenos14047to14099 >=0; var fMais14047to14099 >=0; var fMenos120914to120911 >=0; var fMais120914to120911 >=0; var fMenos120911to10542 >=0; var fMais120911to10542 >=0; var fMenos8329to14348 >=0; var fMais8329to14348 >=0; var fMenos10542to10526 >=0; var fMais10542to10526 >=0; var fMenos10554to124242 >=0; var fMais10554to124242 >=0; var fMenos124242to10555 >=0; var fMais124242to10555 >=0; var fMenos10555to10556 >=0; var fMais10555to10556 >=0; var fMenos93333to2159 >=0; var fMais93333to2159 >=0; var fMenos93277to6142 >=0; var fMais93277to6142 >=0; var fMenos26356to167512 >=0; var fMais26356to167512 >=0; var fMenos3718to3622 >=0; var fMais3718to3622 >=0; var fMenos2727to2728 >=0; var fMais2727to2728 >=0; var fMenos162854to162855 >=0; var fMais162854to162855 >=0; var fMenos166609to166611 >=0; var fMais166609to166611 >=0; var fMenos166611to1430 >=0; var fMais166611to1430 >=0; var fMenos1430to166616 >=0; var fMais1430to166616 >=0; var fMenos166616to1429 >=0; var fMais166616to1429 >=0; var fMenos1429to166619 >=0; var fMais1429to166619 >=0; var fMenos166619to1428 >=0; var fMais166619to1428 >=0; var fMenos1428to166622 >=0; var fMais1428to166622 >=0; var fMenos166622to1427 >=0; var fMais166622to1427 >=0; var fMenos1427to166626 >=0; var fMais1427to166626 >=0; var fMenos167512to26358 >=0; var fMais167512to26358 >=0; var fMenos26358to26348 >=0; var fMais26358to26348 >=0; var fMenos26348to26355 >=0; var fMais26348to26355 >=0; var fMenos26355to170515 >=0; var fMais26355to170515 >=0; var fMenos10578to10576 >=0; var fMais10578to10576 >=0; var fMenos10576to10577 >=0; var fMais10576to10577 >=0; var fMenos10578to10583 >=0; var fMais10578to10583 >=0; var fMenos10583to10575 >=0; var fMais10583to10575 >=0; var fMenos1463to166664 >=0; var fMais1463to166664 >=0; var fMenos166664to1462 >=0; var fMais166664to1462 >=0; var fMenos1462to166660 >=0; var fMais1462to166660 >=0; var fMenos166660to527 >=0; var fMais166660to527 >=0; var fMenos527to1461 >=0; var fMais527to1461 >=0; var fMenos1461to528 >=0; var fMais1461to528 >=0; var fMenos162918to1465 >=0; var fMais162918to1465 >=0; var fMenos10591to10592 >=0; var fMais10591to10592 >=0; var fMenos10588to69138 >=0; var fMais10588to69138 >=0; var fMenos121114to10601 >=0; var fMais121114to10601 >=0; var fMenos69177to49544 >=0; var fMais69177to49544 >=0; var fMenos49544to10612 >=0; var fMais49544to10612 >=0; var fMenos10613to10608 >=0; var fMais10613to10608 >=0; var fMenos10608to10609 >=0; var fMais10608to10609 >=0; var fMenos10613to49541 >=0; var fMais10613to49541 >=0; var fMenos14200to8326 >=0; var fMais14200to8326 >=0; var fMenos49541to10617 >=0; var fMais49541to10617 >=0; var fMenos8324to8325 >=0; var fMais8324to8325 >=0; var fMenos8318to14259 >=0; var fMais8318to14259 >=0; var fMenos14259to27421 >=0; var fMais14259to27421 >=0; var fMenos14352to14540 >=0; var fMais14352to14540 >=0; var fMenos14540to41074 >=0; var fMais14540to41074 >=0; var fMenos41074to144983 >=0; var fMais41074to144983 >=0; var fMenos144983to8324 >=0; var fMais144983to8324 >=0; var fMenos8325to8334 >=0; var fMais8325to8334 >=0; var fMenos144043to8388 >=0; var fMais144043to8388 >=0; var fMenos8388to8387 >=0; var fMais8388to8387 >=0; var fMenos8387to160953 >=0; var fMais8387to160953 >=0; var fMenos132917to6956 >=0; var fMais132917to6956 >=0; var fMenos160953to8386 >=0; var fMais160953to8386 >=0; var fMenos3725to147979 >=0; var fMais3725to147979 >=0; var fMenos162855to2732 >=0; var fMais162855to2732 >=0; var fMenos147979to147976 >=0; var fMais147979to147976 >=0; var fMenos2732to162856 >=0; var fMais2732to162856 >=0; var fMenos6956to6957 >=0; var fMais6956to6957 >=0; var fMenos162856to2733 >=0; var fMais162856to2733 >=0; var fMenos6957to6958 >=0; var fMais6957to6958 >=0; var fMenos2733to162857 >=0; var fMais2733to162857 >=0; var fMenos6958to123764 >=0; var fMais6958to123764 >=0; var fMenos162857to2734 >=0; var fMais162857to2734 >=0; var fMenos147976to147974 >=0; var fMais147976to147974 >=0; var fMenos8386to161698 >=0; var fMais8386to161698 >=0; var fMenos161698to8385 >=0; var fMais161698to8385 >=0; var fMenos123764to123757 >=0; var fMais123764to123757 >=0; var fMenos123757to123758 >=0; var fMais123757to123758 >=0; var fMenos10617to10618 >=0; var fMais10617to10618 >=0; var fMenos147974to111242 >=0; var fMais147974to111242 >=0; var fMenos8385to161695 >=0; var fMais8385to161695 >=0; var fMenos161695to81843 >=0; var fMais161695to81843 >=0; var fMenos2784to2783 >=0; var fMais2784to2783 >=0; var fMenos132836to132837 >=0; var fMais132836to132837 >=0; var fMenos132837to147960 >=0; var fMais132837to147960 >=0; var fMenos147960to95076 >=0; var fMais147960to95076 >=0; var fMenos127028to2784 >=0; var fMais127028to2784 >=0; var fMenos2734to162858 >=0; var fMais2734to162858 >=0; var fMenos162858to162859 >=0; var fMais162858to162859 >=0; var fMenos95076to3724 >=0; var fMais95076to3724 >=0; var fMenos13013to10648 >=0; var fMais13013to10648 >=0; var fMenos3724to128994 >=0; var fMais3724to128994 >=0; var fMenos128994to147961 >=0; var fMais128994to147961 >=0; var fMenos10648to10649 >=0; var fMais10648to10649 >=0; var fMenos123758to123730 >=0; var fMais123758to123730 >=0; var fMenos123730to123745 >=0; var fMais123730to123745 >=0; var fMenos123745to123759 >=0; var fMais123745to123759 >=0; var fMenos10649to10650 >=0; var fMais10649to10650 >=0; var fMenos10650to10651 >=0; var fMais10650to10651 >=0; var fMenos10651to10652 >=0; var fMais10651to10652 >=0; var fMenos10652to10653 >=0; var fMais10652to10653 >=0; var fMenos10653to10654 >=0; var fMais10653to10654 >=0; var fMenos81843to161696 >=0; var fMais81843to161696 >=0; var fMenos161696to8384 >=0; var fMais161696to8384 >=0; var fMenos8384to161035 >=0; var fMais8384to161035 >=0; var fMenos134742to134741 >=0; var fMais134742to134741 >=0; var fMenos134740to10661 >=0; var fMais134740to10661 >=0; var fMenos10675to13013 >=0; var fMais10675to13013 >=0; var fMenos1518to169425 >=0; var fMais1518to169425 >=0; var fMenos169425to1516 >=0; var fMais169425to1516 >=0; var fMenos12173to13018 >=0; var fMais12173to13018 >=0; var fMenos123759to123738 >=0; var fMais123759to123738 >=0; var fMenos10701to13017 >=0; var fMais10701to13017 >=0; var fMenos3658to150740 >=0; var fMais3658to150740 >=0; var fMenos150740to129437 >=0; var fMais150740to129437 >=0; var fMenos10707to10703 >=0; var fMais10707to10703 >=0; var fMenos161035to161034 >=0; var fMais161035to161034 >=0; var fMenos10713to150695 >=0; var fMais10713to150695 >=0; var fMenos150695to10712 >=0; var fMais150695to10712 >=0; var fMenos10720to10722 >=0; var fMais10720to10722 >=0; var fMenos10722to10719 >=0; var fMais10722to10719 >=0; var fMenos8444to43125 >=0; var fMais8444to43125 >=0; var fMenos123738to123736 >=0; var fMais123738to123736 >=0; var fMenos123736to123741 >=0; var fMais123736to123741 >=0; var fMenos43125to8446 >=0; var fMais43125to8446 >=0; var fMenos8446to43137 >=0; var fMais8446to43137 >=0; var fMenos43137to8443 >=0; var fMais43137to8443 >=0; var fMenos151939to151831 >=0; var fMais151939to151831 >=0; var fMenos151831to151940 >=0; var fMais151831to151940 >=0; var fMenos151940to151894 >=0; var fMais151940to151894 >=0; var fMenos151894to151945 >=0; var fMais151894to151945 >=0; var fMenos151945to151943 >=0; var fMais151945to151943 >=0; var fMenos151943to151823 >=0; var fMais151943to151823 >=0; var fMenos10719to50738 >=0; var fMais10719to50738 >=0; var fMenos50738to10710 >=0; var fMais50738to10710 >=0; var fMenos10710to19777 >=0; var fMais10710to19777 >=0; var fMenos151823to151861 >=0; var fMais151823to151861 >=0; var fMenos19777to10711 >=0; var fMais19777to10711 >=0; var fMenos10711to13034 >=0; var fMais10711to13034 >=0; var fMenos10730to47129 >=0; var fMais10730to47129 >=0; var fMenos2268to128677 >=0; var fMais2268to128677 >=0; var fMenos1519to1538 >=0; var fMais1519to1538 >=0; var fMenos47129to10730 >=0; var fMais47129to10730 >=0; var fMenos47129to10772 >=0; var fMais47129to10772 >=0; var fMenos109516to123924 >=0; var fMais109516to123924 >=0; var fMenos10806to1549 >=0; var fMais10806to1549 >=0; var fMenos1549to10784 >=0; var fMais1549to10784 >=0; var fMenos1581to1582 >=0; var fMais1581to1582 >=0; var fMenos1583to1300 >=0; var fMais1583to1300 >=0; var fMenos151861to151841 >=0; var fMais151861to151841 >=0; var fMenos151841to151912 >=0; var fMais151841to151912 >=0; var fMenos151912to151950 >=0; var fMais151912to151950 >=0; var fMenos123741to123754 >=0; var fMais123741to123754 >=0; var fMenos123754to123752 >=0; var fMais123754to123752 >=0; var fMenos151950to151888 >=0; var fMais151950to151888 >=0; var fMenos151888to151890 >=0; var fMais151888to151890 >=0; var fMenos123924to123923 >=0; var fMais123924to123923 >=0; var fMenos123923to10752 >=0; var fMais123923to10752 >=0; var fMenos10752to10753 >=0; var fMais10752to10753 >=0; var fMenos10753to169437 >=0; var fMais10753to169437 >=0; var fMenos10772to2261 >=0; var fMais10772to2261 >=0; var fMenos10777to124010 >=0; var fMais10777to124010 >=0; var fMenos124010to2260 >=0; var fMais124010to2260 >=0; var fMenos2260to160314 >=0; var fMais2260to160314 >=0; var fMenos160314to47118 >=0; var fMais160314to47118 >=0; var fMenos162859to162860 >=0; var fMais162859to162860 >=0; var fMenos123752to123746 >=0; var fMais123752to123746 >=0; var fMenos2161to6965 >=0; var fMais2161to6965 >=0; var fMenos6965to6966 >=0; var fMais6965to6966 >=0; var fMenos6966to6967 >=0; var fMais6966to6967 >=0; var fMenos6967to6968 >=0; var fMais6967to6968 >=0; var fMenos47118to2273 >=0; var fMais47118to2273 >=0; var fMenos6968to6969 >=0; var fMais6968to6969 >=0; var fMenos6969to45206 >=0; var fMais6969to45206 >=0; var fMenos45206to76003 >=0; var fMais45206to76003 >=0; var fMenos171275to6976 >=0; var fMais171275to6976 >=0; var fMenos2273to10775 >=0; var fMais2273to10775 >=0; var fMenos6980to75983 >=0; var fMais6980to75983 >=0; var fMenos132910to6983 >=0; var fMais132910to6983 >=0; var fMenos162860to2735 >=0; var fMais162860to2735 >=0; var fMenos122005to3717 >=0; var fMais122005to3717 >=0; var fMenos10775to123941 >=0; var fMais10775to123941 >=0; var fMenos6983to163633 >=0; var fMais6983to163633 >=0; var fMenos46844to10794 >=0; var fMais46844to10794 >=0; var fMenos10794to10795 >=0; var fMais10794to10795 >=0; var fMenos10730to10777 >=0; var fMais10730to10777 >=0; var fMenos10788to163612 >=0; var fMais10788to163612 >=0; var fMenos163612to10806 >=0; var fMais163612to10806 >=0; var fMenos152255to152412 >=0; var fMais152255to152412 >=0; var fMenos152412to127817 >=0; var fMais152412to127817 >=0; var fMenos127817to152378 >=0; var fMais127817to152378 >=0; var fMenos152378to10828 >=0; var fMais152378to10828 >=0; var fMenos10828to152179 >=0; var fMais10828to152179 >=0; var fMenos152179to152449 >=0; var fMais152179to152449 >=0; var fMenos152449to152472 >=0; var fMais152449to152472 >=0; var fMenos145147to45684 >=0; var fMais145147to45684 >=0; var fMenos45684to45699 >=0; var fMais45684to45699 >=0; var fMenos45699to45680 >=0; var fMais45699to45680 >=0; var fMenos24985to24986 >=0; var fMais24985to24986 >=0; var fMenos24986to122486 >=0; var fMais24986to122486 >=0; var fMenos149863to150034 >=0; var fMais149863to150034 >=0; var fMenos150022to10879 >=0; var fMais150022to10879 >=0; var fMenos2735to162861 >=0; var fMais2735to162861 >=0; var fMenos10885to149730 >=0; var fMais10885to149730 >=0; var fMenos149730to149579 >=0; var fMais149730to149579 >=0; var fMenos163633to76011 >=0; var fMais163633to76011 >=0; var fMenos149579to122515 >=0; var fMais149579to122515 >=0; var fMenos122515to149632 >=0; var fMais122515to149632 >=0; var fMenos149554to149735 >=0; var fMais149554to149735 >=0; var fMenos1681to1682 >=0; var fMais1681to1682 >=0; var fMenos1682to1683 >=0; var fMais1682to1683 >=0; var fMenos149735to10887 >=0; var fMais149735to10887 >=0; var fMenos10887to149578 >=0; var fMais10887to149578 >=0; var fMenos1696to1670 >=0; var fMais1696to1670 >=0; var fMenos1670to1696 >=0; var fMais1670to1696 >=0; var fMenos149578to149700 >=0; var fMais149578to149700 >=0; var fMenos149700to10888 >=0; var fMais149700to10888 >=0; var fMenos10888to149630 >=0; var fMais10888to149630 >=0; var fMenos119703to119712 >=0; var fMais119703to119712 >=0; var fMenos119712to119715 >=0; var fMais119712to119715 >=0; var fMenos119715to119716 >=0; var fMais119715to119716 >=0; var fMenos119716to119714 >=0; var fMais119716to119714 >=0; var fMenos119714to119710 >=0; var fMais119714to119710 >=0; var fMenos119710to119706 >=0; var fMais119710to119706 >=0; var fMenos119706to163481 >=0; var fMais119706to163481 >=0; var fMenos163481to119700 >=0; var fMais163481to119700 >=0; var fMenos149630to149568 >=0; var fMais149630to149568 >=0; var fMenos149568to149691 >=0; var fMais149568to149691 >=0; var fMenos149691to149827 >=0; var fMais149691to149827 >=0; var fMenos149827to150075 >=0; var fMais149827to150075 >=0; var fMenos119694to119693 >=0; var fMais119694to119693 >=0; var fMenos2180to149646 >=0; var fMais2180to149646 >=0; var fMenos149646to149948 >=0; var fMais149646to149948 >=0; var fMenos129004to144609 >=0; var fMais129004to144609 >=0; var fMenos144609to129005 >=0; var fMais144609to129005 >=0; var fMenos129005to129326 >=0; var fMais129005to129326 >=0; var fMenos129326to129337 >=0; var fMais129326to129337 >=0; var fMenos129006to129004 >=0; var fMais129006to129004 >=0; var fMenos76011to6974 >=0; var fMais76011to6974 >=0; var fMenos1871to156675 >=0; var fMais1871to156675 >=0; var fMenos156675to1872 >=0; var fMais156675to1872 >=0; var fMenos1872to1873 >=0; var fMais1872to1873 >=0; var fMenos1873to156666 >=0; var fMais1873to156666 >=0; var fMenos156666to1874 >=0; var fMais156666to1874 >=0; var fMenos19249to18916 >=0; var fMais19249to18916 >=0; var fMenos18916to19252 >=0; var fMais18916to19252 >=0; var fMenos149617to149848 >=0; var fMais149617to149848 >=0; var fMenos19252to29400 >=0; var fMais19252to29400 >=0; var fMenos11033to18752 >=0; var fMais11033to18752 >=0; var fMenos18752to11032 >=0; var fMais18752to11032 >=0; var fMenos1878to1879 >=0; var fMais1878to1879 >=0; var fMenos3465to3550 >=0; var fMais3465to3550 >=0; var fMenos3550to122723 >=0; var fMais3550to122723 >=0; var fMenos122723to2328 >=0; var fMais122723to2328 >=0; var fMenos11039to11038 >=0; var fMais11039to11038 >=0; var fMenos11038to11037 >=0; var fMais11038to11037 >=0; var fMenos11037to138722 >=0; var fMais11037to138722 >=0; var fMenos138722to11036 >=0; var fMais138722to11036 >=0; var fMenos150051to149868 >=0; var fMais150051to149868 >=0; var fMenos149868to149866 >=0; var fMais149868to149866 >=0; var fMenos149866to149809 >=0; var fMais149866to149809 >=0; var fMenos11036to11035 >=0; var fMais11036to11035 >=0; var fMenos11035to169418 >=0; var fMais11035to169418 >=0; var fMenos2199to2244 >=0; var fMais2199to2244 >=0; var fMenos2244to2245 >=0; var fMais2244to2245 >=0; var fMenos2245to2246 >=0; var fMais2245to2246 >=0; var fMenos2246to2257 >=0; var fMais2246to2257 >=0; var fMenos169418to11034 >=0; var fMais169418to11034 >=0; var fMenos2257to122449 >=0; var fMais2257to122449 >=0; var fMenos122449to13498 >=0; var fMais122449to13498 >=0; var fMenos11034to169749 >=0; var fMais11034to169749 >=0; var fMenos11045to11065 >=0; var fMais11045to11065 >=0; var fMenos19252to19253 >=0; var fMais19252to19253 >=0; var fMenos13044to2267 >=0; var fMais13044to2267 >=0; var fMenos2267to2268 >=0; var fMais2267to2268 >=0; var fMenos2268to10780 >=0; var fMais2268to10780 >=0; var fMenos10780to2269 >=0; var fMais10780to2269 >=0; var fMenos2269to2270 >=0; var fMais2269to2270 >=0; var fMenos2270to2271 >=0; var fMais2270to2271 >=0; var fMenos2277to13493 >=0; var fMais2277to13493 >=0; var fMenos19253to1355 >=0; var fMais19253to1355 >=0; var fMenos11064to11335 >=0; var fMais11064to11335 >=0; var fMenos11335to11044 >=0; var fMais11335to11044 >=0; var fMenos11044to11045 >=0; var fMais11044to11045 >=0; var fMenos11117to121856 >=0; var fMais11117to121856 >=0; var fMenos11069to11070 >=0; var fMais11069to11070 >=0; var fMenos11081to11099 >=0; var fMais11081to11099 >=0; var fMenos11096to11083 >=0; var fMais11096to11083 >=0; var fMenos11083to11084 >=0; var fMais11083to11084 >=0; var fMenos11097to142878 >=0; var fMais11097to142878 >=0; var fMenos11100to18737 >=0; var fMais11100to18737 >=0; var fMenos18737to18739 >=0; var fMais18737to18739 >=0; var fMenos18739to18723 >=0; var fMais18739to18723 >=0; var fMenos18723to18727 >=0; var fMais18723to18727 >=0; var fMenos18727to18751 >=0; var fMais18727to18751 >=0; var fMenos18751to122173 >=0; var fMais18751to122173 >=0; var fMenos122173to122169 >=0; var fMais122173to122169 >=0; var fMenos122169to122166 >=0; var fMais122169to122166 >=0; var fMenos122166to122158 >=0; var fMais122166to122158 >=0; var fMenos122158to11099 >=0; var fMais122158to11099 >=0; var fMenos11295to33547 >=0; var fMais11295to33547 >=0; var fMenos33547to11063 >=0; var fMais33547to11063 >=0; var fMenos2664to116175 >=0; var fMais2664to116175 >=0; var fMenos116175to116172 >=0; var fMais116175to116172 >=0; var fMenos19692to163253 >=0; var fMais19692to163253 >=0; var fMenos163253to11139 >=0; var fMais163253to11139 >=0; var fMenos11142to18782 >=0; var fMais11142to18782 >=0; var fMenos18782to18784 >=0; var fMais18782to18784 >=0; var fMenos11147to11148 >=0; var fMais11147to11148 >=0; var fMenos11169to18946 >=0; var fMais11169to18946 >=0; var fMenos18946to11170 >=0; var fMais18946to11170 >=0; var fMenos6974to76013 >=0; var fMais6974to76013 >=0; var fMenos11170to122348 >=0; var fMais11170to122348 >=0; var fMenos122348to18888 >=0; var fMais122348to18888 >=0; var fMenos18888to18930 >=0; var fMais18888to18930 >=0; var fMenos138965to11249 >=0; var fMais138965to11249 >=0; var fMenos50632to158417 >=0; var fMais50632to158417 >=0; var fMenos18867to122275 >=0; var fMais18867to122275 >=0; var fMenos76013to132913 >=0; var fMais76013to132913 >=0; var fMenos2374to2382 >=0; var fMais2374to2382 >=0; var fMenos2382to2383 >=0; var fMais2382to2383 >=0; var fMenos2383to2384 >=0; var fMais2383to2384 >=0; var fMenos2384to2385 >=0; var fMais2384to2385 >=0; var fMenos2385to241 >=0; var fMais2385to241 >=0; var fMenos2396to2397 >=0; var fMais2396to2397 >=0; var fMenos2397to2398 >=0; var fMais2397to2398 >=0; var fMenos2398to2399 >=0; var fMais2398to2399 >=0; var fMenos2399to2400 >=0; var fMais2399to2400 >=0; var fMenos2400to2401 >=0; var fMais2400to2401 >=0; var fMenos2401to148362 >=0; var fMais2401to148362 >=0; var fMenos122275to11110 >=0; var fMais122275to11110 >=0; var fMenos11208to18857 >=0; var fMais11208to18857 >=0; var fMenos11220to11221 >=0; var fMais11220to11221 >=0; var fMenos2408to2407 >=0; var fMais2408to2407 >=0; var fMenos11221to11228 >=0; var fMais11221to11228 >=0; var fMenos11228to69231 >=0; var fMais11228to69231 >=0; var fMenos11228to11229 >=0; var fMais11228to11229 >=0; var fMenos11235to11236 >=0; var fMais11235to11236 >=0; var fMenos132913to6975 >=0; var fMais132913to6975 >=0; var fMenos6975to171275 >=0; var fMais6975to171275 >=0; var fMenos5487to7033 >=0; var fMais5487to7033 >=0; var fMenos7033to7025 >=0; var fMais7033to7025 >=0; var fMenos7040to7039 >=0; var fMais7040to7039 >=0; var fMenos7039to7046 >=0; var fMais7039to7046 >=0; var fMenos11236to11237 >=0; var fMais11236to11237 >=0; var fMenos11237to11239 >=0; var fMais11237to11239 >=0; var fMenos48947to11248 >=0; var fMais48947to11248 >=0; var fMenos11248to18754 >=0; var fMais11248to18754 >=0; var fMenos18754to11247 >=0; var fMais18754to11247 >=0; var fMenos11247to11246 >=0; var fMais11247to11246 >=0; var fMenos11246to11251 >=0; var fMais11246to11251 >=0; var fMenos127179to3745 >=0; var fMais127179to3745 >=0; var fMenos3745to159457 >=0; var fMais3745to159457 >=0; var fMenos159457to159456 >=0; var fMais159457to159456 >=0; var fMenos11244to158424 >=0; var fMais11244to158424 >=0; var fMenos3807to3808 >=0; var fMais3807to3808 >=0; var fMenos158424to11201 >=0; var fMais158424to11201 >=0; var fMenos11253to169647 >=0; var fMais11253to169647 >=0; var fMenos11254to11255 >=0; var fMais11254to11255 >=0; var fMenos11255to169646 >=0; var fMais11255to169646 >=0; var fMenos8402to8403 >=0; var fMais8402to8403 >=0; var fMenos8403to8404 >=0; var fMais8403to8404 >=0; var fMenos8404to8405 >=0; var fMais8404to8405 >=0; var fMenos8405to8406 >=0; var fMais8405to8406 >=0; var fMenos169646to11256 >=0; var fMais169646to11256 >=0; var fMenos11256to11262 >=0; var fMais11256to11262 >=0; var fMenos11262to169737 >=0; var fMais11262to169737 >=0; var fMenos169737to11263 >=0; var fMais169737to11263 >=0; var fMenos11263to169736 >=0; var fMais11263to169736 >=0; var fMenos169736to11264 >=0; var fMais169736to11264 >=0; var fMenos11264to11265 >=0; var fMais11264to11265 >=0; var fMenos11065to33339 >=0; var fMais11065to33339 >=0; var fMenos33339to11295 >=0; var fMais33339to11295 >=0; var fMenos11299to11300 >=0; var fMais11299to11300 >=0; var fMenos11300to11301 >=0; var fMais11300to11301 >=0; var fMenos11301to122084 >=0; var fMais11301to122084 >=0; var fMenos122084to11302 >=0; var fMais122084to11302 >=0; var fMenos11302to11303 >=0; var fMais11302to11303 >=0; var fMenos11303to127506 >=0; var fMais11303to127506 >=0; var fMenos127506to11304 >=0; var fMais127506to11304 >=0; var fMenos11304to11305 >=0; var fMais11304to11305 >=0; var fMenos11309to11310 >=0; var fMais11309to11310 >=0; var fMenos11317to11318 >=0; var fMais11317to11318 >=0; var fMenos11318to11319 >=0; var fMais11318to11319 >=0; var fMenos11319to11320 >=0; var fMais11319to11320 >=0; var fMenos11320to11321 >=0; var fMais11320to11321 >=0; var fMenos94076to171425 >=0; var fMais94076to171425 >=0; var fMenos171425to28818 >=0; var fMais171425to28818 >=0; var fMenos28818to94092 >=0; var fMais28818to94092 >=0; var fMenos8399to8400 >=0; var fMais8399to8400 >=0; var fMenos8400to8401 >=0; var fMais8400to8401 >=0; var fMenos11321to11322 >=0; var fMais11321to11322 >=0; var fMenos3808to3809 >=0; var fMais3808to3809 >=0; var fMenos79823to7139 >=0; var fMais79823to7139 >=0; var fMenos11322to11323 >=0; var fMais11322to11323 >=0; var fMenos8302to8304 >=0; var fMais8302to8304 >=0; var fMenos11323to11324 >=0; var fMais11323to11324 >=0; var fMenos8304to8303 >=0; var fMais8304to8303 >=0; var fMenos11324to169573 >=0; var fMais11324to169573 >=0; var fMenos3809to49621 >=0; var fMais3809to49621 >=0; var fMenos8303to13317 >=0; var fMais8303to13317 >=0; var fMenos8401to8537 >=0; var fMais8401to8537 >=0; var fMenos8537to8402 >=0; var fMais8537to8402 >=0; var fMenos169573to11325 >=0; var fMais169573to11325 >=0; var fMenos11325to11326 >=0; var fMais11325to11326 >=0; var fMenos166671to166673 >=0; var fMais166671to166673 >=0; var fMenos166673to2642 >=0; var fMais166673to2642 >=0; var fMenos2642to2641 >=0; var fMais2642to2641 >=0; var fMenos13317to138945 >=0; var fMais13317to138945 >=0; var fMenos25376to25367 >=0; var fMais25376to25367 >=0; var fMenos25367to8413 >=0; var fMais25367to8413 >=0; var fMenos13916to45696 >=0; var fMais13916to45696 >=0; var fMenos45696to130297 >=0; var fMais45696to130297 >=0; var fMenos130297to45687 >=0; var fMais130297to45687 >=0; var fMenos45687to45682 >=0; var fMais45687to45682 >=0; var fMenos45682to45688 >=0; var fMais45682to45688 >=0; var fMenos8413to8399 >=0; var fMais8413to8399 >=0; var fMenos4163to153753 >=0; var fMais4163to153753 >=0; var fMenos153753to8600 >=0; var fMais153753to8600 >=0; var fMenos11326to169568 >=0; var fMais11326to169568 >=0; var fMenos169568to11327 >=0; var fMais169568to11327 >=0; var fMenos123340to123334 >=0; var fMais123340to123334 >=0; var fMenos123334to18470 >=0; var fMais123334to18470 >=0; var fMenos18470to5314 >=0; var fMais18470to5314 >=0; var fMenos5314to18471 >=0; var fMais5314to18471 >=0; var fMenos8600to153742 >=0; var fMais8600to153742 >=0; var fMenos153742to153740 >=0; var fMais153742to153740 >=0; var fMenos153740to8601 >=0; var fMais153740to8601 >=0; var fMenos8601to153580 >=0; var fMais8601to153580 >=0; var fMenos153580to8602 >=0; var fMais153580to8602 >=0; var fMenos18471to5315 >=0; var fMais18471to5315 >=0; var fMenos5315to41116 >=0; var fMais5315to41116 >=0; var fMenos41116to7103 >=0; var fMais41116to7103 >=0; var fMenos7103to41115 >=0; var fMais7103to41115 >=0; var fMenos69205to1633 >=0; var fMais69205to1633 >=0; var fMenos1633to1632 >=0; var fMais1633to1632 >=0; var fMenos11325to169572 >=0; var fMais11325to169572 >=0; var fMenos169572to122163 >=0; var fMais169572to122163 >=0; var fMenos169571to11328 >=0; var fMais169571to11328 >=0; var fMenos41115to7104 >=0; var fMais41115to7104 >=0; var fMenos7104to7105 >=0; var fMais7104to7105 >=0; var fMenos45688to45693 >=0; var fMais45688to45693 >=0; var fMenos8486to8485 >=0; var fMais8486to8485 >=0; var fMenos7105to41122 >=0; var fMais7105to41122 >=0; var fMenos7109to41130 >=0; var fMais7109to41130 >=0; var fMenos41130to18694 >=0; var fMais41130to18694 >=0; var fMenos18694to18695 >=0; var fMais18694to18695 >=0; var fMenos8485to168904 >=0; var fMais8485to168904 >=0; var fMenos11379to97149 >=0; var fMais11379to97149 >=0; var fMenos97149to11380 >=0; var fMais97149to11380 >=0; var fMenos1912to11404 >=0; var fMais1912to11404 >=0; var fMenos11404to11405 >=0; var fMais11404to11405 >=0; var fMenos2641to2640 >=0; var fMais2641to2640 >=0; var fMenos11501to11500 >=0; var fMais11501to11500 >=0; var fMenos171269to5413 >=0; var fMais171269to5413 >=0; var fMenos45693to45690 >=0; var fMais45693to45690 >=0; var fMenos25296to11558 >=0; var fMais25296to11558 >=0; var fMenos2640to150217 >=0; var fMais2640to150217 >=0; var fMenos168904to8484 >=0; var fMais168904to8484 >=0; var fMenos45690to45694 >=0; var fMais45690to45694 >=0;

#Funcao objetivo:
minimize z: (fMais8616to8617 + fMenos8616to8617) + (fMais45694to135255 + fMenos45694to135255) + (fMais7142to160021 + fMenos7142to160021) + (fMais135255to3837 + fMenos135255to3837) + (fMais146909to8621 + fMenos146909to8621) + (fMais8621to8622 + fMenos8621to8622) + (fMais8622to27426 + fMenos8622to27426) + (fMais160021to160020 + fMenos160021to160020) + (fMais160020to7316 + fMenos160020to7316) + (fMais7316to160018 + fMenos7316to160018) + (fMais27426to146907 + fMenos27426to146907) + (fMais146907to8623 + fMenos146907to8623) + (fMais160018to7317 + fMenos160018to7317) + (fMais7317to160012 + fMenos7317to160012) + (fMais160012to160009 + fMenos160012to160009) + (fMais160009to160007 + fMenos160009to160007) + (fMais160007to7318 + fMenos160007to7318) + (fMais7318to160004 + fMenos7318to160004) + (fMais8684to122806 + fMenos8684to122806) + (fMais3837to140136 + fMenos3837to140136) + (fMais140136to126927 + fMenos140136to126927) + (fMais160004to160003 + fMenos160004to160003) + (fMais160003to7319 + fMenos160003to7319) + (fMais3850to3851 + fMenos3850to3851) + (fMais2892to2901 + fMenos2892to2901) + (fMais2901to2902 + fMenos2901to2902) + (fMais2902to2903 + fMenos2902to2903) + (fMais7319to160005 + fMenos7319to160005) + (fMais160005to160006 + fMenos160005to160006) + (fMais160006to7320 + fMenos160006to7320) + (fMais7320to160011 + fMenos7320to160011) + (fMais160011to160013 + fMenos160011to160013) + (fMais160013to7321 + fMenos160013to7321) + (fMais7321to160019 + fMenos7321to160019) + (fMais3851to129773 + fMenos3851to129773) + (fMais129773to3852 + fMenos129773to3852) + (fMais160019to7322 + fMenos160019to7322) + (fMais122806to9073 + fMenos122806to9073) + (fMais2662to2663 + fMenos2662to2663) + (fMais2663to2664 + fMenos2663to2664) + (fMais8905to8948 + fMenos8905to8948) + (fMais7388to7389 + fMenos7388to7389) + (fMais7389to7390 + fMenos7389to7390) + (fMais7390to7391 + fMenos7390to7391) + (fMais7391to7392 + fMenos7391to7392) + (fMais1321to124772 + fMenos1321to124772) + (fMais7392to7393 + fMenos7392to7393) + (fMais3852to3846 + fMenos3852to3846) + (fMais7393to7394 + fMenos7393to7394) + (fMais7394to7395 + fMenos7394to7395) + (fMais8892to122757 + fMenos8892to122757) + (fMais7395to7563 + fMenos7395to7563) + (fMais7229to7230 + fMenos7229to7230) + (fMais7230to7231 + fMenos7230to7231) + (fMais3846to3847 + fMenos3846to3847) + (fMais3847to3848 + fMenos3847to3848) + (fMais3848to3849 + fMenos3848to3849) + (fMais122757to8928 + fMenos122757to8928) + (fMais8928to122751 + fMenos8928to122751) + (fMais7231to7232 + fMenos7231to7232) + (fMais2039to120710 + fMenos2039to120710) + (fMais7232to7233 + fMenos7232to7233) + (fMais7233to7234 + fMenos7233to7234) + (fMais122751to8929 + fMenos122751to8929) + (fMais8929to8930 + fMenos8929to8930) + (fMais8937to8938 + fMenos8937to8938) + (fMais7234to7235 + fMenos7234to7235) + (fMais120710to2040 + fMenos120710to2040) + (fMais2040to2041 + fMenos2040to2041) + (fMais8938to8939 + fMenos8938to8939) + (fMais8939to8940 + fMenos8939to8940) + (fMais3857to3856 + fMenos3857to3856) + (fMais8948to118872 + fMenos8948to118872) + (fMais118872to8949 + fMenos118872to8949) + (fMais8949to118870 + fMenos8949to118870) + (fMais118870to8836 + fMenos118870to8836) + (fMais3857to3858 + fMenos3857to3858) + (fMais3858to3857 + fMenos3858to3857) + (fMais7235to7236 + fMenos7235to7236) + (fMais3859to3858 + fMenos3859to3858) + (fMais3836to3859 + fMenos3836to3859) + (fMais3860to853 + fMenos3860to853) + (fMais3861to3860 + fMenos3861to3860) + (fMais8836to8937 + fMenos8836to8937) + (fMais9067to8963 + fMenos9067to8963) + (fMais9016to9062 + fMenos9016to9062) + (fMais9062to9063 + fMenos9062to9063) + (fMais7236to7237 + fMenos7236to7237) + (fMais7237to7238 + fMenos7237to7238) + (fMais7238to7239 + fMenos7238to7239) + (fMais9063to141758 + fMenos9063to141758) + (fMais7239to7240 + fMenos7239to7240) + (fMais141758to9064 + fMenos141758to9064) + (fMais7240to7241 + fMenos7240to7241) + (fMais3861to3857 + fMenos3861to3857) + (fMais9064to141759 + fMenos9064to141759) + (fMais7241to7242 + fMenos7241to7242) + (fMais141759to9065 + fMenos141759to9065) + (fMais7242to7243 + fMenos7242to7243) + (fMais7243to7244 + fMenos7243to7244) + (fMais1351to11060 + fMenos1351to11060) + (fMais3402to143395 + fMenos3402to143395) + (fMais7244to7245 + fMenos7244to7245) + (fMais9065to141760 + fMenos9065to141760) + (fMais141760to9066 + fMenos141760to9066) + (fMais9066to9067 + fMenos9066to9067) + (fMais9132to9115 + fMenos9132to9115) + (fMais144255to9130 + fMenos144255to9130) + (fMais9130to43195 + fMenos9130to43195) + (fMais143395to143392 + fMenos143395to143392) + (fMais143392to3395 + fMenos143392to3395) + (fMais7245to7246 + fMenos7245to7246) + (fMais7246to7247 + fMenos7246to7247) + (fMais7247to7248 + fMenos7247to7248) + (fMais43195to9131 + fMenos43195to9131) + (fMais9131to43198 + fMenos9131to43198) + (fMais43198to9132 + fMenos43198to9132) + (fMais9126to43214 + fMenos9126to43214) + (fMais4101to29501 + fMenos4101to29501) + (fMais9312to9288 + fMenos9312to9288) + (fMais153432to153430 + fMenos153432to153430) + (fMais153430to286 + fMenos153430to286) + (fMais286to153427 + fMenos286to153427) + (fMais153427to153425 + fMenos153427to153425) + (fMais153425to153424 + fMenos153425to153424) + (fMais153424to287 + fMenos153424to287) + (fMais287to288 + fMenos287to288) + (fMais9288to143030 + fMenos9288to143030) + (fMais143030to9289 + fMenos143030to9289) + (fMais9311to9312 + fMenos9311to9312) + (fMais89098to143029 + fMenos89098to143029) + (fMais143029to9313 + fMenos143029to9313) + (fMais517to4959 + fMenos517to4959) + (fMais4959to519 + fMenos4959to519) + (fMais519to521 + fMenos519to521) + (fMais521to143453 + fMenos521to143453) + (fMais143453to531 + fMenos143453to531) + (fMais531to143454 + fMenos531to143454) + (fMais9313to9314 + fMenos9313to9314) + (fMais9314to143028 + fMenos9314to143028) + (fMais725to153490 + fMenos725to153490) + (fMais153490to2012 + fMenos153490to2012) + (fMais2012to153486 + fMenos2012to153486) + (fMais153486to153484 + fMenos153486to153484) + (fMais153484to153481 + fMenos153484to153481) + (fMais153481to583 + fMenos153481to583) + (fMais583to153477 + fMenos583to153477) + (fMais153477to2013 + fMenos153477to2013) + (fMais2013to153473 + fMenos2013to153473) + (fMais153473to582 + fMenos153473to582) + (fMais582to153471 + fMenos582to153471) + (fMais153471to2014 + fMenos153471to2014) + (fMais143028to9302 + fMenos143028to9302) + (fMais3395to3403 + fMenos3395to3403) + (fMais9302to9303 + fMenos9302to9303) + (fMais7248to4134 + fMenos7248to4134) + (fMais7647to7646 + fMenos7647to7646) + (fMais133218to7647 + fMenos133218to7647) + (fMais7648to133218 + fMenos7648to133218) + (fMais133235to7648 + fMenos133235to7648) + (fMais9303to143027 + fMenos9303to143027) + (fMais3408to3397 + fMenos3408to3397) + (fMais3397to3409 + fMenos3397to3409) + (fMais3409to143383 + fMenos3409to143383) + (fMais143383to3410 + fMenos143383to3410) + (fMais3401to165585 + fMenos3401to165585) + (fMais165585to3402 + fMenos165585to3402) + (fMais29474to133235 + fMenos29474to133235) + (fMais7719to7794 + fMenos7719to7794) + (fMais127724to7719 + fMenos127724to7719) + (fMais143027to89079 + fMenos143027to89079) + (fMais89079to9304 + fMenos89079to9304) + (fMais49702to7720 + fMenos49702to7720) + (fMais7720to122530 + fMenos7720to122530) + (fMais122530to116714 + fMenos122530to116714) + (fMais116714to49638 + fMenos116714to49638) + (fMais49638to7725 + fMenos49638to7725) + (fMais8930to9334 + fMenos8930to9334) + (fMais9334to9335 + fMenos9334to9335) + (fMais9335to9336 + fMenos9335to9336) + (fMais9336to119460 + fMenos9336to119460) + (fMais119460to119462 + fMenos119460to119462) + (fMais119462to9337 + fMenos119462to9337) + (fMais9337to9338 + fMenos9337to9338) + (fMais9338to9339 + fMenos9338to9339) + (fMais153498to153502 + fMenos153498to153502) + (fMais153502to153505 + fMenos153502to153505) + (fMais153505to593 + fMenos153505to593) + (fMais593to153508 + fMenos593to153508) + (fMais153508to594 + fMenos153508to594) + (fMais594to679 + fMenos594to679) + (fMais138091to138092 + fMenos138091to138092) + (fMais138092to138185 + fMenos138092to138185) + (fMais138185to776 + fMenos138185to776) + (fMais9339to9340 + fMenos9339to9340) + (fMais2947to2948 + fMenos2947to2948) + (fMais7794to122538 + fMenos7794to122538) + (fMais4975to4982 + fMenos4975to4982) + (fMais4982to4983 + fMenos4982to4983) + (fMais9340to9341 + fMenos9340to9341) + (fMais122538to7798 + fMenos122538to7798) + (fMais7798to937 + fMenos7798to937) + (fMais9341to9342 + fMenos9341to9342) + (fMais9342to9343 + fMenos9342to9343) + (fMais9343to9344 + fMenos9343to9344) + (fMais9344to9318 + fMenos9344to9318) + (fMais7795to49672 + fMenos7795to49672) + (fMais133215to7795 + fMenos133215to7795) + (fMais7801to133215 + fMenos7801to133215) + (fMais7784to7801 + fMenos7784to7801) + (fMais127731to7784 + fMenos127731to7784) + (fMais9349to9348 + fMenos9349to9348) + (fMais9348to9347 + fMenos9348to9347) + (fMais9323to9354 + fMenos9323to9354) + (fMais9354to142181 + fMenos9354to142181) + (fMais142181to9355 + fMenos142181to9355) + (fMais9355to142183 + fMenos9355to142183) + (fMais131008to131004 + fMenos131008to131004) + (fMais131004to131006 + fMenos131004to131006) + (fMais131006to131003 + fMenos131006to131003) + (fMais131003to9370 + fMenos131003to9370) + (fMais9370to131000 + fMenos9370to131000) + (fMais9637to9624 + fMenos9637to9624) + (fMais9624to170743 + fMenos9624to170743) + (fMais170743to9641 + fMenos170743to9641) + (fMais127730to127731 + fMenos127730to127731) + (fMais7816to158788 + fMenos7816to158788) + (fMais146288to146287 + fMenos146288to146287) + (fMais9641to9632 + fMenos9641to9632) + (fMais146287to146286 + fMenos146287to146286) + (fMais9632to9631 + fMenos9632to9631) + (fMais160343to143520 + fMenos160343to143520) + (fMais143520to49698 + fMenos143520to49698) + (fMais122940to143636 + fMenos122940to143636) + (fMais2993to2994 + fMenos2993to2994) + (fMais49698to49703 + fMenos49698to49703) + (fMais143636to5161 + fMenos143636to5161) + (fMais5161to5162 + fMenos5161to5162) + (fMais314to318 + fMenos314to318) + (fMais9631to9630 + fMenos9631to9630) + (fMais9630to9629 + fMenos9630to9629) + (fMais5162to5163 + fMenos5162to5163) + (fMais5163to5164 + fMenos5163to5164) + (fMais19627to19626 + fMenos19627to19626) + (fMais19626to19625 + fMenos19626to19625) + (fMais19625to19624 + fMenos19625to19624) + (fMais19624to43716 + fMenos19624to43716) + (fMais9629to9642 + fMenos9629to9642) + (fMais5164to5165 + fMenos5164to5165) + (fMais5165to5166 + fMenos5165to5166) + (fMais9642to144205 + fMenos9642to144205) + (fMais5166to5167 + fMenos5166to5167) + (fMais49703to49619 + fMenos49703to49619) + (fMais5167to5168 + fMenos5167to5168) + (fMais5168to5169 + fMenos5168to5169) + (fMais5169to5170 + fMenos5169to5170) + (fMais49619to49724 + fMenos49619to49724) + (fMais2292to9798 + fMenos2292to9798) + (fMais9799to168401 + fMenos9799to168401) + (fMais49724to49665 + fMenos49724to49665) + (fMais5170to5171 + fMenos5170to5171) + (fMais168401to9800 + fMenos168401to9800) + (fMais5171to4659 + fMenos5171to4659) + (fMais5307to163392 + fMenos5307to163392) + (fMais163392to5306 + fMenos163392to5306) + (fMais49665to124922 + fMenos49665to124922) + (fMais124922to146150 + fMenos124922to146150) + (fMais146150to125364 + fMenos146150to125364) + (fMais5306to5305 + fMenos5306to5305) + (fMais135077to69925 + fMenos135077to69925) + (fMais5312to40323 + fMenos5312to40323) + (fMais9826to9827 + fMenos9826to9827) + (fMais9843to9831 + fMenos9843to9831) + (fMais9831to9832 + fMenos9831to9832) + (fMais9835to9843 + fMenos9835to9843) + (fMais9832to9844 + fMenos9832to9844) + (fMais125364to49637 + fMenos125364to49637) + (fMais9844to9845 + fMenos9844to9845) + (fMais40323to163393 + fMenos40323to163393) + (fMais163393to5311 + fMenos163393to5311) + (fMais3514to9873 + fMenos3514to9873) + (fMais49637to49633 + fMenos49637to49633) + (fMais49633to10298 + fMenos49633to10298) + (fMais5311to40324 + fMenos5311to40324) + (fMais40324to5310 + fMenos40324to5310) + (fMais9873to9874 + fMenos9873to9874) + (fMais7836to7853 + fMenos7836to7853) + (fMais142501to142498 + fMenos142501to142498) + (fMais142498to142500 + fMenos142498to142500) + (fMais142500to142499 + fMenos142500to142499) + (fMais142499to142502 + fMenos142499to142502) + (fMais142502to142659 + fMenos142502to142659) + (fMais142659to3065 + fMenos142659to3065) + (fMais3065to355 + fMenos3065to355) + (fMais355to148339 + fMenos355to148339) + (fMais148339to142658 + fMenos148339to142658) + (fMais142658to152918 + fMenos142658to152918) + (fMais9874to9875 + fMenos9874to9875) + (fMais5310to163394 + fMenos5310to163394) + (fMais152707to152745 + fMenos152707to152745) + (fMais163394to40336 + fMenos163394to40336) + (fMais9875to9876 + fMenos9875to9876) + (fMais9876to9877 + fMenos9876to9877) + (fMais9877to9878 + fMenos9877to9878) + (fMais9878to9879 + fMenos9878to9879) + (fMais9879to9880 + fMenos9879to9880) + (fMais9880to9881 + fMenos9880to9881) + (fMais9881to9882 + fMenos9881to9882) + (fMais8963to9887 + fMenos8963to9887) + (fMais9887to9888 + fMenos9887to9888) + (fMais152745to152673 + fMenos152745to152673) + (fMais25121to46745 + fMenos25121to46745) + (fMais46745to46784 + fMenos46745to46784) + (fMais46784to46785 + fMenos46784to46785) + (fMais46785to132336 + fMenos46785to132336) + (fMais132336to132326 + fMenos132336to132326) + (fMais132326to46760 + fMenos132326to46760) + (fMais46760to46740 + fMenos46760to46740) + (fMais46740to131182 + fMenos46740to131182) + (fMais9888to9889 + fMenos9888to9889) + (fMais9889to9890 + fMenos9889to9890) + (fMais152673to152580 + fMenos152673to152580) + (fMais131182to46778 + fMenos131182to46778) + (fMais9890to9891 + fMenos9890to9891) + (fMais9891to9892 + fMenos9891to9892) + (fMais9892to9893 + fMenos9892to9893) + (fMais40336to5309 + fMenos40336to5309) + (fMais46778to46761 + fMenos46778to46761) + (fMais46761to46729 + fMenos46761to46729) + (fMais8679to163189 + fMenos8679to163189) + (fMais163189to8683 + fMenos163189to8683) + (fMais8683to163188 + fMenos8683to163188) + (fMais163188to8710 + fMenos163188to8710) + (fMais152580to152829 + fMenos152580to152829) + (fMais8710to144315 + fMenos8710to144315) + (fMais9911to8684 + fMenos9911to8684) + (fMais8520to8507 + fMenos8520to8507) + (fMais10265to10274 + fMenos10265to10274) + (fMais10274to10273 + fMenos10274to10273) + (fMais5309to40330 + fMenos5309to40330) + (fMais46729to46739 + fMenos46729to46739) + (fMais46739to46728 + fMenos46739to46728) + (fMais10273to146228 + fMenos10273to146228) + (fMais131048to7909 + fMenos131048to7909) + (fMais2706to162843 + fMenos2706to162843) + (fMais162843to2696 + fMenos162843to2696) + (fMais7909to152808 + fMenos7909to152808) + (fMais48955to119668 + fMenos48955to119668) + (fMais119668to29343 + fMenos119668to29343) + (fMais152808to152564 + fMenos152808to152564) + (fMais46728to46757 + fMenos46728to46757) + (fMais152564to152676 + fMenos152564to152676) + (fMais46757to46774 + fMenos46757to46774) + (fMais163391to40321 + fMenos163391to40321) + (fMais152676to152814 + fMenos152676to152814) + (fMais40321to5308 + fMenos40321to5308) + (fMais5308to40322 + fMenos5308to40322) + (fMais40322to5307 + fMenos40322to5307) + (fMais46774to3176 + fMenos46774to3176) + (fMais3176to132204 + fMenos3176to132204) + (fMais132204to46720 + fMenos132204to46720) + (fMais46720to3177 + fMenos46720to3177) + (fMais152814to152565 + fMenos152814to152565) + (fMais10261to146242 + fMenos10261to146242) + (fMais5371to29320 + fMenos5371to29320) + (fMais146242to146239 + fMenos146242to146239) + (fMais146239to104998 + fMenos146239to104998) + (fMais104998to159882 + fMenos104998to159882) + (fMais10257to146240 + fMenos10257to146240) + (fMais146240to10261 + fMenos146240to10261) + (fMais14171to7690 + fMenos14171to7690) + (fMais7690to14178 + fMenos7690to14178) + (fMais10282to126717 + fMenos10282to126717) + (fMais126717to10279 + fMenos126717to10279) + (fMais152565to152740 + fMenos152565to152740) + (fMais152740to152607 + fMenos152740to152607) + (fMais152607to152786 + fMenos152607to152786) + (fMais10279to129851 + fMenos10279to129851) + (fMais152786to152557 + fMenos152786to152557) + (fMais129851to10283 + fMenos129851to10283) + (fMais3595to119757 + fMenos3595to119757) + (fMais119757to1280 + fMenos119757to1280) + (fMais1280to119752 + fMenos1280to119752) + (fMais119752to119750 + fMenos119752to119750) + (fMais119750to1560 + fMenos119750to1560) + (fMais1560to1281 + fMenos1560to1281) + (fMais1281to1286 + fMenos1281to1286) + (fMais1286to132810 + fMenos1286to132810) + (fMais132810to132813 + fMenos132810to132813) + (fMais10283to129847 + fMenos10283to129847) + (fMais129847to10280 + fMenos129847to10280) + (fMais10280to129841 + fMenos10280to129841) + (fMais129841to10281 + fMenos129841to10281) + (fMais10281to129823 + fMenos10281to129823) + (fMais122457to10291 + fMenos122457to10291) + (fMais10292to10284 + fMenos10292to10284) + (fMais152557to152780 + fMenos152557to152780) + (fMais152780to152739 + fMenos152780to152739) + (fMais152739to152641 + fMenos152739to152641) + (fMais152641to152696 + fMenos152641to152696) + (fMais152696to7943 + fMenos152696to7943) + (fMais7943to7938 + fMenos7943to7938) + (fMais122474to10292 + fMenos122474to10292) + (fMais3177to3178 + fMenos3177to3178) + (fMais10285to122474 + fMenos10285to122474) + (fMais5378to5379 + fMenos5378to5379) + (fMais10286to10285 + fMenos10286to10285) + (fMais152740to152843 + fMenos152740to152843) + (fMais152693to152672 + fMenos152693to152672) + (fMais152672to152667 + fMenos152672to152667) + (fMais152667to152618 + fMenos152667to152618) + (fMais152618to152669 + fMenos152618to152669) + (fMais152669to152611 + fMenos152669to152611) + (fMais152611to152838 + fMenos152611to152838) + (fMais5379to5380 + fMenos5379to5380) + (fMais5380to5381 + fMenos5380to5381) + (fMais5381to5382 + fMenos5381to5382) + (fMais5382to5383 + fMenos5382to5383) + (fMais170885to5417 + fMenos170885to5417) + (fMais170884to170885 + fMenos170884to170885) + (fMais43547to170884 + fMenos43547to170884) + (fMais152838to152722 + fMenos152838to152722) + (fMais126234to7757 + fMenos126234to7757) + (fMais7757to137198 + fMenos7757to137198) + (fMais170883to43547 + fMenos170883to43547) + (fMais43548to170883 + fMenos43548to170883) + (fMais5418to43548 + fMenos5418to43548) + (fMais152722to152634 + fMenos152722to152634) + (fMais10298to49644 + fMenos10298to49644) + (fMais120772to47746 + fMenos120772to47746) + (fMais49644to18509 + fMenos49644to18509) + (fMais165244to120772 + fMenos165244to120772) + (fMais18509to10299 + fMenos18509to10299) + (fMais152634to152837 + fMenos152634to152837) + (fMais10299to10297 + fMenos10299to10297) + (fMais72963to69200 + fMenos72963to69200) + (fMais146310to10308 + fMenos146310to10308) + (fMais170529to10431 + fMenos170529to10431) + (fMais10431to170517 + fMenos10431to170517) + (fMais170517to10426 + fMenos170517to10426) + (fMais2999to165244 + fMenos2999to165244) + (fMais10426to14601 + fMenos10426to14601) + (fMais6073to97137 + fMenos6073to97137) + (fMais97137to6074 + fMenos97137to6074) + (fMais6074to97138 + fMenos6074to97138) + (fMais97138to6075 + fMenos97138to6075) + (fMais6075to6076 + fMenos6075to6076) + (fMais6076to97160 + fMenos6076to97160) + (fMais97160to6077 + fMenos97160to6077) + (fMais152837to152654 + fMenos152837to152654) + (fMais6077to97200 + fMenos6077to97200) + (fMais10427to10428 + fMenos10427to10428) + (fMais1396to1395 + fMenos1396to1395) + (fMais14544to146571 + fMenos14544to146571) + (fMais1397to1396 + fMenos1397to1396) + (fMais138074to14544 + fMenos138074to14544) + (fMais10452to10453 + fMenos10452to10453) + (fMais10453to10454 + fMenos10453to10454) + (fMais10454to10273 + fMenos10454to10273) + (fMais146223to146225 + fMenos146223to146225) + (fMais146225to146226 + fMenos146225to146226) + (fMais138930to11828 + fMenos138930to11828) + (fMais152654to152663 + fMenos152654to152663) + (fMais97200to6078 + fMenos97200to6078) + (fMais6085to6086 + fMenos6085to6086) + (fMais152663to152598 + fMenos152663to152598) + (fMais152598to7955 + fMenos152598to7955) + (fMais7955to75582 + fMenos7955to75582) + (fMais6086to6087 + fMenos6086to6087) + (fMais6087to6088 + fMenos6087to6088) + (fMais69139to10692 + fMenos69139to10692) + (fMais7226to7962 + fMenos7226to7962) + (fMais14602to10430 + fMenos14602to10430) + (fMais3659to170033 + fMenos3659to170033) + (fMais167518to14597 + fMenos167518to14597) + (fMais170033to3658 + fMenos170033to3658) + (fMais2560to145782 + fMenos2560to145782) + (fMais145782to129315 + fMenos145782to129315) + (fMais14597to167516 + fMenos14597to167516) + (fMais129315to145781 + fMenos129315to145781) + (fMais167516to10510 + fMenos167516to10510) + (fMais10510to10509 + fMenos10510to10509) + (fMais10509to10605 + fMenos10509to10605) + (fMais10605to121182 + fMenos10605to121182) + (fMais121182to123870 + fMenos121182to123870) + (fMais3680to13804 + fMenos3680to13804) + (fMais123870to5420 + fMenos123870to5420) + (fMais5420to5421 + fMenos5420to5421) + (fMais5421to164952 + fMenos5421to164952) + (fMais164952to15565 + fMenos164952to15565) + (fMais121291to165835 + fMenos121291to165835) + (fMais6088to6089 + fMenos6088to6089) + (fMais165835to124221 + fMenos165835to124221) + (fMais6089to6090 + fMenos6089to6090) + (fMais124221to1793 + fMenos124221to1793) + (fMais10508to10601 + fMenos10508to10601) + (fMais10526to150806 + fMenos10526to150806) + (fMais150806to29292 + fMenos150806to29292) + (fMais13374to13375 + fMenos13374to13375) + (fMais13375to13376 + fMenos13375to13376) + (fMais7970to7983 + fMenos7970to7983) + (fMais13376to13377 + fMenos13376to13377) + (fMais7983to7971 + fMenos7983to7971) + (fMais13377to13378 + fMenos13377to13378) + (fMais8055to8057 + fMenos8055to8057) + (fMais8057to8052 + fMenos8057to8052) + (fMais8052to8056 + fMenos8052to8056) + (fMais10269to104976 + fMenos10269to104976) + (fMais8056to8053 + fMenos8056to8053) + (fMais13378to10528 + fMenos13378to10528) + (fMais10528to10530 + fMenos10528to10530) + (fMais130720to8251 + fMenos130720to8251) + (fMais104976to138262 + fMenos104976to138262) + (fMais8251to17585 + fMenos8251to17585) + (fMais17585to8252 + fMenos17585to8252) + (fMais10530to10554 + fMenos10530to10554) + (fMais10532to10554 + fMenos10532to10554) + (fMais10529to10532 + fMenos10529to10532) + (fMais10556to10536 + fMenos10556to10536) + (fMais10536to10538 + fMenos10536to10538) + (fMais10538to10544 + fMenos10538to10544) + (fMais10544to10551 + fMenos10544to10551) + (fMais3693to148277 + fMenos3693to148277) + (fMais10551to10550 + fMenos10551to10550) + (fMais132024to132023 + fMenos132024to132023) + (fMais132023to132021 + fMenos132023to132021) + (fMais132021to132022 + fMenos132021to132022) + (fMais120901to10543 + fMenos120901to10543) + (fMais49498to8258 + fMenos49498to8258) + (fMais11889to120901 + fMenos11889to120901) + (fMais2726to2727 + fMenos2726to2727) + (fMais3100to3018 + fMenos3100to3018) + (fMais3695to8252 + fMenos3695to8252) + (fMais69048to11889 + fMenos69048to11889) + (fMais69048to10537 + fMenos69048to10537) + (fMais10537to10539 + fMenos10537to10539) + (fMais8275to8276 + fMenos8275to8276) + (fMais10539to120914 + fMenos10539to120914) + (fMais8276to8277 + fMenos8276to8277) + (fMais8277to137974 + fMenos8277to137974) + (fMais137974to8278 + fMenos137974to8278) + (fMais8278to17533 + fMenos8278to17533) + (fMais14047to14099 + fMenos14047to14099) + (fMais120914to120911 + fMenos120914to120911) + (fMais120911to10542 + fMenos120911to10542) + (fMais8329to14348 + fMenos8329to14348) + (fMais10542to10526 + fMenos10542to10526) + (fMais10554to124242 + fMenos10554to124242) + (fMais124242to10555 + fMenos124242to10555) + (fMais10555to10556 + fMenos10555to10556) + (fMais93333to2159 + fMenos93333to2159) + (fMais93277to6142 + fMenos93277to6142) + (fMais26356to167512 + fMenos26356to167512) + (fMais3718to3622 + fMenos3718to3622) + (fMais2727to2728 + fMenos2727to2728) + (fMais162854to162855 + fMenos162854to162855) + (fMais166609to166611 + fMenos166609to166611) + (fMais166611to1430 + fMenos166611to1430) + (fMais1430to166616 + fMenos1430to166616) + (fMais166616to1429 + fMenos166616to1429) + (fMais1429to166619 + fMenos1429to166619) + (fMais166619to1428 + fMenos166619to1428) + (fMais1428to166622 + fMenos1428to166622) + (fMais166622to1427 + fMenos166622to1427) + (fMais1427to166626 + fMenos1427to166626) + (fMais167512to26358 + fMenos167512to26358) + (fMais26358to26348 + fMenos26358to26348) + (fMais26348to26355 + fMenos26348to26355) + (fMais26355to170515 + fMenos26355to170515) + (fMais10578to10576 + fMenos10578to10576) + (fMais10576to10577 + fMenos10576to10577) + (fMais10578to10583 + fMenos10578to10583) + (fMais10583to10575 + fMenos10583to10575) + (fMais1463to166664 + fMenos1463to166664) + (fMais166664to1462 + fMenos166664to1462) + (fMais1462to166660 + fMenos1462to166660) + (fMais166660to527 + fMenos166660to527) + (fMais527to1461 + fMenos527to1461) + (fMais1461to528 + fMenos1461to528) + (fMais162918to1465 + fMenos162918to1465) + (fMais10591to10592 + fMenos10591to10592) + (fMais10588to69138 + fMenos10588to69138) + (fMais121114to10601 + fMenos121114to10601) + (fMais69177to49544 + fMenos69177to49544) + (fMais49544to10612 + fMenos49544to10612) + (fMais10613to10608 + fMenos10613to10608) + (fMais10608to10609 + fMenos10608to10609) + (fMais10613to49541 + fMenos10613to49541) + (fMais14200to8326 + fMenos14200to8326) + (fMais49541to10617 + fMenos49541to10617) + (fMais8324to8325 + fMenos8324to8325) + (fMais8318to14259 + fMenos8318to14259) + (fMais14259to27421 + fMenos14259to27421) + (fMais14352to14540 + fMenos14352to14540) + (fMais14540to41074 + fMenos14540to41074) + (fMais41074to144983 + fMenos41074to144983) + (fMais144983to8324 + fMenos144983to8324) + (fMais8325to8334 + fMenos8325to8334) + (fMais144043to8388 + fMenos144043to8388) + (fMais8388to8387 + fMenos8388to8387) + (fMais8387to160953 + fMenos8387to160953) + (fMais132917to6956 + fMenos132917to6956) + (fMais160953to8386 + fMenos160953to8386) + (fMais3725to147979 + fMenos3725to147979) + (fMais162855to2732 + fMenos162855to2732) + (fMais147979to147976 + fMenos147979to147976) + (fMais2732to162856 + fMenos2732to162856) + (fMais6956to6957 + fMenos6956to6957) + (fMais162856to2733 + fMenos162856to2733) + (fMais6957to6958 + fMenos6957to6958) + (fMais2733to162857 + fMenos2733to162857) + (fMais6958to123764 + fMenos6958to123764) + (fMais162857to2734 + fMenos162857to2734) + (fMais147976to147974 + fMenos147976to147974) + (fMais8386to161698 + fMenos8386to161698) + (fMais161698to8385 + fMenos161698to8385) + (fMais123764to123757 + fMenos123764to123757) + (fMais123757to123758 + fMenos123757to123758) + (fMais10617to10618 + fMenos10617to10618) + (fMais147974to111242 + fMenos147974to111242) + (fMais8385to161695 + fMenos8385to161695) + (fMais161695to81843 + fMenos161695to81843) + (fMais2784to2783 + fMenos2784to2783) + (fMais132836to132837 + fMenos132836to132837) + (fMais132837to147960 + fMenos132837to147960) + (fMais147960to95076 + fMenos147960to95076) + (fMais127028to2784 + fMenos127028to2784) + (fMais2734to162858 + fMenos2734to162858) + (fMais162858to162859 + fMenos162858to162859) + (fMais95076to3724 + fMenos95076to3724) + (fMais13013to10648 + fMenos13013to10648) + (fMais3724to128994 + fMenos3724to128994) + (fMais128994to147961 + fMenos128994to147961) + (fMais10648to10649 + fMenos10648to10649) + (fMais123758to123730 + fMenos123758to123730) + (fMais123730to123745 + fMenos123730to123745) + (fMais123745to123759 + fMenos123745to123759) + (fMais10649to10650 + fMenos10649to10650) + (fMais10650to10651 + fMenos10650to10651) + (fMais10651to10652 + fMenos10651to10652) + (fMais10652to10653 + fMenos10652to10653) + (fMais10653to10654 + fMenos10653to10654) + (fMais81843to161696 + fMenos81843to161696) + (fMais161696to8384 + fMenos161696to8384) + (fMais8384to161035 + fMenos8384to161035) + (fMais134742to134741 + fMenos134742to134741) + (fMais134740to10661 + fMenos134740to10661) + (fMais10675to13013 + fMenos10675to13013) + (fMais1518to169425 + fMenos1518to169425) + (fMais169425to1516 + fMenos169425to1516) + (fMais12173to13018 + fMenos12173to13018) + (fMais123759to123738 + fMenos123759to123738) + (fMais10701to13017 + fMenos10701to13017) + (fMais3658to150740 + fMenos3658to150740) + (fMais150740to129437 + fMenos150740to129437) + (fMais10707to10703 + fMenos10707to10703) + (fMais161035to161034 + fMenos161035to161034) + (fMais10713to150695 + fMenos10713to150695) + (fMais150695to10712 + fMenos150695to10712) + (fMais10720to10722 + fMenos10720to10722) + (fMais10722to10719 + fMenos10722to10719) + (fMais8444to43125 + fMenos8444to43125) + (fMais123738to123736 + fMenos123738to123736) + (fMais123736to123741 + fMenos123736to123741) + (fMais43125to8446 + fMenos43125to8446) + (fMais8446to43137 + fMenos8446to43137) + (fMais43137to8443 + fMenos43137to8443) + (fMais151939to151831 + fMenos151939to151831) + (fMais151831to151940 + fMenos151831to151940) + (fMais151940to151894 + fMenos151940to151894) + (fMais151894to151945 + fMenos151894to151945) + (fMais151945to151943 + fMenos151945to151943) + (fMais151943to151823 + fMenos151943to151823) + (fMais10719to50738 + fMenos10719to50738) + (fMais50738to10710 + fMenos50738to10710) + (fMais10710to19777 + fMenos10710to19777) + (fMais151823to151861 + fMenos151823to151861) + (fMais19777to10711 + fMenos19777to10711) + (fMais10711to13034 + fMenos10711to13034) + (fMais10730to47129 + fMenos10730to47129) + (fMais2268to128677 + fMenos2268to128677) + (fMais1519to1538 + fMenos1519to1538) + (fMais47129to10730 + fMenos47129to10730) + (fMais47129to10772 + fMenos47129to10772) + (fMais109516to123924 + fMenos109516to123924) + (fMais10806to1549 + fMenos10806to1549) + (fMais1549to10784 + fMenos1549to10784) + (fMais1581to1582 + fMenos1581to1582) + (fMais1583to1300 + fMenos1583to1300) + (fMais151861to151841 + fMenos151861to151841) + (fMais151841to151912 + fMenos151841to151912) + (fMais151912to151950 + fMenos151912to151950) + (fMais123741to123754 + fMenos123741to123754) + (fMais123754to123752 + fMenos123754to123752) + (fMais151950to151888 + fMenos151950to151888) + (fMais151888to151890 + fMenos151888to151890) + (fMais123924to123923 + fMenos123924to123923) + (fMais123923to10752 + fMenos123923to10752) + (fMais10752to10753 + fMenos10752to10753) + (fMais10753to169437 + fMenos10753to169437) + (fMais10772to2261 + fMenos10772to2261) + (fMais10777to124010 + fMenos10777to124010) + (fMais124010to2260 + fMenos124010to2260) + (fMais2260to160314 + fMenos2260to160314) + (fMais160314to47118 + fMenos160314to47118) + (fMais162859to162860 + fMenos162859to162860) + (fMais123752to123746 + fMenos123752to123746) + (fMais2161to6965 + fMenos2161to6965) + (fMais6965to6966 + fMenos6965to6966) + (fMais6966to6967 + fMenos6966to6967) + (fMais6967to6968 + fMenos6967to6968) + (fMais47118to2273 + fMenos47118to2273) + (fMais6968to6969 + fMenos6968to6969) + (fMais6969to45206 + fMenos6969to45206) + (fMais45206to76003 + fMenos45206to76003) + (fMais171275to6976 + fMenos171275to6976) + (fMais2273to10775 + fMenos2273to10775) + (fMais6980to75983 + fMenos6980to75983) + (fMais132910to6983 + fMenos132910to6983) + (fMais162860to2735 + fMenos162860to2735) + (fMais122005to3717 + fMenos122005to3717) + (fMais10775to123941 + fMenos10775to123941) + (fMais6983to163633 + fMenos6983to163633) + (fMais46844to10794 + fMenos46844to10794) + (fMais10794to10795 + fMenos10794to10795) + (fMais10730to10777 + fMenos10730to10777) + (fMais10788to163612 + fMenos10788to163612) + (fMais163612to10806 + fMenos163612to10806) + (fMais152255to152412 + fMenos152255to152412) + (fMais152412to127817 + fMenos152412to127817) + (fMais127817to152378 + fMenos127817to152378) + (fMais152378to10828 + fMenos152378to10828) + (fMais10828to152179 + fMenos10828to152179) + (fMais152179to152449 + fMenos152179to152449) + (fMais152449to152472 + fMenos152449to152472) + (fMais145147to45684 + fMenos145147to45684) + (fMais45684to45699 + fMenos45684to45699) + (fMais45699to45680 + fMenos45699to45680) + (fMais24985to24986 + fMenos24985to24986) + (fMais24986to122486 + fMenos24986to122486) + (fMais149863to150034 + fMenos149863to150034) + (fMais150022to10879 + fMenos150022to10879) + (fMais2735to162861 + fMenos2735to162861) + (fMais10885to149730 + fMenos10885to149730) + (fMais149730to149579 + fMenos149730to149579) + (fMais163633to76011 + fMenos163633to76011) + (fMais149579to122515 + fMenos149579to122515) + (fMais122515to149632 + fMenos122515to149632) + (fMais149554to149735 + fMenos149554to149735) + (fMais1681to1682 + fMenos1681to1682) + (fMais1682to1683 + fMenos1682to1683) + (fMais149735to10887 + fMenos149735to10887) + (fMais10887to149578 + fMenos10887to149578) + (fMais1696to1670 + fMenos1696to1670) + (fMais1670to1696 + fMenos1670to1696) + (fMais149578to149700 + fMenos149578to149700) + (fMais149700to10888 + fMenos149700to10888) + (fMais10888to149630 + fMenos10888to149630) + (fMais119703to119712 + fMenos119703to119712) + (fMais119712to119715 + fMenos119712to119715) + (fMais119715to119716 + fMenos119715to119716) + (fMais119716to119714 + fMenos119716to119714) + (fMais119714to119710 + fMenos119714to119710) + (fMais119710to119706 + fMenos119710to119706) + (fMais119706to163481 + fMenos119706to163481) + (fMais163481to119700 + fMenos163481to119700) + (fMais149630to149568 + fMenos149630to149568) + (fMais149568to149691 + fMenos149568to149691) + (fMais149691to149827 + fMenos149691to149827) + (fMais149827to150075 + fMenos149827to150075) + (fMais119694to119693 + fMenos119694to119693) + (fMais2180to149646 + fMenos2180to149646) + (fMais149646to149948 + fMenos149646to149948) + (fMais129004to144609 + fMenos129004to144609) + (fMais144609to129005 + fMenos144609to129005) + (fMais129005to129326 + fMenos129005to129326) + (fMais129326to129337 + fMenos129326to129337) + (fMais129006to129004 + fMenos129006to129004) + (fMais76011to6974 + fMenos76011to6974) + (fMais1871to156675 + fMenos1871to156675) + (fMais156675to1872 + fMenos156675to1872) + (fMais1872to1873 + fMenos1872to1873) + (fMais1873to156666 + fMenos1873to156666) + (fMais156666to1874 + fMenos156666to1874) + (fMais19249to18916 + fMenos19249to18916) + (fMais18916to19252 + fMenos18916to19252) + (fMais149617to149848 + fMenos149617to149848) + (fMais19252to29400 + fMenos19252to29400) + (fMais11033to18752 + fMenos11033to18752) + (fMais18752to11032 + fMenos18752to11032) + (fMais1878to1879 + fMenos1878to1879) + (fMais3465to3550 + fMenos3465to3550) + (fMais3550to122723 + fMenos3550to122723) + (fMais122723to2328 + fMenos122723to2328) + (fMais11039to11038 + fMenos11039to11038) + (fMais11038to11037 + fMenos11038to11037) + (fMais11037to138722 + fMenos11037to138722) + (fMais138722to11036 + fMenos138722to11036) + (fMais150051to149868 + fMenos150051to149868) + (fMais149868to149866 + fMenos149868to149866) + (fMais149866to149809 + fMenos149866to149809) + (fMais11036to11035 + fMenos11036to11035) + (fMais11035to169418 + fMenos11035to169418) + (fMais2199to2244 + fMenos2199to2244) + (fMais2244to2245 + fMenos2244to2245) + (fMais2245to2246 + fMenos2245to2246) + (fMais2246to2257 + fMenos2246to2257) + (fMais169418to11034 + fMenos169418to11034) + (fMais2257to122449 + fMenos2257to122449) + (fMais122449to13498 + fMenos122449to13498) + (fMais11034to169749 + fMenos11034to169749) + (fMais11045to11065 + fMenos11045to11065) + (fMais19252to19253 + fMenos19252to19253) + (fMais13044to2267 + fMenos13044to2267) + (fMais2267to2268 + fMenos2267to2268) + (fMais2268to10780 + fMenos2268to10780) + (fMais10780to2269 + fMenos10780to2269) + (fMais2269to2270 + fMenos2269to2270) + (fMais2270to2271 + fMenos2270to2271) + (fMais2277to13493 + fMenos2277to13493) + (fMais19253to1355 + fMenos19253to1355) + (fMais11064to11335 + fMenos11064to11335) + (fMais11335to11044 + fMenos11335to11044) + (fMais11044to11045 + fMenos11044to11045) + (fMais11117to121856 + fMenos11117to121856) + (fMais11069to11070 + fMenos11069to11070) + (fMais11081to11099 + fMenos11081to11099) + (fMais11096to11083 + fMenos11096to11083) + (fMais11083to11084 + fMenos11083to11084) + (fMais11097to142878 + fMenos11097to142878) + (fMais11100to18737 + fMenos11100to18737) + (fMais18737to18739 + fMenos18737to18739) + (fMais18739to18723 + fMenos18739to18723) + (fMais18723to18727 + fMenos18723to18727) + (fMais18727to18751 + fMenos18727to18751) + (fMais18751to122173 + fMenos18751to122173) + (fMais122173to122169 + fMenos122173to122169) + (fMais122169to122166 + fMenos122169to122166) + (fMais122166to122158 + fMenos122166to122158) + (fMais122158to11099 + fMenos122158to11099) + (fMais11295to33547 + fMenos11295to33547) + (fMais33547to11063 + fMenos33547to11063) + (fMais2664to116175 + fMenos2664to116175) + (fMais116175to116172 + fMenos116175to116172) + (fMais19692to163253 + fMenos19692to163253) + (fMais163253to11139 + fMenos163253to11139) + (fMais11142to18782 + fMenos11142to18782) + (fMais18782to18784 + fMenos18782to18784) + (fMais11147to11148 + fMenos11147to11148) + (fMais11169to18946 + fMenos11169to18946) + (fMais18946to11170 + fMenos18946to11170) + (fMais6974to76013 + fMenos6974to76013) + (fMais11170to122348 + fMenos11170to122348) + (fMais122348to18888 + fMenos122348to18888) + (fMais18888to18930 + fMenos18888to18930) + (fMais138965to11249 + fMenos138965to11249) + (fMais50632to158417 + fMenos50632to158417) + (fMais18867to122275 + fMenos18867to122275) + (fMais76013to132913 + fMenos76013to132913) + (fMais2374to2382 + fMenos2374to2382) + (fMais2382to2383 + fMenos2382to2383) + (fMais2383to2384 + fMenos2383to2384) + (fMais2384to2385 + fMenos2384to2385) + (fMais2385to241 + fMenos2385to241) + (fMais2396to2397 + fMenos2396to2397) + (fMais2397to2398 + fMenos2397to2398) + (fMais2398to2399 + fMenos2398to2399) + (fMais2399to2400 + fMenos2399to2400) + (fMais2400to2401 + fMenos2400to2401) + (fMais2401to148362 + fMenos2401to148362) + (fMais122275to11110 + fMenos122275to11110) + (fMais11208to18857 + fMenos11208to18857) + (fMais11220to11221 + fMenos11220to11221) + (fMais2408to2407 + fMenos2408to2407) + (fMais11221to11228 + fMenos11221to11228) + (fMais11228to69231 + fMenos11228to69231) + (fMais11228to11229 + fMenos11228to11229) + (fMais11235to11236 + fMenos11235to11236) + (fMais132913to6975 + fMenos132913to6975) + (fMais6975to171275 + fMenos6975to171275) + (fMais5487to7033 + fMenos5487to7033) + (fMais7033to7025 + fMenos7033to7025) + (fMais7040to7039 + fMenos7040to7039) + (fMais7039to7046 + fMenos7039to7046) + (fMais11236to11237 + fMenos11236to11237) + (fMais11237to11239 + fMenos11237to11239) + (fMais48947to11248 + fMenos48947to11248) + (fMais11248to18754 + fMenos11248to18754) + (fMais18754to11247 + fMenos18754to11247) + (fMais11247to11246 + fMenos11247to11246) + (fMais11246to11251 + fMenos11246to11251) + (fMais127179to3745 + fMenos127179to3745) + (fMais3745to159457 + fMenos3745to159457) + (fMais159457to159456 + fMenos159457to159456) + (fMais11244to158424 + fMenos11244to158424) + (fMais3807to3808 + fMenos3807to3808) + (fMais158424to11201 + fMenos158424to11201) + (fMais11253to169647 + fMenos11253to169647) + (fMais11254to11255 + fMenos11254to11255) + (fMais11255to169646 + fMenos11255to169646) + (fMais8402to8403 + fMenos8402to8403) + (fMais8403to8404 + fMenos8403to8404) + (fMais8404to8405 + fMenos8404to8405) + (fMais8405to8406 + fMenos8405to8406) + (fMais169646to11256 + fMenos169646to11256) + (fMais11256to11262 + fMenos11256to11262) + (fMais11262to169737 + fMenos11262to169737) + (fMais169737to11263 + fMenos169737to11263) + (fMais11263to169736 + fMenos11263to169736) + (fMais169736to11264 + fMenos169736to11264) + (fMais11264to11265 + fMenos11264to11265) + (fMais11065to33339 + fMenos11065to33339) + (fMais33339to11295 + fMenos33339to11295) + (fMais11299to11300 + fMenos11299to11300) + (fMais11300to11301 + fMenos11300to11301) + (fMais11301to122084 + fMenos11301to122084) + (fMais122084to11302 + fMenos122084to11302) + (fMais11302to11303 + fMenos11302to11303) + (fMais11303to127506 + fMenos11303to127506) + (fMais127506to11304 + fMenos127506to11304) + (fMais11304to11305 + fMenos11304to11305) + (fMais11309to11310 + fMenos11309to11310) + (fMais11317to11318 + fMenos11317to11318) + (fMais11318to11319 + fMenos11318to11319) + (fMais11319to11320 + fMenos11319to11320) + (fMais11320to11321 + fMenos11320to11321) + (fMais94076to171425 + fMenos94076to171425) + (fMais171425to28818 + fMenos171425to28818) + (fMais28818to94092 + fMenos28818to94092) + (fMais8399to8400 + fMenos8399to8400) + (fMais8400to8401 + fMenos8400to8401) + (fMais11321to11322 + fMenos11321to11322) + (fMais3808to3809 + fMenos3808to3809) + (fMais79823to7139 + fMenos79823to7139) + (fMais11322to11323 + fMenos11322to11323) + (fMais8302to8304 + fMenos8302to8304) + (fMais11323to11324 + fMenos11323to11324) + (fMais8304to8303 + fMenos8304to8303) + (fMais11324to169573 + fMenos11324to169573) + (fMais3809to49621 + fMenos3809to49621) + (fMais8303to13317 + fMenos8303to13317) + (fMais8401to8537 + fMenos8401to8537) + (fMais8537to8402 + fMenos8537to8402) + (fMais169573to11325 + fMenos169573to11325) + (fMais11325to11326 + fMenos11325to11326) + (fMais166671to166673 + fMenos166671to166673) + (fMais166673to2642 + fMenos166673to2642) + (fMais2642to2641 + fMenos2642to2641) + (fMais13317to138945 + fMenos13317to138945) + (fMais25376to25367 + fMenos25376to25367) + (fMais25367to8413 + fMenos25367to8413) + (fMais13916to45696 + fMenos13916to45696) + (fMais45696to130297 + fMenos45696to130297) + (fMais130297to45687 + fMenos130297to45687) + (fMais45687to45682 + fMenos45687to45682) + (fMais45682to45688 + fMenos45682to45688) + (fMais8413to8399 + fMenos8413to8399) + (fMais4163to153753 + fMenos4163to153753) + (fMais153753to8600 + fMenos153753to8600) + (fMais11326to169568 + fMenos11326to169568) + (fMais169568to11327 + fMenos169568to11327) + (fMais123340to123334 + fMenos123340to123334) + (fMais123334to18470 + fMenos123334to18470) + (fMais18470to5314 + fMenos18470to5314) + (fMais5314to18471 + fMenos5314to18471) + (fMais8600to153742 + fMenos8600to153742) + (fMais153742to153740 + fMenos153742to153740) + (fMais153740to8601 + fMenos153740to8601) + (fMais8601to153580 + fMenos8601to153580) + (fMais153580to8602 + fMenos153580to8602) + (fMais18471to5315 + fMenos18471to5315) + (fMais5315to41116 + fMenos5315to41116) + (fMais41116to7103 + fMenos41116to7103) + (fMais7103to41115 + fMenos7103to41115) + (fMais69205to1633 + fMenos69205to1633) + (fMais1633to1632 + fMenos1633to1632) + (fMais11325to169572 + fMenos11325to169572) + (fMais169572to122163 + fMenos169572to122163) + (fMais169571to11328 + fMenos169571to11328) + (fMais41115to7104 + fMenos41115to7104) + (fMais7104to7105 + fMenos7104to7105) + (fMais45688to45693 + fMenos45688to45693) + (fMais8486to8485 + fMenos8486to8485) + (fMais7105to41122 + fMenos7105to41122) + (fMais7109to41130 + fMenos7109to41130) + (fMais41130to18694 + fMenos41130to18694) + (fMais18694to18695 + fMenos18694to18695) + (fMais8485to168904 + fMenos8485to168904) + (fMais11379to97149 + fMenos11379to97149) + (fMais97149to11380 + fMenos97149to11380) + (fMais1912to11404 + fMenos1912to11404) + (fMais11404to11405 + fMenos11404to11405) + (fMais2641to2640 + fMenos2641to2640) + (fMais11501to11500 + fMenos11501to11500) + (fMais171269to5413 + fMenos171269to5413) + (fMais45693to45690 + fMenos45693to45690) + (fMais25296to11558 + fMenos25296to11558) + (fMais2640to150217 + fMenos2640to150217) + (fMais168904to8484 + fMenos168904to8484) + (fMais45690to45694 + fMenos45690to45694) ;

#Conjunto de restricoes:
#Cada sensor precisa ter medição >= que o real:
subj to min8616sen8617:  C8616to8617 + fMais8616to8617 - fMenos8616to8617  = 1;
subj to min45694sen135255:  C45694to135255 + fMais45694to135255 - fMenos45694to135255  = 3;
subj to min7142sen160021:  C7142to160021 + fMais7142to160021 - fMenos7142to160021  = 1;
subj to min135255sen3837:  C135255to3837 + fMais135255to3837 - fMenos135255to3837  = 3;
subj to min146909sen8621:  C146909to8621 + fMais146909to8621 - fMenos146909to8621  = 1;
subj to min8621sen8622:  C8621to8622 + fMais8621to8622 - fMenos8621to8622  = 1;
subj to min8622sen27426:  C8622to27426 + fMais8622to27426 - fMenos8622to27426  = 1;
subj to min160021sen160020:  C160021to160020 + fMais160021to160020 - fMenos160021to160020  = 1;
subj to min160020sen7316:  C160020to7316 + fMais160020to7316 - fMenos160020to7316  = 2;
subj to min7316sen160018:  C7316to160018 + fMais7316to160018 - fMenos7316to160018  = 2;
subj to min27426sen146907:  C27426to146907 + fMais27426to146907 - fMenos27426to146907  = 1;
subj to min146907sen8623:  C146907to8623 + fMais146907to8623 - fMenos146907to8623  = 1;
subj to min160018sen7317:  C160018to7317 + fMais160018to7317 - fMenos160018to7317  = 2;
subj to min7317sen160012:  C7317to160012 + fMais7317to160012 - fMenos7317to160012  = 1;
subj to min160012sen160009:  C160012to160009 + fMais160012to160009 - fMenos160012to160009  = 1;
subj to min160009sen160007:  C160009to160007 + fMais160009to160007 - fMenos160009to160007  = 1;
subj to min160007sen7318:  C160007to7318 + fMais160007to7318 - fMenos160007to7318  = 1;
subj to min7318sen160004:  C7318to160004 + fMais7318to160004 - fMenos7318to160004  = 1;
subj to min8684sen122806:  C8684to122806 + fMais8684to122806 - fMenos8684to122806  = 2;
subj to min3837sen140136:  C3837to140136 + fMais3837to140136 - fMenos3837to140136  = 3;
subj to min140136sen126927:  C140136to126927 + fMais140136to126927 - fMenos140136to126927  = 2;
subj to min160004sen160003:  C160004to160003 + fMais160004to160003 - fMenos160004to160003  = 1;
subj to min160003sen7319:  C160003to7319 + fMais160003to7319 - fMenos160003to7319  = 1;
subj to min3850sen3851:  C3850to3851 + fMais3850to3851 - fMenos3850to3851  = 1;
subj to min2892sen2901:  C2892to2901 + fMais2892to2901 - fMenos2892to2901  = 2;
subj to min2901sen2902:  C2901to2902 + fMais2901to2902 - fMenos2901to2902  = 2;
subj to min2902sen2903:  C2902to2903 + fMais2902to2903 - fMenos2902to2903  = 2;
subj to min7319sen160005:  C7319to160005 + fMais7319to160005 - fMenos7319to160005  = 1;
subj to min160005sen160006:  C160005to160006 + fMais160005to160006 - fMenos160005to160006  = 1;
subj to min160006sen7320:  C160006to7320 + fMais160006to7320 - fMenos160006to7320  = 1;
subj to min7320sen160011:  C7320to160011 + fMais7320to160011 - fMenos7320to160011  = 1;
subj to min160011sen160013:  C160011to160013 + fMais160011to160013 - fMenos160011to160013  = 1;
subj to min160013sen7321:  C160013to7321 + fMais160013to7321 - fMenos160013to7321  = 1;
subj to min7321sen160019:  C7321to160019 + fMais7321to160019 - fMenos7321to160019  = 1;
subj to min3851sen129773:  C3851to129773 + fMais3851to129773 - fMenos3851to129773  = 1;
subj to min129773sen3852:  C129773to3852 + fMais129773to3852 - fMenos129773to3852  = 1;
subj to min160019sen7322:  C160019to7322 + fMais160019to7322 - fMenos160019to7322  = 1;
subj to min122806sen9073:  C122806to9073 + fMais122806to9073 - fMenos122806to9073  = 2;
subj to min2662sen2663:  C2662to2663 + fMais2662to2663 - fMenos2662to2663  = 4;
subj to min2663sen2664:  C2663to2664 + fMais2663to2664 - fMenos2663to2664  = 4;
subj to min8905sen8948:  C8905to8948 + fMais8905to8948 - fMenos8905to8948  = 2;
subj to min7388sen7389:  C7388to7389 + fMais7388to7389 - fMenos7388to7389  = 1;
subj to min7389sen7390:  C7389to7390 + fMais7389to7390 - fMenos7389to7390  = 1;
subj to min7390sen7391:  C7390to7391 + fMais7390to7391 - fMenos7390to7391  = 1;
subj to min7391sen7392:  C7391to7392 + fMais7391to7392 - fMenos7391to7392  = 1;
subj to min1321sen124772:  C1321to124772 + fMais1321to124772 - fMenos1321to124772  = 1;
subj to min7392sen7393:  C7392to7393 + fMais7392to7393 - fMenos7392to7393  = 1;
subj to min3852sen3846:  C3852to3846 + fMais3852to3846 - fMenos3852to3846  = 1;
subj to min7393sen7394:  C7393to7394 + fMais7393to7394 - fMenos7393to7394  = 1;
subj to min7394sen7395:  C7394to7395 + fMais7394to7395 - fMenos7394to7395  = 1;
subj to min8892sen122757:  C8892to122757 + fMais8892to122757 - fMenos8892to122757  = 0;
subj to min7395sen7563:  C7395to7563 + fMais7395to7563 - fMenos7395to7563  = 1;
subj to min7229sen7230:  C7229to7230 + fMais7229to7230 - fMenos7229to7230  = 1;
subj to min7230sen7231:  C7230to7231 + fMais7230to7231 - fMenos7230to7231  = 1;
subj to min3846sen3847:  C3846to3847 + fMais3846to3847 - fMenos3846to3847  = 1;
subj to min3847sen3848:  C3847to3848 + fMais3847to3848 - fMenos3847to3848  = 1;
subj to min3848sen3849:  C3848to3849 + fMais3848to3849 - fMenos3848to3849  = 1;
subj to min122757sen8928:  C122757to8928 + fMais122757to8928 - fMenos122757to8928  = 0;
subj to min8928sen122751:  C8928to122751 + fMais8928to122751 - fMenos8928to122751  = 0;
subj to min7231sen7232:  C7231to7232 + fMais7231to7232 - fMenos7231to7232  = 1;
subj to min2039sen120710:  C2039to120710 + fMais2039to120710 - fMenos2039to120710  = 1;
subj to min7232sen7233:  C7232to7233 + fMais7232to7233 - fMenos7232to7233  = 1;
subj to min7233sen7234:  C7233to7234 + fMais7233to7234 - fMenos7233to7234  = 1;
subj to min122751sen8929:  C122751to8929 + fMais122751to8929 - fMenos122751to8929  = 0;
subj to min8929sen8930:  C8929to8930 + fMais8929to8930 - fMenos8929to8930  = 0;
subj to min8937sen8938:  C8937to8938 + fMais8937to8938 - fMenos8937to8938  = 2;
subj to min7234sen7235:  C7234to7235 + fMais7234to7235 - fMenos7234to7235  = 1;
subj to min120710sen2040:  C120710to2040 + fMais120710to2040 - fMenos120710to2040  = 1;
subj to min2040sen2041:  C2040to2041 + fMais2040to2041 - fMenos2040to2041  = 1;
subj to min8938sen8939:  C8938to8939 + fMais8938to8939 - fMenos8938to8939  = 1;
subj to min8939sen8940:  C8939to8940 + fMais8939to8940 - fMenos8939to8940  = 1;
subj to min3857sen3856:  C3857to3856 + fMais3857to3856 - fMenos3857to3856  = 3;
subj to min8948sen118872:  C8948to118872 + fMais8948to118872 - fMenos8948to118872  = 3;
subj to min118872sen8949:  C118872to8949 + fMais118872to8949 - fMenos118872to8949  = 3;
subj to min8949sen118870:  C8949to118870 + fMais8949to118870 - fMenos8949to118870  = 2;
subj to min118870sen8836:  C118870to8836 + fMais118870to8836 - fMenos118870to8836  = 2;
subj to min3857sen3858:  C3857to3858 + fMais3857to3858 - fMenos3857to3858  = 1;
subj to min3858sen3857:  C3858to3857 + fMais3858to3857 - fMenos3858to3857  = 2;
subj to min7235sen7236:  C7235to7236 + fMais7235to7236 - fMenos7235to7236  = 1;
subj to min3859sen3858:  C3859to3858 + fMais3859to3858 - fMenos3859to3858  = 2;
subj to min3836sen3859:  C3836to3859 + fMais3836to3859 - fMenos3836to3859  = 2;
subj to min3860sen853:  C3860to853 + fMais3860to853 - fMenos3860to853  = 1;
subj to min3861sen3860:  C3861to3860 + fMais3861to3860 - fMenos3861to3860  = 1;
subj to min8836sen8937:  C8836to8937 + fMais8836to8937 - fMenos8836to8937  = 2;
subj to min9067sen8963:  C9067to8963 + fMais9067to8963 - fMenos9067to8963  = 3;
subj to min9016sen9062:  C9016to9062 + fMais9016to9062 - fMenos9016to9062  = 2;
subj to min9062sen9063:  C9062to9063 + fMais9062to9063 - fMenos9062to9063  = 3;
subj to min7236sen7237:  C7236to7237 + fMais7236to7237 - fMenos7236to7237  = 1;
subj to min7237sen7238:  C7237to7238 + fMais7237to7238 - fMenos7237to7238  = 1;
subj to min7238sen7239:  C7238to7239 + fMais7238to7239 - fMenos7238to7239  = 1;
subj to min9063sen141758:  C9063to141758 + fMais9063to141758 - fMenos9063to141758  = 3;
subj to min7239sen7240:  C7239to7240 + fMais7239to7240 - fMenos7239to7240  = 1;
subj to min141758sen9064:  C141758to9064 + fMais141758to9064 - fMenos141758to9064  = 3;
subj to min7240sen7241:  C7240to7241 + fMais7240to7241 - fMenos7240to7241  = 1;
subj to min3861sen3857:  C3861to3857 + fMais3861to3857 - fMenos3861to3857  = 2;
subj to min9064sen141759:  C9064to141759 + fMais9064to141759 - fMenos9064to141759  = 3;
subj to min7241sen7242:  C7241to7242 + fMais7241to7242 - fMenos7241to7242  = 1;
subj to min141759sen9065:  C141759to9065 + fMais141759to9065 - fMenos141759to9065  = 3;
subj to min7242sen7243:  C7242to7243 + fMais7242to7243 - fMenos7242to7243  = 1;
subj to min7243sen7244:  C7243to7244 + fMais7243to7244 - fMenos7243to7244  = 1;
subj to min1351sen11060:  C1351to11060 + fMais1351to11060 - fMenos1351to11060  = 4;
subj to min3402sen143395:  C3402to143395 + fMais3402to143395 - fMenos3402to143395  = 3;
subj to min7244sen7245:  C7244to7245 + fMais7244to7245 - fMenos7244to7245  = 1;
subj to min9065sen141760:  C9065to141760 + fMais9065to141760 - fMenos9065to141760  = 3;
subj to min141760sen9066:  C141760to9066 + fMais141760to9066 - fMenos141760to9066  = 3;
subj to min9066sen9067:  C9066to9067 + fMais9066to9067 - fMenos9066to9067  = 3;
subj to min9132sen9115:  C9132to9115 + fMais9132to9115 - fMenos9132to9115  = 1;
subj to min144255sen9130:  C144255to9130 + fMais144255to9130 - fMenos144255to9130  = 1;
subj to min9130sen43195:  C9130to43195 + fMais9130to43195 - fMenos9130to43195  = 1;
subj to min143395sen143392:  C143395to143392 + fMais143395to143392 - fMenos143395to143392  = 4;
subj to min143392sen3395:  C143392to3395 + fMais143392to3395 - fMenos143392to3395  = 4;
subj to min7245sen7246:  C7245to7246 + fMais7245to7246 - fMenos7245to7246  = 1;
subj to min7246sen7247:  C7246to7247 + fMais7246to7247 - fMenos7246to7247  = 1;
subj to min7247sen7248:  C7247to7248 + fMais7247to7248 - fMenos7247to7248  = 1;
subj to min43195sen9131:  C43195to9131 + fMais43195to9131 - fMenos43195to9131  = 1;
subj to min9131sen43198:  C9131to43198 + fMais9131to43198 - fMenos9131to43198  = 1;
subj to min43198sen9132:  C43198to9132 + fMais43198to9132 - fMenos43198to9132  = 1;
subj to min9126sen43214:  C9126to43214 + fMais9126to43214 - fMenos9126to43214  = 0;
subj to min4101sen29501:  C4101to29501 + fMais4101to29501 - fMenos4101to29501  = 1;
subj to min9312sen9288:  C9312to9288 + fMais9312to9288 - fMenos9312to9288  = 1;
subj to min153432sen153430:  C153432to153430 + fMais153432to153430 - fMenos153432to153430  = 1;
subj to min153430sen286:  C153430to286 + fMais153430to286 - fMenos153430to286  = 1;
subj to min286sen153427:  C286to153427 + fMais286to153427 - fMenos286to153427  = 1;
subj to min153427sen153425:  C153427to153425 + fMais153427to153425 - fMenos153427to153425  = 1;
subj to min153425sen153424:  C153425to153424 + fMais153425to153424 - fMenos153425to153424  = 1;
subj to min153424sen287:  C153424to287 + fMais153424to287 - fMenos153424to287  = 1;
subj to min287sen288:  C287to288 + fMais287to288 - fMenos287to288  = 1;
subj to min9288sen143030:  C9288to143030 + fMais9288to143030 - fMenos9288to143030  = 1;
subj to min143030sen9289:  C143030to9289 + fMais143030to9289 - fMenos143030to9289  = 1;
subj to min9311sen9312:  C9311to9312 + fMais9311to9312 - fMenos9311to9312  = 2;
subj to min89098sen143029:  C89098to143029 + fMais89098to143029 - fMenos89098to143029  = 2;
subj to min143029sen9313:  C143029to9313 + fMais143029to9313 - fMenos143029to9313  = 2;
subj to min517sen4959:  C517to4959 + fMais517to4959 - fMenos517to4959  = 2;
subj to min4959sen519:  C4959to519 + fMais4959to519 - fMenos4959to519  = 2;
subj to min519sen521:  C519to521 + fMais519to521 - fMenos519to521  = 2;
subj to min521sen143453:  C521to143453 + fMais521to143453 - fMenos521to143453  = 2;
subj to min143453sen531:  C143453to531 + fMais143453to531 - fMenos143453to531  = 2;
subj to min531sen143454:  C531to143454 + fMais531to143454 - fMenos531to143454  = 2;
subj to min9313sen9314:  C9313to9314 + fMais9313to9314 - fMenos9313to9314  = 2;
subj to min9314sen143028:  C9314to143028 + fMais9314to143028 - fMenos9314to143028  = 2;
subj to min725sen153490:  C725to153490 + fMais725to153490 - fMenos725to153490  = 3;
subj to min153490sen2012:  C153490to2012 + fMais153490to2012 - fMenos153490to2012  = 3;
subj to min2012sen153486:  C2012to153486 + fMais2012to153486 - fMenos2012to153486  = 3;
subj to min153486sen153484:  C153486to153484 + fMais153486to153484 - fMenos153486to153484  = 3;
subj to min153484sen153481:  C153484to153481 + fMais153484to153481 - fMenos153484to153481  = 3;
subj to min153481sen583:  C153481to583 + fMais153481to583 - fMenos153481to583  = 3;
subj to min583sen153477:  C583to153477 + fMais583to153477 - fMenos583to153477  = 3;
subj to min153477sen2013:  C153477to2013 + fMais153477to2013 - fMenos153477to2013  = 3;
subj to min2013sen153473:  C2013to153473 + fMais2013to153473 - fMenos2013to153473  = 3;
subj to min153473sen582:  C153473to582 + fMais153473to582 - fMenos153473to582  = 3;
subj to min582sen153471:  C582to153471 + fMais582to153471 - fMenos582to153471  = 3;
subj to min153471sen2014:  C153471to2014 + fMais153471to2014 - fMenos153471to2014  = 3;
subj to min143028sen9302:  C143028to9302 + fMais143028to9302 - fMenos143028to9302  = 1;
subj to min3395sen3403:  C3395to3403 + fMais3395to3403 - fMenos3395to3403  = 4;
subj to min9302sen9303:  C9302to9303 + fMais9302to9303 - fMenos9302to9303  = 1;
subj to min7248sen4134:  C7248to4134 + fMais7248to4134 - fMenos7248to4134  = 1;
subj to min7647sen7646:  C7647to7646 + fMais7647to7646 - fMenos7647to7646  = 1;
subj to min133218sen7647:  C133218to7647 + fMais133218to7647 - fMenos133218to7647  = 1;
subj to min7648sen133218:  C7648to133218 + fMais7648to133218 - fMenos7648to133218  = 1;
subj to min133235sen7648:  C133235to7648 + fMais133235to7648 - fMenos133235to7648  = 1;
subj to min9303sen143027:  C9303to143027 + fMais9303to143027 - fMenos9303to143027  = 1;
subj to min3408sen3397:  C3408to3397 + fMais3408to3397 - fMenos3408to3397  = 4;
subj to min3397sen3409:  C3397to3409 + fMais3397to3409 - fMenos3397to3409  = 4;
subj to min3409sen143383:  C3409to143383 + fMais3409to143383 - fMenos3409to143383  = 4;
subj to min143383sen3410:  C143383to3410 + fMais143383to3410 - fMenos143383to3410  = 4;
subj to min3401sen165585:  C3401to165585 + fMais3401to165585 - fMenos3401to165585  = 3;
subj to min165585sen3402:  C165585to3402 + fMais165585to3402 - fMenos165585to3402  = 3;
subj to min29474sen133235:  C29474to133235 + fMais29474to133235 - fMenos29474to133235  = 1;
subj to min7719sen7794:  C7719to7794 + fMais7719to7794 - fMenos7719to7794  = 0;
subj to min127724sen7719:  C127724to7719 + fMais127724to7719 - fMenos127724to7719  = 0;
subj to min143027sen89079:  C143027to89079 + fMais143027to89079 - fMenos143027to89079  = 1;
subj to min89079sen9304:  C89079to9304 + fMais89079to9304 - fMenos89079to9304  = 1;
subj to min49702sen7720:  C49702to7720 + fMais49702to7720 - fMenos49702to7720  = 1;
subj to min7720sen122530:  C7720to122530 + fMais7720to122530 - fMenos7720to122530  = 1;
subj to min122530sen116714:  C122530to116714 + fMais122530to116714 - fMenos122530to116714  = 1;
subj to min116714sen49638:  C116714to49638 + fMais116714to49638 - fMenos116714to49638  = 1;
subj to min49638sen7725:  C49638to7725 + fMais49638to7725 - fMenos49638to7725  = 1;
subj to min8930sen9334:  C8930to9334 + fMais8930to9334 - fMenos8930to9334  = 0;
subj to min9334sen9335:  C9334to9335 + fMais9334to9335 - fMenos9334to9335  = 0;
subj to min9335sen9336:  C9335to9336 + fMais9335to9336 - fMenos9335to9336  = 0;
subj to min9336sen119460:  C9336to119460 + fMais9336to119460 - fMenos9336to119460  = 0;
subj to min119460sen119462:  C119460to119462 + fMais119460to119462 - fMenos119460to119462  = 0;
subj to min119462sen9337:  C119462to9337 + fMais119462to9337 - fMenos119462to9337  = 0;
subj to min9337sen9338:  C9337to9338 + fMais9337to9338 - fMenos9337to9338  = 0;
subj to min9338sen9339:  C9338to9339 + fMais9338to9339 - fMenos9338to9339  = 0;
subj to min153498sen153502:  C153498to153502 + fMais153498to153502 - fMenos153498to153502  = 1;
subj to min153502sen153505:  C153502to153505 + fMais153502to153505 - fMenos153502to153505  = 1;
subj to min153505sen593:  C153505to593 + fMais153505to593 - fMenos153505to593  = 1;
subj to min593sen153508:  C593to153508 + fMais593to153508 - fMenos593to153508  = 1;
subj to min153508sen594:  C153508to594 + fMais153508to594 - fMenos153508to594  = 1;
subj to min594sen679:  C594to679 + fMais594to679 - fMenos594to679  = 1;
subj to min138091sen138092:  C138091to138092 + fMais138091to138092 - fMenos138091to138092  = 1;
subj to min138092sen138185:  C138092to138185 + fMais138092to138185 - fMenos138092to138185  = 1;
subj to min138185sen776:  C138185to776 + fMais138185to776 - fMenos138185to776  = 1;
subj to min9339sen9340:  C9339to9340 + fMais9339to9340 - fMenos9339to9340  = 0;
subj to min2947sen2948:  C2947to2948 + fMais2947to2948 - fMenos2947to2948  = 0;
subj to min7794sen122538:  C7794to122538 + fMais7794to122538 - fMenos7794to122538  = 0;
subj to min4975sen4982:  C4975to4982 + fMais4975to4982 - fMenos4975to4982  = 1;
subj to min4982sen4983:  C4982to4983 + fMais4982to4983 - fMenos4982to4983  = 1;
subj to min9340sen9341:  C9340to9341 + fMais9340to9341 - fMenos9340to9341  = 0;
subj to min122538sen7798:  C122538to7798 + fMais122538to7798 - fMenos122538to7798  = 0;
subj to min7798sen937:  C7798to937 + fMais7798to937 - fMenos7798to937  = 0;
subj to min9341sen9342:  C9341to9342 + fMais9341to9342 - fMenos9341to9342  = 0;
subj to min9342sen9343:  C9342to9343 + fMais9342to9343 - fMenos9342to9343  = 0;
subj to min9343sen9344:  C9343to9344 + fMais9343to9344 - fMenos9343to9344  = 1;
subj to min9344sen9318:  C9344to9318 + fMais9344to9318 - fMenos9344to9318  = 1;
subj to min7795sen49672:  C7795to49672 + fMais7795to49672 - fMenos7795to49672  = 1;
subj to min133215sen7795:  C133215to7795 + fMais133215to7795 - fMenos133215to7795  = 1;
subj to min7801sen133215:  C7801to133215 + fMais7801to133215 - fMenos7801to133215  = 1;
subj to min7784sen7801:  C7784to7801 + fMais7784to7801 - fMenos7784to7801  = 1;
subj to min127731sen7784:  C127731to7784 + fMais127731to7784 - fMenos127731to7784  = 1;
subj to min9349sen9348:  C9349to9348 + fMais9349to9348 - fMenos9349to9348  = 3;
subj to min9348sen9347:  C9348to9347 + fMais9348to9347 - fMenos9348to9347  = 3;
subj to min9323sen9354:  C9323to9354 + fMais9323to9354 - fMenos9323to9354  = 3;
subj to min9354sen142181:  C9354to142181 + fMais9354to142181 - fMenos9354to142181  = 3;
subj to min142181sen9355:  C142181to9355 + fMais142181to9355 - fMenos142181to9355  = 3;
subj to min9355sen142183:  C9355to142183 + fMais9355to142183 - fMenos9355to142183  = 3;
subj to min131008sen131004:  C131008to131004 + fMais131008to131004 - fMenos131008to131004  = 1;
subj to min131004sen131006:  C131004to131006 + fMais131004to131006 - fMenos131004to131006  = 1;
subj to min131006sen131003:  C131006to131003 + fMais131006to131003 - fMenos131006to131003  = 1;
subj to min131003sen9370:  C131003to9370 + fMais131003to9370 - fMenos131003to9370  = 1;
subj to min9370sen131000:  C9370to131000 + fMais9370to131000 - fMenos9370to131000  = 1;
subj to min9637sen9624:  C9637to9624 + fMais9637to9624 - fMenos9637to9624  = 1;
subj to min9624sen170743:  C9624to170743 + fMais9624to170743 - fMenos9624to170743  = 1;
subj to min170743sen9641:  C170743to9641 + fMais170743to9641 - fMenos170743to9641  = 1;
subj to min127730sen127731:  C127730to127731 + fMais127730to127731 - fMenos127730to127731  = 1;
subj to min7816sen158788:  C7816to158788 + fMais7816to158788 - fMenos7816to158788  = 1;
subj to min146288sen146287:  C146288to146287 + fMais146288to146287 - fMenos146288to146287  = 1;
subj to min9641sen9632:  C9641to9632 + fMais9641to9632 - fMenos9641to9632  = 1;
subj to min146287sen146286:  C146287to146286 + fMais146287to146286 - fMenos146287to146286  = 1;
subj to min9632sen9631:  C9632to9631 + fMais9632to9631 - fMenos9632to9631  = 0;
subj to min160343sen143520:  C160343to143520 + fMais160343to143520 - fMenos160343to143520  = 1;
subj to min143520sen49698:  C143520to49698 + fMais143520to49698 - fMenos143520to49698  = 1;
subj to min122940sen143636:  C122940to143636 + fMais122940to143636 - fMenos122940to143636  = 1;
subj to min2993sen2994:  C2993to2994 + fMais2993to2994 - fMenos2993to2994  = 1;
subj to min49698sen49703:  C49698to49703 + fMais49698to49703 - fMenos49698to49703  = 1;
subj to min143636sen5161:  C143636to5161 + fMais143636to5161 - fMenos143636to5161  = 1;
subj to min5161sen5162:  C5161to5162 + fMais5161to5162 - fMenos5161to5162  = 1;
subj to min314sen318:  C314to318 + fMais314to318 - fMenos314to318  = 1;
subj to min9631sen9630:  C9631to9630 + fMais9631to9630 - fMenos9631to9630  = 0;
subj to min9630sen9629:  C9630to9629 + fMais9630to9629 - fMenos9630to9629  = 0;
subj to min5162sen5163:  C5162to5163 + fMais5162to5163 - fMenos5162to5163  = 1;
subj to min5163sen5164:  C5163to5164 + fMais5163to5164 - fMenos5163to5164  = 1;
subj to min19627sen19626:  C19627to19626 + fMais19627to19626 - fMenos19627to19626  = 1;
subj to min19626sen19625:  C19626to19625 + fMais19626to19625 - fMenos19626to19625  = 1;
subj to min19625sen19624:  C19625to19624 + fMais19625to19624 - fMenos19625to19624  = 1;
subj to min19624sen43716:  C19624to43716 + fMais19624to43716 - fMenos19624to43716  = 1;
subj to min9629sen9642:  C9629to9642 + fMais9629to9642 - fMenos9629to9642  = 0;
subj to min5164sen5165:  C5164to5165 + fMais5164to5165 - fMenos5164to5165  = 1;
subj to min5165sen5166:  C5165to5166 + fMais5165to5166 - fMenos5165to5166  = 1;
subj to min9642sen144205:  C9642to144205 + fMais9642to144205 - fMenos9642to144205  = 0;
subj to min5166sen5167:  C5166to5167 + fMais5166to5167 - fMenos5166to5167  = 1;
subj to min49703sen49619:  C49703to49619 + fMais49703to49619 - fMenos49703to49619  = 1;
subj to min5167sen5168:  C5167to5168 + fMais5167to5168 - fMenos5167to5168  = 1;
subj to min5168sen5169:  C5168to5169 + fMais5168to5169 - fMenos5168to5169  = 1;
subj to min5169sen5170:  C5169to5170 + fMais5169to5170 - fMenos5169to5170  = 1;
subj to min49619sen49724:  C49619to49724 + fMais49619to49724 - fMenos49619to49724  = 1;
subj to min2292sen9798:  C2292to9798 + fMais2292to9798 - fMenos2292to9798  = 1;
subj to min9799sen168401:  C9799to168401 + fMais9799to168401 - fMenos9799to168401  = 1;
subj to min49724sen49665:  C49724to49665 + fMais49724to49665 - fMenos49724to49665  = 1;
subj to min5170sen5171:  C5170to5171 + fMais5170to5171 - fMenos5170to5171  = 1;
subj to min168401sen9800:  C168401to9800 + fMais168401to9800 - fMenos168401to9800  = 1;
subj to min5171sen4659:  C5171to4659 + fMais5171to4659 - fMenos5171to4659  = 1;
subj to min5307sen163392:  C5307to163392 + fMais5307to163392 - fMenos5307to163392  = 0;
subj to min163392sen5306:  C163392to5306 + fMais163392to5306 - fMenos163392to5306  = 0;
subj to min49665sen124922:  C49665to124922 + fMais49665to124922 - fMenos49665to124922  = 1;
subj to min124922sen146150:  C124922to146150 + fMais124922to146150 - fMenos124922to146150  = 1;
subj to min146150sen125364:  C146150to125364 + fMais146150to125364 - fMenos146150to125364  = 1;
subj to min5306sen5305:  C5306to5305 + fMais5306to5305 - fMenos5306to5305  = 0;
subj to min135077sen69925:  C135077to69925 + fMais135077to69925 - fMenos135077to69925  = 1;
subj to min5312sen40323:  C5312to40323 + fMais5312to40323 - fMenos5312to40323  = 3;
subj to min9826sen9827:  C9826to9827 + fMais9826to9827 - fMenos9826to9827  = 1;
subj to min9843sen9831:  C9843to9831 + fMais9843to9831 - fMenos9843to9831  = 1;
subj to min9831sen9832:  C9831to9832 + fMais9831to9832 - fMenos9831to9832  = 1;
subj to min9835sen9843:  C9835to9843 + fMais9835to9843 - fMenos9835to9843  = 1;
subj to min9832sen9844:  C9832to9844 + fMais9832to9844 - fMenos9832to9844  = 1;
subj to min125364sen49637:  C125364to49637 + fMais125364to49637 - fMenos125364to49637  = 1;
subj to min9844sen9845:  C9844to9845 + fMais9844to9845 - fMenos9844to9845  = 1;
subj to min40323sen163393:  C40323to163393 + fMais40323to163393 - fMenos40323to163393  = 3;
subj to min163393sen5311:  C163393to5311 + fMais163393to5311 - fMenos163393to5311  = 3;
subj to min3514sen9873:  C3514to9873 + fMais3514to9873 - fMenos3514to9873  = 0;
subj to min49637sen49633:  C49637to49633 + fMais49637to49633 - fMenos49637to49633  = 1;
subj to min49633sen10298:  C49633to10298 + fMais49633to10298 - fMenos49633to10298  = 1;
subj to min5311sen40324:  C5311to40324 + fMais5311to40324 - fMenos5311to40324  = 3;
subj to min40324sen5310:  C40324to5310 + fMais40324to5310 - fMenos40324to5310  = 3;
subj to min9873sen9874:  C9873to9874 + fMais9873to9874 - fMenos9873to9874  = 0;
subj to min7836sen7853:  C7836to7853 + fMais7836to7853 - fMenos7836to7853  = 1;
subj to min142501sen142498:  C142501to142498 + fMais142501to142498 - fMenos142501to142498  = 3;
subj to min142498sen142500:  C142498to142500 + fMais142498to142500 - fMenos142498to142500  = 3;
subj to min142500sen142499:  C142500to142499 + fMais142500to142499 - fMenos142500to142499  = 3;
subj to min142499sen142502:  C142499to142502 + fMais142499to142502 - fMenos142499to142502  = 3;
subj to min142502sen142659:  C142502to142659 + fMais142502to142659 - fMenos142502to142659  = 3;
subj to min142659sen3065:  C142659to3065 + fMais142659to3065 - fMenos142659to3065  = 3;
subj to min3065sen355:  C3065to355 + fMais3065to355 - fMenos3065to355  = 3;
subj to min355sen148339:  C355to148339 + fMais355to148339 - fMenos355to148339  = 3;
subj to min148339sen142658:  C148339to142658 + fMais148339to142658 - fMenos148339to142658  = 4;
subj to min142658sen152918:  C142658to152918 + fMais142658to152918 - fMenos142658to152918  = 4;
subj to min9874sen9875:  C9874to9875 + fMais9874to9875 - fMenos9874to9875  = 0;
subj to min5310sen163394:  C5310to163394 + fMais5310to163394 - fMenos5310to163394  = 3;
subj to min152707sen152745:  C152707to152745 + fMais152707to152745 - fMenos152707to152745  = 2;
subj to min163394sen40336:  C163394to40336 + fMais163394to40336 - fMenos163394to40336  = 3;
subj to min9875sen9876:  C9875to9876 + fMais9875to9876 - fMenos9875to9876  = 0;
subj to min9876sen9877:  C9876to9877 + fMais9876to9877 - fMenos9876to9877  = 0;
subj to min9877sen9878:  C9877to9878 + fMais9877to9878 - fMenos9877to9878  = 0;
subj to min9878sen9879:  C9878to9879 + fMais9878to9879 - fMenos9878to9879  = 0;
subj to min9879sen9880:  C9879to9880 + fMais9879to9880 - fMenos9879to9880  = 0;
subj to min9880sen9881:  C9880to9881 + fMais9880to9881 - fMenos9880to9881  = 0;
subj to min9881sen9882:  C9881to9882 + fMais9881to9882 - fMenos9881to9882  = 0;
subj to min8963sen9887:  C8963to9887 + fMais8963to9887 - fMenos8963to9887  = 3;
subj to min9887sen9888:  C9887to9888 + fMais9887to9888 - fMenos9887to9888  = 3;
subj to min152745sen152673:  C152745to152673 + fMais152745to152673 - fMenos152745to152673  = 1;
subj to min25121sen46745:  C25121to46745 + fMais25121to46745 - fMenos25121to46745  = 2;
subj to min46745sen46784:  C46745to46784 + fMais46745to46784 - fMenos46745to46784  = 2;
subj to min46784sen46785:  C46784to46785 + fMais46784to46785 - fMenos46784to46785  = 2;
subj to min46785sen132336:  C46785to132336 + fMais46785to132336 - fMenos46785to132336  = 2;
subj to min132336sen132326:  C132336to132326 + fMais132336to132326 - fMenos132336to132326  = 2;
subj to min132326sen46760:  C132326to46760 + fMais132326to46760 - fMenos132326to46760  = 2;
subj to min46760sen46740:  C46760to46740 + fMais46760to46740 - fMenos46760to46740  = 2;
subj to min46740sen131182:  C46740to131182 + fMais46740to131182 - fMenos46740to131182  = 2;
subj to min9888sen9889:  C9888to9889 + fMais9888to9889 - fMenos9888to9889  = 3;
subj to min9889sen9890:  C9889to9890 + fMais9889to9890 - fMenos9889to9890  = 3;
subj to min152673sen152580:  C152673to152580 + fMais152673to152580 - fMenos152673to152580  = 1;
subj to min131182sen46778:  C131182to46778 + fMais131182to46778 - fMenos131182to46778  = 2;
subj to min9890sen9891:  C9890to9891 + fMais9890to9891 - fMenos9890to9891  = 3;
subj to min9891sen9892:  C9891to9892 + fMais9891to9892 - fMenos9891to9892  = 3;
subj to min9892sen9893:  C9892to9893 + fMais9892to9893 - fMenos9892to9893  = 3;
subj to min40336sen5309:  C40336to5309 + fMais40336to5309 - fMenos40336to5309  = 3;
subj to min46778sen46761:  C46778to46761 + fMais46778to46761 - fMenos46778to46761  = 2;
subj to min46761sen46729:  C46761to46729 + fMais46761to46729 - fMenos46761to46729  = 2;
subj to min8679sen163189:  C8679to163189 + fMais8679to163189 - fMenos8679to163189  = 1;
subj to min163189sen8683:  C163189to8683 + fMais163189to8683 - fMenos163189to8683  = 1;
subj to min8683sen163188:  C8683to163188 + fMais8683to163188 - fMenos8683to163188  = 1;
subj to min163188sen8710:  C163188to8710 + fMais163188to8710 - fMenos163188to8710  = 1;
subj to min152580sen152829:  C152580to152829 + fMais152580to152829 - fMenos152580to152829  = 1;
subj to min8710sen144315:  C8710to144315 + fMais8710to144315 - fMenos8710to144315  = 2;
subj to min9911sen8684:  C9911to8684 + fMais9911to8684 - fMenos9911to8684  = 2;
subj to min8520sen8507:  C8520to8507 + fMais8520to8507 - fMenos8520to8507  = 1;
subj to min10265sen10274:  C10265to10274 + fMais10265to10274 - fMenos10265to10274  = 1;
subj to min10274sen10273:  C10274to10273 + fMais10274to10273 - fMenos10274to10273  = 4;
subj to min5309sen40330:  C5309to40330 + fMais5309to40330 - fMenos5309to40330  = 4;
subj to min46729sen46739:  C46729to46739 + fMais46729to46739 - fMenos46729to46739  = 1;
subj to min46739sen46728:  C46739to46728 + fMais46739to46728 - fMenos46739to46728  = 1;
subj to min10273sen146228:  C10273to146228 + fMais10273to146228 - fMenos10273to146228  = 6;
subj to min131048sen7909:  C131048to7909 + fMais131048to7909 - fMenos131048to7909  = 2;
subj to min2706sen162843:  C2706to162843 + fMais2706to162843 - fMenos2706to162843  = 8;
subj to min162843sen2696:  C162843to2696 + fMais162843to2696 - fMenos162843to2696  = 8;
subj to min7909sen152808:  C7909to152808 + fMais7909to152808 - fMenos7909to152808  = 1;
subj to min48955sen119668:  C48955to119668 + fMais48955to119668 - fMenos48955to119668  = 1;
subj to min119668sen29343:  C119668to29343 + fMais119668to29343 - fMenos119668to29343  = 1;
subj to min152808sen152564:  C152808to152564 + fMais152808to152564 - fMenos152808to152564  = 1;
subj to min46728sen46757:  C46728to46757 + fMais46728to46757 - fMenos46728to46757  = 1;
subj to min152564sen152676:  C152564to152676 + fMais152564to152676 - fMenos152564to152676  = 1;
subj to min46757sen46774:  C46757to46774 + fMais46757to46774 - fMenos46757to46774  = 1;
subj to min163391sen40321:  C163391to40321 + fMais163391to40321 - fMenos163391to40321  = 0;
subj to min152676sen152814:  C152676to152814 + fMais152676to152814 - fMenos152676to152814  = 1;
subj to min40321sen5308:  C40321to5308 + fMais40321to5308 - fMenos40321to5308  = 0;
subj to min5308sen40322:  C5308to40322 + fMais5308to40322 - fMenos5308to40322  = 0;
subj to min40322sen5307:  C40322to5307 + fMais40322to5307 - fMenos40322to5307  = 0;
subj to min46774sen3176:  C46774to3176 + fMais46774to3176 - fMenos46774to3176  = 1;
subj to min3176sen132204:  C3176to132204 + fMais3176to132204 - fMenos3176to132204  = 1;
subj to min132204sen46720:  C132204to46720 + fMais132204to46720 - fMenos132204to46720  = 1;
subj to min46720sen3177:  C46720to3177 + fMais46720to3177 - fMenos46720to3177  = 1;
subj to min152814sen152565:  C152814to152565 + fMais152814to152565 - fMenos152814to152565  = 1;
subj to min10261sen146242:  C10261to146242 + fMais10261to146242 - fMenos10261to146242  = 2;
subj to min5371sen29320:  C5371to29320 + fMais5371to29320 - fMenos5371to29320  = 0;
subj to min146242sen146239:  C146242to146239 + fMais146242to146239 - fMenos146242to146239  = 2;
subj to min146239sen104998:  C146239to104998 + fMais146239to104998 - fMenos146239to104998  = 2;
subj to min104998sen159882:  C104998to159882 + fMais104998to159882 - fMenos104998to159882  = 2;
subj to min10257sen146240:  C10257to146240 + fMais10257to146240 - fMenos10257to146240  = 2;
subj to min146240sen10261:  C146240to10261 + fMais146240to10261 - fMenos146240to10261  = 2;
subj to min14171sen7690:  C14171to7690 + fMais14171to7690 - fMenos14171to7690  = 0;
subj to min7690sen14178:  C7690to14178 + fMais7690to14178 - fMenos7690to14178  = 0;
subj to min10282sen126717:  C10282to126717 + fMais10282to126717 - fMenos10282to126717  = 1;
subj to min126717sen10279:  C126717to10279 + fMais126717to10279 - fMenos126717to10279  = 1;
subj to min152565sen152740:  C152565to152740 + fMais152565to152740 - fMenos152565to152740  = 1;
subj to min152740sen152607:  C152740to152607 + fMais152740to152607 - fMenos152740to152607  = 0;
subj to min152607sen152786:  C152607to152786 + fMais152607to152786 - fMenos152607to152786  = 0;
subj to min10279sen129851:  C10279to129851 + fMais10279to129851 - fMenos10279to129851  = 1;
subj to min152786sen152557:  C152786to152557 + fMais152786to152557 - fMenos152786to152557  = 0;
subj to min129851sen10283:  C129851to10283 + fMais129851to10283 - fMenos129851to10283  = 1;
subj to min3595sen119757:  C3595to119757 + fMais3595to119757 - fMenos3595to119757  = 2;
subj to min119757sen1280:  C119757to1280 + fMais119757to1280 - fMenos119757to1280  = 2;
subj to min1280sen119752:  C1280to119752 + fMais1280to119752 - fMenos1280to119752  = 3;
subj to min119752sen119750:  C119752to119750 + fMais119752to119750 - fMenos119752to119750  = 3;
subj to min119750sen1560:  C119750to1560 + fMais119750to1560 - fMenos119750to1560  = 3;
subj to min1560sen1281:  C1560to1281 + fMais1560to1281 - fMenos1560to1281  = 3;
subj to min1281sen1286:  C1281to1286 + fMais1281to1286 - fMenos1281to1286  = 3;
subj to min1286sen132810:  C1286to132810 + fMais1286to132810 - fMenos1286to132810  = 3;
subj to min132810sen132813:  C132810to132813 + fMais132810to132813 - fMenos132810to132813  = 3;
subj to min10283sen129847:  C10283to129847 + fMais10283to129847 - fMenos10283to129847  = 1;
subj to min129847sen10280:  C129847to10280 + fMais129847to10280 - fMenos129847to10280  = 2;
subj to min10280sen129841:  C10280to129841 + fMais10280to129841 - fMenos10280to129841  = 2;
subj to min129841sen10281:  C129841to10281 + fMais129841to10281 - fMenos129841to10281  = 2;
subj to min10281sen129823:  C10281to129823 + fMais10281to129823 - fMenos10281to129823  = 2;
subj to min122457sen10291:  C122457to10291 + fMais122457to10291 - fMenos122457to10291  = 1;
subj to min10292sen10284:  C10292to10284 + fMais10292to10284 - fMenos10292to10284  = 2;
subj to min152557sen152780:  C152557to152780 + fMais152557to152780 - fMenos152557to152780  = 0;
subj to min152780sen152739:  C152780to152739 + fMais152780to152739 - fMenos152780to152739  = 0;
subj to min152739sen152641:  C152739to152641 + fMais152739to152641 - fMenos152739to152641  = 0;
subj to min152641sen152696:  C152641to152696 + fMais152641to152696 - fMenos152641to152696  = 0;
subj to min152696sen7943:  C152696to7943 + fMais152696to7943 - fMenos152696to7943  = 0;
subj to min7943sen7938:  C7943to7938 + fMais7943to7938 - fMenos7943to7938  = 0;
subj to min122474sen10292:  C122474to10292 + fMais122474to10292 - fMenos122474to10292  = 2;
subj to min3177sen3178:  C3177to3178 + fMais3177to3178 - fMenos3177to3178  = 1;
subj to min10285sen122474:  C10285to122474 + fMais10285to122474 - fMenos10285to122474  = 2;
subj to min5378sen5379:  C5378to5379 + fMais5378to5379 - fMenos5378to5379  = 0;
subj to min10286sen10285:  C10286to10285 + fMais10286to10285 - fMenos10286to10285  = 2;
subj to min152740sen152843:  C152740to152843 + fMais152740to152843 - fMenos152740to152843  = 1;
subj to min152693sen152672:  C152693to152672 + fMais152693to152672 - fMenos152693to152672  = 2;
subj to min152672sen152667:  C152672to152667 + fMais152672to152667 - fMenos152672to152667  = 2;
subj to min152667sen152618:  C152667to152618 + fMais152667to152618 - fMenos152667to152618  = 2;
subj to min152618sen152669:  C152618to152669 + fMais152618to152669 - fMenos152618to152669  = 2;
subj to min152669sen152611:  C152669to152611 + fMais152669to152611 - fMenos152669to152611  = 2;
subj to min152611sen152838:  C152611to152838 + fMais152611to152838 - fMenos152611to152838  = 2;
subj to min5379sen5380:  C5379to5380 + fMais5379to5380 - fMenos5379to5380  = 0;
subj to min5380sen5381:  C5380to5381 + fMais5380to5381 - fMenos5380to5381  = 0;
subj to min5381sen5382:  C5381to5382 + fMais5381to5382 - fMenos5381to5382  = 0;
subj to min5382sen5383:  C5382to5383 + fMais5382to5383 - fMenos5382to5383  = 0;
subj to min170885sen5417:  C170885to5417 + fMais170885to5417 - fMenos170885to5417  = 1;
subj to min170884sen170885:  C170884to170885 + fMais170884to170885 - fMenos170884to170885  = 1;
subj to min43547sen170884:  C43547to170884 + fMais43547to170884 - fMenos43547to170884  = 1;
subj to min152838sen152722:  C152838to152722 + fMais152838to152722 - fMenos152838to152722  = 2;
subj to min126234sen7757:  C126234to7757 + fMais126234to7757 - fMenos126234to7757  = 1;
subj to min7757sen137198:  C7757to137198 + fMais7757to137198 - fMenos7757to137198  = 1;
subj to min170883sen43547:  C170883to43547 + fMais170883to43547 - fMenos170883to43547  = 1;
subj to min43548sen170883:  C43548to170883 + fMais43548to170883 - fMenos43548to170883  = 1;
subj to min5418sen43548:  C5418to43548 + fMais5418to43548 - fMenos5418to43548  = 1;
subj to min152722sen152634:  C152722to152634 + fMais152722to152634 - fMenos152722to152634  = 2;
subj to min10298sen49644:  C10298to49644 + fMais10298to49644 - fMenos10298to49644  = 1;
subj to min120772sen47746:  C120772to47746 + fMais120772to47746 - fMenos120772to47746  = 1;
subj to min49644sen18509:  C49644to18509 + fMais49644to18509 - fMenos49644to18509  = 1;
subj to min165244sen120772:  C165244to120772 + fMais165244to120772 - fMenos165244to120772  = 1;
subj to min18509sen10299:  C18509to10299 + fMais18509to10299 - fMenos18509to10299  = 1;
subj to min152634sen152837:  C152634to152837 + fMais152634to152837 - fMenos152634to152837  = 2;
subj to min10299sen10297:  C10299to10297 + fMais10299to10297 - fMenos10299to10297  = 1;
subj to min72963sen69200:  C72963to69200 + fMais72963to69200 - fMenos72963to69200  = 2;
subj to min146310sen10308:  C146310to10308 + fMais146310to10308 - fMenos146310to10308  = 1;
subj to min170529sen10431:  C170529to10431 + fMais170529to10431 - fMenos170529to10431  = 1;
subj to min10431sen170517:  C10431to170517 + fMais10431to170517 - fMenos10431to170517  = 1;
subj to min170517sen10426:  C170517to10426 + fMais170517to10426 - fMenos170517to10426  = 1;
subj to min2999sen165244:  C2999to165244 + fMais2999to165244 - fMenos2999to165244  = 1;
subj to min10426sen14601:  C10426to14601 + fMais10426to14601 - fMenos10426to14601  = 1;
subj to min6073sen97137:  C6073to97137 + fMais6073to97137 - fMenos6073to97137  = 0;
subj to min97137sen6074:  C97137to6074 + fMais97137to6074 - fMenos97137to6074  = 0;
subj to min6074sen97138:  C6074to97138 + fMais6074to97138 - fMenos6074to97138  = 0;
subj to min97138sen6075:  C97138to6075 + fMais97138to6075 - fMenos97138to6075  = 0;
subj to min6075sen6076:  C6075to6076 + fMais6075to6076 - fMenos6075to6076  = 0;
subj to min6076sen97160:  C6076to97160 + fMais6076to97160 - fMenos6076to97160  = 1;
subj to min97160sen6077:  C97160to6077 + fMais97160to6077 - fMenos97160to6077  = 1;
subj to min152837sen152654:  C152837to152654 + fMais152837to152654 - fMenos152837to152654  = 2;
subj to min6077sen97200:  C6077to97200 + fMais6077to97200 - fMenos6077to97200  = 1;
subj to min10427sen10428:  C10427to10428 + fMais10427to10428 - fMenos10427to10428  = 1;
subj to min1396sen1395:  C1396to1395 + fMais1396to1395 - fMenos1396to1395  = 1;
subj to min14544sen146571:  C14544to146571 + fMais14544to146571 - fMenos14544to146571  = 1;
subj to min1397sen1396:  C1397to1396 + fMais1397to1396 - fMenos1397to1396  = 1;
subj to min138074sen14544:  C138074to14544 + fMais138074to14544 - fMenos138074to14544  = 1;
subj to min10452sen10453:  C10452to10453 + fMais10452to10453 - fMenos10452to10453  = 1;
subj to min10453sen10454:  C10453to10454 + fMais10453to10454 - fMenos10453to10454  = 1;
subj to min10454sen10273:  C10454to10273 + fMais10454to10273 - fMenos10454to10273  = 1;
subj to min146223sen146225:  C146223to146225 + fMais146223to146225 - fMenos146223to146225  = 1;
subj to min146225sen146226:  C146225to146226 + fMais146225to146226 - fMenos146225to146226  = 1;
subj to min138930sen11828:  C138930to11828 + fMais138930to11828 - fMenos138930to11828  = 1;
subj to min152654sen152663:  C152654to152663 + fMais152654to152663 - fMenos152654to152663  = 2;
subj to min97200sen6078:  C97200to6078 + fMais97200to6078 - fMenos97200to6078  = 1;
subj to min6085sen6086:  C6085to6086 + fMais6085to6086 - fMenos6085to6086  = 2;
subj to min152663sen152598:  C152663to152598 + fMais152663to152598 - fMenos152663to152598  = 2;
subj to min152598sen7955:  C152598to7955 + fMais152598to7955 - fMenos152598to7955  = 2;
subj to min7955sen75582:  C7955to75582 + fMais7955to75582 - fMenos7955to75582  = 2;
subj to min6086sen6087:  C6086to6087 + fMais6086to6087 - fMenos6086to6087  = 2;
subj to min6087sen6088:  C6087to6088 + fMais6087to6088 - fMenos6087to6088  = 2;
subj to min69139sen10692:  C69139to10692 + fMais69139to10692 - fMenos69139to10692  = 2;
subj to min7226sen7962:  C7226to7962 + fMais7226to7962 - fMenos7226to7962  = 1;
subj to min14602sen10430:  C14602to10430 + fMais14602to10430 - fMenos14602to10430  = 1;
subj to min3659sen170033:  C3659to170033 + fMais3659to170033 - fMenos3659to170033  = 2;
subj to min167518sen14597:  C167518to14597 + fMais167518to14597 - fMenos167518to14597  = 1;
subj to min170033sen3658:  C170033to3658 + fMais170033to3658 - fMenos170033to3658  = 2;
subj to min2560sen145782:  C2560to145782 + fMais2560to145782 - fMenos2560to145782  = 3;
subj to min145782sen129315:  C145782to129315 + fMais145782to129315 - fMenos145782to129315  = 3;
subj to min14597sen167516:  C14597to167516 + fMais14597to167516 - fMenos14597to167516  = 1;
subj to min129315sen145781:  C129315to145781 + fMais129315to145781 - fMenos129315to145781  = 3;
subj to min167516sen10510:  C167516to10510 + fMais167516to10510 - fMenos167516to10510  = 1;
subj to min10510sen10509:  C10510to10509 + fMais10510to10509 - fMenos10510to10509  = 1;
subj to min10509sen10605:  C10509to10605 + fMais10509to10605 - fMenos10509to10605  = 1;
subj to min10605sen121182:  C10605to121182 + fMais10605to121182 - fMenos10605to121182  = 1;
subj to min121182sen123870:  C121182to123870 + fMais121182to123870 - fMenos121182to123870  = 1;
subj to min3680sen13804:  C3680to13804 + fMais3680to13804 - fMenos3680to13804  = 1;
subj to min123870sen5420:  C123870to5420 + fMais123870to5420 - fMenos123870to5420  = 1;
subj to min5420sen5421:  C5420to5421 + fMais5420to5421 - fMenos5420to5421  = 1;
subj to min5421sen164952:  C5421to164952 + fMais5421to164952 - fMenos5421to164952  = 1;
subj to min164952sen15565:  C164952to15565 + fMais164952to15565 - fMenos164952to15565  = 1;
subj to min121291sen165835:  C121291to165835 + fMais121291to165835 - fMenos121291to165835  = 3;
subj to min6088sen6089:  C6088to6089 + fMais6088to6089 - fMenos6088to6089  = 2;
subj to min165835sen124221:  C165835to124221 + fMais165835to124221 - fMenos165835to124221  = 3;
subj to min6089sen6090:  C6089to6090 + fMais6089to6090 - fMenos6089to6090  = 2;
subj to min124221sen1793:  C124221to1793 + fMais124221to1793 - fMenos124221to1793  = 2;
subj to min10508sen10601:  C10508to10601 + fMais10508to10601 - fMenos10508to10601  = 3;
subj to min10526sen150806:  C10526to150806 + fMais10526to150806 - fMenos10526to150806  = 1;
subj to min150806sen29292:  C150806to29292 + fMais150806to29292 - fMenos150806to29292  = 1;
subj to min13374sen13375:  C13374to13375 + fMais13374to13375 - fMenos13374to13375  = 1;
subj to min13375sen13376:  C13375to13376 + fMais13375to13376 - fMenos13375to13376  = 1;
subj to min7970sen7983:  C7970to7983 + fMais7970to7983 - fMenos7970to7983  = 1;
subj to min13376sen13377:  C13376to13377 + fMais13376to13377 - fMenos13376to13377  = 1;
subj to min7983sen7971:  C7983to7971 + fMais7983to7971 - fMenos7983to7971  = 1;
subj to min13377sen13378:  C13377to13378 + fMais13377to13378 - fMenos13377to13378  = 1;
subj to min8055sen8057:  C8055to8057 + fMais8055to8057 - fMenos8055to8057  = 1;
subj to min8057sen8052:  C8057to8052 + fMais8057to8052 - fMenos8057to8052  = 1;
subj to min8052sen8056:  C8052to8056 + fMais8052to8056 - fMenos8052to8056  = 2;
subj to min10269sen104976:  C10269to104976 + fMais10269to104976 - fMenos10269to104976  = 1;
subj to min8056sen8053:  C8056to8053 + fMais8056to8053 - fMenos8056to8053  = 2;
subj to min13378sen10528:  C13378to10528 + fMais13378to10528 - fMenos13378to10528  = 1;
subj to min10528sen10530:  C10528to10530 + fMais10528to10530 - fMenos10528to10530  = 1;
subj to min130720sen8251:  C130720to8251 + fMais130720to8251 - fMenos130720to8251  = 2;
subj to min104976sen138262:  C104976to138262 + fMais104976to138262 - fMenos104976to138262  = 1;
subj to min8251sen17585:  C8251to17585 + fMais8251to17585 - fMenos8251to17585  = 2;
subj to min17585sen8252:  C17585to8252 + fMais17585to8252 - fMenos17585to8252  = 2;
subj to min10530sen10554:  C10530to10554 + fMais10530to10554 - fMenos10530to10554  = 1;
subj to min10532sen10554:  C10532to10554 + fMais10532to10554 - fMenos10532to10554  = 1;
subj to min10529sen10532:  C10529to10532 + fMais10529to10532 - fMenos10529to10532  = 1;
subj to min10556sen10536:  C10556to10536 + fMais10556to10536 - fMenos10556to10536  = 1;
subj to min10536sen10538:  C10536to10538 + fMais10536to10538 - fMenos10536to10538  = 1;
subj to min10538sen10544:  C10538to10544 + fMais10538to10544 - fMenos10538to10544  = 1;
subj to min10544sen10551:  C10544to10551 + fMais10544to10551 - fMenos10544to10551  = 1;
subj to min3693sen148277:  C3693to148277 + fMais3693to148277 - fMenos3693to148277  = 2;
subj to min10551sen10550:  C10551to10550 + fMais10551to10550 - fMenos10551to10550  = 1;
subj to min132024sen132023:  C132024to132023 + fMais132024to132023 - fMenos132024to132023  = 1;
subj to min132023sen132021:  C132023to132021 + fMais132023to132021 - fMenos132023to132021  = 2;
subj to min132021sen132022:  C132021to132022 + fMais132021to132022 - fMenos132021to132022  = 2;
subj to min120901sen10543:  C120901to10543 + fMais120901to10543 - fMenos120901to10543  = 1;
subj to min49498sen8258:  C49498to8258 + fMais49498to8258 - fMenos49498to8258  = 1;
subj to min11889sen120901:  C11889to120901 + fMais11889to120901 - fMenos11889to120901  = 1;
subj to min2726sen2727:  C2726to2727 + fMais2726to2727 - fMenos2726to2727  = 1;
subj to min3100sen3018:  C3100to3018 + fMais3100to3018 - fMenos3100to3018  = 1;
subj to min3695sen8252:  C3695to8252 + fMais3695to8252 - fMenos3695to8252  = 1;
subj to min69048sen11889:  C69048to11889 + fMais69048to11889 - fMenos69048to11889  = 1;
subj to min69048sen10537:  C69048to10537 + fMais69048to10537 - fMenos69048to10537  = 1;
subj to min10537sen10539:  C10537to10539 + fMais10537to10539 - fMenos10537to10539  = 1;
subj to min8275sen8276:  C8275to8276 + fMais8275to8276 - fMenos8275to8276  = 1;
subj to min10539sen120914:  C10539to120914 + fMais10539to120914 - fMenos10539to120914  = 1;
subj to min8276sen8277:  C8276to8277 + fMais8276to8277 - fMenos8276to8277  = 1;
subj to min8277sen137974:  C8277to137974 + fMais8277to137974 - fMenos8277to137974  = 1;
subj to min137974sen8278:  C137974to8278 + fMais137974to8278 - fMenos137974to8278  = 1;
subj to min8278sen17533:  C8278to17533 + fMais8278to17533 - fMenos8278to17533  = 1;
subj to min14047sen14099:  C14047to14099 + fMais14047to14099 - fMenos14047to14099  = 1;
subj to min120914sen120911:  C120914to120911 + fMais120914to120911 - fMenos120914to120911  = 1;
subj to min120911sen10542:  C120911to10542 + fMais120911to10542 - fMenos120911to10542  = 1;
subj to min8329sen14348:  C8329to14348 + fMais8329to14348 - fMenos8329to14348  = 1;
subj to min10542sen10526:  C10542to10526 + fMais10542to10526 - fMenos10542to10526  = 1;
subj to min10554sen124242:  C10554to124242 + fMais10554to124242 - fMenos10554to124242  = 2;
subj to min124242sen10555:  C124242to10555 + fMais124242to10555 - fMenos124242to10555  = 2;
subj to min10555sen10556:  C10555to10556 + fMais10555to10556 - fMenos10555to10556  = 2;
subj to min93333sen2159:  C93333to2159 + fMais93333to2159 - fMenos93333to2159  = 1;
subj to min93277sen6142:  C93277to6142 + fMais93277to6142 - fMenos93277to6142  = 3;
subj to min26356sen167512:  C26356to167512 + fMais26356to167512 - fMenos26356to167512  = 1;
subj to min3718sen3622:  C3718to3622 + fMais3718to3622 - fMenos3718to3622  = 3;
subj to min2727sen2728:  C2727to2728 + fMais2727to2728 - fMenos2727to2728  = 1;
subj to min162854sen162855:  C162854to162855 + fMais162854to162855 - fMenos162854to162855  = 1;
subj to min166609sen166611:  C166609to166611 + fMais166609to166611 - fMenos166609to166611  = 1;
subj to min166611sen1430:  C166611to1430 + fMais166611to1430 - fMenos166611to1430  = 1;
subj to min1430sen166616:  C1430to166616 + fMais1430to166616 - fMenos1430to166616  = 1;
subj to min166616sen1429:  C166616to1429 + fMais166616to1429 - fMenos166616to1429  = 1;
subj to min1429sen166619:  C1429to166619 + fMais1429to166619 - fMenos1429to166619  = 1;
subj to min166619sen1428:  C166619to1428 + fMais166619to1428 - fMenos166619to1428  = 1;
subj to min1428sen166622:  C1428to166622 + fMais1428to166622 - fMenos1428to166622  = 1;
subj to min166622sen1427:  C166622to1427 + fMais166622to1427 - fMenos166622to1427  = 1;
subj to min1427sen166626:  C1427to166626 + fMais1427to166626 - fMenos1427to166626  = 1;
subj to min167512sen26358:  C167512to26358 + fMais167512to26358 - fMenos167512to26358  = 1;
subj to min26358sen26348:  C26358to26348 + fMais26358to26348 - fMenos26358to26348  = 1;
subj to min26348sen26355:  C26348to26355 + fMais26348to26355 - fMenos26348to26355  = 1;
subj to min26355sen170515:  C26355to170515 + fMais26355to170515 - fMenos26355to170515  = 2;
subj to min10578sen10576:  C10578to10576 + fMais10578to10576 - fMenos10578to10576  = 1;
subj to min10576sen10577:  C10576to10577 + fMais10576to10577 - fMenos10576to10577  = 1;
subj to min10578sen10583:  C10578to10583 + fMais10578to10583 - fMenos10578to10583  = 1;
subj to min10583sen10575:  C10583to10575 + fMais10583to10575 - fMenos10583to10575  = 1;
subj to min1463sen166664:  C1463to166664 + fMais1463to166664 - fMenos1463to166664  = 1;
subj to min166664sen1462:  C166664to1462 + fMais166664to1462 - fMenos166664to1462  = 1;
subj to min1462sen166660:  C1462to166660 + fMais1462to166660 - fMenos1462to166660  = 1;
subj to min166660sen527:  C166660to527 + fMais166660to527 - fMenos166660to527  = 1;
subj to min527sen1461:  C527to1461 + fMais527to1461 - fMenos527to1461  = 1;
subj to min1461sen528:  C1461to528 + fMais1461to528 - fMenos1461to528  = 1;
subj to min162918sen1465:  C162918to1465 + fMais162918to1465 - fMenos162918to1465  = 1;
subj to min10591sen10592:  C10591to10592 + fMais10591to10592 - fMenos10591to10592  = 1;
subj to min10588sen69138:  C10588to69138 + fMais10588to69138 - fMenos10588to69138  = 1;
subj to min121114sen10601:  C121114to10601 + fMais121114to10601 - fMenos121114to10601  = 1;
subj to min69177sen49544:  C69177to49544 + fMais69177to49544 - fMenos69177to49544  = 1;
subj to min49544sen10612:  C49544to10612 + fMais49544to10612 - fMenos49544to10612  = 1;
subj to min10613sen10608:  C10613to10608 + fMais10613to10608 - fMenos10613to10608  = 2;
subj to min10608sen10609:  C10608to10609 + fMais10608to10609 - fMenos10608to10609  = 1;
subj to min10613sen49541:  C10613to49541 + fMais10613to49541 - fMenos10613to49541  = 1;
subj to min14200sen8326:  C14200to8326 + fMais14200to8326 - fMenos14200to8326  = 1;
subj to min49541sen10617:  C49541to10617 + fMais49541to10617 - fMenos49541to10617  = 1;
subj to min8324sen8325:  C8324to8325 + fMais8324to8325 - fMenos8324to8325  = 1;
subj to min8318sen14259:  C8318to14259 + fMais8318to14259 - fMenos8318to14259  = 1;
subj to min14259sen27421:  C14259to27421 + fMais14259to27421 - fMenos14259to27421  = 1;
subj to min14352sen14540:  C14352to14540 + fMais14352to14540 - fMenos14352to14540  = 1;
subj to min14540sen41074:  C14540to41074 + fMais14540to41074 - fMenos14540to41074  = 1;
subj to min41074sen144983:  C41074to144983 + fMais41074to144983 - fMenos41074to144983  = 1;
subj to min144983sen8324:  C144983to8324 + fMais144983to8324 - fMenos144983to8324  = 1;
subj to min8325sen8334:  C8325to8334 + fMais8325to8334 - fMenos8325to8334  = 1;
subj to min144043sen8388:  C144043to8388 + fMais144043to8388 - fMenos144043to8388  = 3;
subj to min8388sen8387:  C8388to8387 + fMais8388to8387 - fMenos8388to8387  = 3;
subj to min8387sen160953:  C8387to160953 + fMais8387to160953 - fMenos8387to160953  = 3;
subj to min132917sen6956:  C132917to6956 + fMais132917to6956 - fMenos132917to6956  = 1;
subj to min160953sen8386:  C160953to8386 + fMais160953to8386 - fMenos160953to8386  = 3;
subj to min3725sen147979:  C3725to147979 + fMais3725to147979 - fMenos3725to147979  = 0;
subj to min162855sen2732:  C162855to2732 + fMais162855to2732 - fMenos162855to2732  = 1;
subj to min147979sen147976:  C147979to147976 + fMais147979to147976 - fMenos147979to147976  = 0;
subj to min2732sen162856:  C2732to162856 + fMais2732to162856 - fMenos2732to162856  = 1;
subj to min6956sen6957:  C6956to6957 + fMais6956to6957 - fMenos6956to6957  = 1;
subj to min162856sen2733:  C162856to2733 + fMais162856to2733 - fMenos162856to2733  = 1;
subj to min6957sen6958:  C6957to6958 + fMais6957to6958 - fMenos6957to6958  = 1;
subj to min2733sen162857:  C2733to162857 + fMais2733to162857 - fMenos2733to162857  = 1;
subj to min6958sen123764:  C6958to123764 + fMais6958to123764 - fMenos6958to123764  = 1;
subj to min162857sen2734:  C162857to2734 + fMais162857to2734 - fMenos162857to2734  = 1;
subj to min147976sen147974:  C147976to147974 + fMais147976to147974 - fMenos147976to147974  = 0;
subj to min8386sen161698:  C8386to161698 + fMais8386to161698 - fMenos8386to161698  = 3;
subj to min161698sen8385:  C161698to8385 + fMais161698to8385 - fMenos161698to8385  = 3;
subj to min123764sen123757:  C123764to123757 + fMais123764to123757 - fMenos123764to123757  = 1;
subj to min123757sen123758:  C123757to123758 + fMais123757to123758 - fMenos123757to123758  = 1;
subj to min10617sen10618:  C10617to10618 + fMais10617to10618 - fMenos10617to10618  = 1;
subj to min147974sen111242:  C147974to111242 + fMais147974to111242 - fMenos147974to111242  = 0;
subj to min8385sen161695:  C8385to161695 + fMais8385to161695 - fMenos8385to161695  = 3;
subj to min161695sen81843:  C161695to81843 + fMais161695to81843 - fMenos161695to81843  = 3;
subj to min2784sen2783:  C2784to2783 + fMais2784to2783 - fMenos2784to2783  = 1;
subj to min132836sen132837:  C132836to132837 + fMais132836to132837 - fMenos132836to132837  = 1;
subj to min132837sen147960:  C132837to147960 + fMais132837to147960 - fMenos132837to147960  = 1;
subj to min147960sen95076:  C147960to95076 + fMais147960to95076 - fMenos147960to95076  = 1;
subj to min127028sen2784:  C127028to2784 + fMais127028to2784 - fMenos127028to2784  = 1;
subj to min2734sen162858:  C2734to162858 + fMais2734to162858 - fMenos2734to162858  = 1;
subj to min162858sen162859:  C162858to162859 + fMais162858to162859 - fMenos162858to162859  = 1;
subj to min95076sen3724:  C95076to3724 + fMais95076to3724 - fMenos95076to3724  = 2;
subj to min13013sen10648:  C13013to10648 + fMais13013to10648 - fMenos13013to10648  = 1;
subj to min3724sen128994:  C3724to128994 + fMais3724to128994 - fMenos3724to128994  = 2;
subj to min128994sen147961:  C128994to147961 + fMais128994to147961 - fMenos128994to147961  = 3;
subj to min10648sen10649:  C10648to10649 + fMais10648to10649 - fMenos10648to10649  = 1;
subj to min123758sen123730:  C123758to123730 + fMais123758to123730 - fMenos123758to123730  = 1;
subj to min123730sen123745:  C123730to123745 + fMais123730to123745 - fMenos123730to123745  = 1;
subj to min123745sen123759:  C123745to123759 + fMais123745to123759 - fMenos123745to123759  = 1;
subj to min10649sen10650:  C10649to10650 + fMais10649to10650 - fMenos10649to10650  = 1;
subj to min10650sen10651:  C10650to10651 + fMais10650to10651 - fMenos10650to10651  = 1;
subj to min10651sen10652:  C10651to10652 + fMais10651to10652 - fMenos10651to10652  = 1;
subj to min10652sen10653:  C10652to10653 + fMais10652to10653 - fMenos10652to10653  = 1;
subj to min10653sen10654:  C10653to10654 + fMais10653to10654 - fMenos10653to10654  = 1;
subj to min81843sen161696:  C81843to161696 + fMais81843to161696 - fMenos81843to161696  = 3;
subj to min161696sen8384:  C161696to8384 + fMais161696to8384 - fMenos161696to8384  = 3;
subj to min8384sen161035:  C8384to161035 + fMais8384to161035 - fMenos8384to161035  = 3;
subj to min134742sen134741:  C134742to134741 + fMais134742to134741 - fMenos134742to134741  = 1;
subj to min134740sen10661:  C134740to10661 + fMais134740to10661 - fMenos134740to10661  = 1;
subj to min10675sen13013:  C10675to13013 + fMais10675to13013 - fMenos10675to13013  = 0;
subj to min1518sen169425:  C1518to169425 + fMais1518to169425 - fMenos1518to169425  = 2;
subj to min169425sen1516:  C169425to1516 + fMais169425to1516 - fMenos169425to1516  = 1;
subj to min12173sen13018:  C12173to13018 + fMais12173to13018 - fMenos12173to13018  = 1;
subj to min123759sen123738:  C123759to123738 + fMais123759to123738 - fMenos123759to123738  = 1;
subj to min10701sen13017:  C10701to13017 + fMais10701to13017 - fMenos10701to13017  = 2;
subj to min3658sen150740:  C3658to150740 + fMais3658to150740 - fMenos3658to150740  = 1;
subj to min150740sen129437:  C150740to129437 + fMais150740to129437 - fMenos150740to129437  = 1;
subj to min10707sen10703:  C10707to10703 + fMais10707to10703 - fMenos10707to10703  = 6;
subj to min161035sen161034:  C161035to161034 + fMais161035to161034 - fMenos161035to161034  = 2;
subj to min10713sen150695:  C10713to150695 + fMais10713to150695 - fMenos10713to150695  = 1;
subj to min150695sen10712:  C150695to10712 + fMais150695to10712 - fMenos150695to10712  = 1;
subj to min10720sen10722:  C10720to10722 + fMais10720to10722 - fMenos10720to10722  = 1;
subj to min10722sen10719:  C10722to10719 + fMais10722to10719 - fMenos10722to10719  = 1;
subj to min8444sen43125:  C8444to43125 + fMais8444to43125 - fMenos8444to43125  = 1;
subj to min123738sen123736:  C123738to123736 + fMais123738to123736 - fMenos123738to123736  = 1;
subj to min123736sen123741:  C123736to123741 + fMais123736to123741 - fMenos123736to123741  = 1;
subj to min43125sen8446:  C43125to8446 + fMais43125to8446 - fMenos43125to8446  = 1;
subj to min8446sen43137:  C8446to43137 + fMais8446to43137 - fMenos8446to43137  = 1;
subj to min43137sen8443:  C43137to8443 + fMais43137to8443 - fMenos43137to8443  = 1;
subj to min151939sen151831:  C151939to151831 + fMais151939to151831 - fMenos151939to151831  = 1;
subj to min151831sen151940:  C151831to151940 + fMais151831to151940 - fMenos151831to151940  = 1;
subj to min151940sen151894:  C151940to151894 + fMais151940to151894 - fMenos151940to151894  = 1;
subj to min151894sen151945:  C151894to151945 + fMais151894to151945 - fMenos151894to151945  = 1;
subj to min151945sen151943:  C151945to151943 + fMais151945to151943 - fMenos151945to151943  = 1;
subj to min151943sen151823:  C151943to151823 + fMais151943to151823 - fMenos151943to151823  = 1;
subj to min10719sen50738:  C10719to50738 + fMais10719to50738 - fMenos10719to50738  = 1;
subj to min50738sen10710:  C50738to10710 + fMais50738to10710 - fMenos50738to10710  = 1;
subj to min10710sen19777:  C10710to19777 + fMais10710to19777 - fMenos10710to19777  = 1;
subj to min151823sen151861:  C151823to151861 + fMais151823to151861 - fMenos151823to151861  = 1;
subj to min19777sen10711:  C19777to10711 + fMais19777to10711 - fMenos19777to10711  = 1;
subj to min10711sen13034:  C10711to13034 + fMais10711to13034 - fMenos10711to13034  = 1;
subj to min10730sen47129:  C10730to47129 + fMais10730to47129 - fMenos10730to47129  = 1;
subj to min2268sen128677:  C2268to128677 + fMais2268to128677 - fMenos2268to128677  = 3;
subj to min1519sen1538:  C1519to1538 + fMais1519to1538 - fMenos1519to1538  = 3;
subj to min47129sen10730:  C47129to10730 + fMais47129to10730 - fMenos47129to10730  = 1;
subj to min47129sen10772:  C47129to10772 + fMais47129to10772 - fMenos47129to10772  = 1;
subj to min109516sen123924:  C109516to123924 + fMais109516to123924 - fMenos109516to123924  = 2;
subj to min10806sen1549:  C10806to1549 + fMais10806to1549 - fMenos10806to1549  = 1;
subj to min1549sen10784:  C1549to10784 + fMais1549to10784 - fMenos1549to10784  = 1;
subj to min1581sen1582:  C1581to1582 + fMais1581to1582 - fMenos1581to1582  = 1;
subj to min1583sen1300:  C1583to1300 + fMais1583to1300 - fMenos1583to1300  = 1;
subj to min151861sen151841:  C151861to151841 + fMais151861to151841 - fMenos151861to151841  = 1;
subj to min151841sen151912:  C151841to151912 + fMais151841to151912 - fMenos151841to151912  = 1;
subj to min151912sen151950:  C151912to151950 + fMais151912to151950 - fMenos151912to151950  = 1;
subj to min123741sen123754:  C123741to123754 + fMais123741to123754 - fMenos123741to123754  = 1;
subj to min123754sen123752:  C123754to123752 + fMais123754to123752 - fMenos123754to123752  = 1;
subj to min151950sen151888:  C151950to151888 + fMais151950to151888 - fMenos151950to151888  = 1;
subj to min151888sen151890:  C151888to151890 + fMais151888to151890 - fMenos151888to151890  = 1;
subj to min123924sen123923:  C123924to123923 + fMais123924to123923 - fMenos123924to123923  = 1;
subj to min123923sen10752:  C123923to10752 + fMais123923to10752 - fMenos123923to10752  = 1;
subj to min10752sen10753:  C10752to10753 + fMais10752to10753 - fMenos10752to10753  = 1;
subj to min10753sen169437:  C10753to169437 + fMais10753to169437 - fMenos10753to169437  = 1;
subj to min10772sen2261:  C10772to2261 + fMais10772to2261 - fMenos10772to2261  = 1;
subj to min10777sen124010:  C10777to124010 + fMais10777to124010 - fMenos10777to124010  = 1;
subj to min124010sen2260:  C124010to2260 + fMais124010to2260 - fMenos124010to2260  = 1;
subj to min2260sen160314:  C2260to160314 + fMais2260to160314 - fMenos2260to160314  = 1;
subj to min160314sen47118:  C160314to47118 + fMais160314to47118 - fMenos160314to47118  = 1;
subj to min162859sen162860:  C162859to162860 + fMais162859to162860 - fMenos162859to162860  = 1;
subj to min123752sen123746:  C123752to123746 + fMais123752to123746 - fMenos123752to123746  = 1;
subj to min2161sen6965:  C2161to6965 + fMais2161to6965 - fMenos2161to6965  = 0;
subj to min6965sen6966:  C6965to6966 + fMais6965to6966 - fMenos6965to6966  = 0;
subj to min6966sen6967:  C6966to6967 + fMais6966to6967 - fMenos6966to6967  = 0;
subj to min6967sen6968:  C6967to6968 + fMais6967to6968 - fMenos6967to6968  = 0;
subj to min47118sen2273:  C47118to2273 + fMais47118to2273 - fMenos47118to2273  = 1;
subj to min6968sen6969:  C6968to6969 + fMais6968to6969 - fMenos6968to6969  = 0;
subj to min6969sen45206:  C6969to45206 + fMais6969to45206 - fMenos6969to45206  = 0;
subj to min45206sen76003:  C45206to76003 + fMais45206to76003 - fMenos45206to76003  = 0;
subj to min171275sen6976:  C171275to6976 + fMais171275to6976 - fMenos171275to6976  = 1;
subj to min2273sen10775:  C2273to10775 + fMais2273to10775 - fMenos2273to10775  = 1;
subj to min6980sen75983:  C6980to75983 + fMais6980to75983 - fMenos6980to75983  = 3;
subj to min132910sen6983:  C132910to6983 + fMais132910to6983 - fMenos132910to6983  = 2;
subj to min162860sen2735:  C162860to2735 + fMais162860to2735 - fMenos162860to2735  = 1;
subj to min122005sen3717:  C122005to3717 + fMais122005to3717 - fMenos122005to3717  = 1;
subj to min10775sen123941:  C10775to123941 + fMais10775to123941 - fMenos10775to123941  = 1;
subj to min6983sen163633:  C6983to163633 + fMais6983to163633 - fMenos6983to163633  = 2;
subj to min46844sen10794:  C46844to10794 + fMais46844to10794 - fMenos46844to10794  = 2;
subj to min10794sen10795:  C10794to10795 + fMais10794to10795 - fMenos10794to10795  = 3;
subj to min10730sen10777:  C10730to10777 + fMais10730to10777 - fMenos10730to10777  = 1;
subj to min10788sen163612:  C10788to163612 + fMais10788to163612 - fMenos10788to163612  = 1;
subj to min163612sen10806:  C163612to10806 + fMais163612to10806 - fMenos163612to10806  = 1;
subj to min152255sen152412:  C152255to152412 + fMais152255to152412 - fMenos152255to152412  = 2;
subj to min152412sen127817:  C152412to127817 + fMais152412to127817 - fMenos152412to127817  = 2;
subj to min127817sen152378:  C127817to152378 + fMais127817to152378 - fMenos127817to152378  = 2;
subj to min152378sen10828:  C152378to10828 + fMais152378to10828 - fMenos152378to10828  = 2;
subj to min10828sen152179:  C10828to152179 + fMais10828to152179 - fMenos10828to152179  = 2;
subj to min152179sen152449:  C152179to152449 + fMais152179to152449 - fMenos152179to152449  = 2;
subj to min152449sen152472:  C152449to152472 + fMais152449to152472 - fMenos152449to152472  = 2;
subj to min145147sen45684:  C145147to45684 + fMais145147to45684 - fMenos145147to45684  = 3;
subj to min45684sen45699:  C45684to45699 + fMais45684to45699 - fMenos45684to45699  = 2;
subj to min45699sen45680:  C45699to45680 + fMais45699to45680 - fMenos45699to45680  = 2;
subj to min24985sen24986:  C24985to24986 + fMais24985to24986 - fMenos24985to24986  = 2;
subj to min24986sen122486:  C24986to122486 + fMais24986to122486 - fMenos24986to122486  = 2;
subj to min149863sen150034:  C149863to150034 + fMais149863to150034 - fMenos149863to150034  = 1;
subj to min150022sen10879:  C150022to10879 + fMais150022to10879 - fMenos150022to10879  = 0;
subj to min2735sen162861:  C2735to162861 + fMais2735to162861 - fMenos2735to162861  = 1;
subj to min10885sen149730:  C10885to149730 + fMais10885to149730 - fMenos10885to149730  = 1;
subj to min149730sen149579:  C149730to149579 + fMais149730to149579 - fMenos149730to149579  = 1;
subj to min163633sen76011:  C163633to76011 + fMais163633to76011 - fMenos163633to76011  = 2;
subj to min149579sen122515:  C149579to122515 + fMais149579to122515 - fMenos149579to122515  = 1;
subj to min122515sen149632:  C122515to149632 + fMais122515to149632 - fMenos122515to149632  = 1;
subj to min149554sen149735:  C149554to149735 + fMais149554to149735 - fMenos149554to149735  = 0;
subj to min1681sen1682:  C1681to1682 + fMais1681to1682 - fMenos1681to1682  = 2;
subj to min1682sen1683:  C1682to1683 + fMais1682to1683 - fMenos1682to1683  = 2;
subj to min149735sen10887:  C149735to10887 + fMais149735to10887 - fMenos149735to10887  = 0;
subj to min10887sen149578:  C10887to149578 + fMais10887to149578 - fMenos10887to149578  = 0;
subj to min1696sen1670:  C1696to1670 + fMais1696to1670 - fMenos1696to1670  = 2;
subj to min1670sen1696:  C1670to1696 + fMais1670to1696 - fMenos1670to1696  = 1;
subj to min149578sen149700:  C149578to149700 + fMais149578to149700 - fMenos149578to149700  = 0;
subj to min149700sen10888:  C149700to10888 + fMais149700to10888 - fMenos149700to10888  = 0;
subj to min10888sen149630:  C10888to149630 + fMais10888to149630 - fMenos10888to149630  = 0;
subj to min119703sen119712:  C119703to119712 + fMais119703to119712 - fMenos119703to119712  = 2;
subj to min119712sen119715:  C119712to119715 + fMais119712to119715 - fMenos119712to119715  = 2;
subj to min119715sen119716:  C119715to119716 + fMais119715to119716 - fMenos119715to119716  = 2;
subj to min119716sen119714:  C119716to119714 + fMais119716to119714 - fMenos119716to119714  = 2;
subj to min119714sen119710:  C119714to119710 + fMais119714to119710 - fMenos119714to119710  = 2;
subj to min119710sen119706:  C119710to119706 + fMais119710to119706 - fMenos119710to119706  = 2;
subj to min119706sen163481:  C119706to163481 + fMais119706to163481 - fMenos119706to163481  = 2;
subj to min163481sen119700:  C163481to119700 + fMais163481to119700 - fMenos163481to119700  = 2;
subj to min149630sen149568:  C149630to149568 + fMais149630to149568 - fMenos149630to149568  = 0;
subj to min149568sen149691:  C149568to149691 + fMais149568to149691 - fMenos149568to149691  = 0;
subj to min149691sen149827:  C149691to149827 + fMais149691to149827 - fMenos149691to149827  = 0;
subj to min149827sen150075:  C149827to150075 + fMais149827to150075 - fMenos149827to150075  = 0;
subj to min119694sen119693:  C119694to119693 + fMais119694to119693 - fMenos119694to119693  = 1;
subj to min2180sen149646:  C2180to149646 + fMais2180to149646 - fMenos2180to149646  = 1;
subj to min149646sen149948:  C149646to149948 + fMais149646to149948 - fMenos149646to149948  = 2;
subj to min129004sen144609:  C129004to144609 + fMais129004to144609 - fMenos129004to144609  = 1;
subj to min144609sen129005:  C144609to129005 + fMais144609to129005 - fMenos144609to129005  = 1;
subj to min129005sen129326:  C129005to129326 + fMais129005to129326 - fMenos129005to129326  = 2;
subj to min129326sen129337:  C129326to129337 + fMais129326to129337 - fMenos129326to129337  = 2;
subj to min129006sen129004:  C129006to129004 + fMais129006to129004 - fMenos129006to129004  = 1;
subj to min76011sen6974:  C76011to6974 + fMais76011to6974 - fMenos76011to6974  = 2;
subj to min1871sen156675:  C1871to156675 + fMais1871to156675 - fMenos1871to156675  = 1;
subj to min156675sen1872:  C156675to1872 + fMais156675to1872 - fMenos156675to1872  = 1;
subj to min1872sen1873:  C1872to1873 + fMais1872to1873 - fMenos1872to1873  = 1;
subj to min1873sen156666:  C1873to156666 + fMais1873to156666 - fMenos1873to156666  = 1;
subj to min156666sen1874:  C156666to1874 + fMais156666to1874 - fMenos156666to1874  = 1;
subj to min19249sen18916:  C19249to18916 + fMais19249to18916 - fMenos19249to18916  = 1;
subj to min18916sen19252:  C18916to19252 + fMais18916to19252 - fMenos18916to19252  = 2;
subj to min149617sen149848:  C149617to149848 + fMais149617to149848 - fMenos149617to149848  = 0;
subj to min19252sen29400:  C19252to29400 + fMais19252to29400 - fMenos19252to29400  = 1;
subj to min11033sen18752:  C11033to18752 + fMais11033to18752 - fMenos11033to18752  = 0;
subj to min18752sen11032:  C18752to11032 + fMais18752to11032 - fMenos18752to11032  = 0;
subj to min1878sen1879:  C1878to1879 + fMais1878to1879 - fMenos1878to1879  = 1;
subj to min3465sen3550:  C3465to3550 + fMais3465to3550 - fMenos3465to3550  = 2;
subj to min3550sen122723:  C3550to122723 + fMais3550to122723 - fMenos3550to122723  = 2;
subj to min122723sen2328:  C122723to2328 + fMais122723to2328 - fMenos122723to2328  = 2;
subj to min11039sen11038:  C11039to11038 + fMais11039to11038 - fMenos11039to11038  = 2;
subj to min11038sen11037:  C11038to11037 + fMais11038to11037 - fMenos11038to11037  = 2;
subj to min11037sen138722:  C11037to138722 + fMais11037to138722 - fMenos11037to138722  = 2;
subj to min138722sen11036:  C138722to11036 + fMais138722to11036 - fMenos138722to11036  = 2;
subj to min150051sen149868:  C150051to149868 + fMais150051to149868 - fMenos150051to149868  = 1;
subj to min149868sen149866:  C149868to149866 + fMais149868to149866 - fMenos149868to149866  = 1;
subj to min149866sen149809:  C149866to149809 + fMais149866to149809 - fMenos149866to149809  = 1;
subj to min11036sen11035:  C11036to11035 + fMais11036to11035 - fMenos11036to11035  = 2;
subj to min11035sen169418:  C11035to169418 + fMais11035to169418 - fMenos11035to169418  = 2;
subj to min2199sen2244:  C2199to2244 + fMais2199to2244 - fMenos2199to2244  = 2;
subj to min2244sen2245:  C2244to2245 + fMais2244to2245 - fMenos2244to2245  = 2;
subj to min2245sen2246:  C2245to2246 + fMais2245to2246 - fMenos2245to2246  = 2;
subj to min2246sen2257:  C2246to2257 + fMais2246to2257 - fMenos2246to2257  = 2;
subj to min169418sen11034:  C169418to11034 + fMais169418to11034 - fMenos169418to11034  = 2;
subj to min2257sen122449:  C2257to122449 + fMais2257to122449 - fMenos2257to122449  = 1;
subj to min122449sen13498:  C122449to13498 + fMais122449to13498 - fMenos122449to13498  = 1;
subj to min11034sen169749:  C11034to169749 + fMais11034to169749 - fMenos11034to169749  = 2;
subj to min11045sen11065:  C11045to11065 + fMais11045to11065 - fMenos11045to11065  = 1;
subj to min19252sen19253:  C19252to19253 + fMais19252to19253 - fMenos19252to19253  = 2;
subj to min13044sen2267:  C13044to2267 + fMais13044to2267 - fMenos13044to2267  = 1;
subj to min2267sen2268:  C2267to2268 + fMais2267to2268 - fMenos2267to2268  = 1;
subj to min2268sen10780:  C2268to10780 + fMais2268to10780 - fMenos2268to10780  = 1;
subj to min10780sen2269:  C10780to2269 + fMais10780to2269 - fMenos10780to2269  = 1;
subj to min2269sen2270:  C2269to2270 + fMais2269to2270 - fMenos2269to2270  = 1;
subj to min2270sen2271:  C2270to2271 + fMais2270to2271 - fMenos2270to2271  = 1;
subj to min2277sen13493:  C2277to13493 + fMais2277to13493 - fMenos2277to13493  = 1;
subj to min19253sen1355:  C19253to1355 + fMais19253to1355 - fMenos19253to1355  = 2;
subj to min11064sen11335:  C11064to11335 + fMais11064to11335 - fMenos11064to11335  = 1;
subj to min11335sen11044:  C11335to11044 + fMais11335to11044 - fMenos11335to11044  = 1;
subj to min11044sen11045:  C11044to11045 + fMais11044to11045 - fMenos11044to11045  = 1;
subj to min11117sen121856:  C11117to121856 + fMais11117to121856 - fMenos11117to121856  = 4;
subj to min11069sen11070:  C11069to11070 + fMais11069to11070 - fMenos11069to11070  = 1;
subj to min11081sen11099:  C11081to11099 + fMais11081to11099 - fMenos11081to11099  = 1;
subj to min11096sen11083:  C11096to11083 + fMais11096to11083 - fMenos11096to11083  = 1;
subj to min11083sen11084:  C11083to11084 + fMais11083to11084 - fMenos11083to11084  = 1;
subj to min11097sen142878:  C11097to142878 + fMais11097to142878 - fMenos11097to142878  = 1;
subj to min11100sen18737:  C11100to18737 + fMais11100to18737 - fMenos11100to18737  = 1;
subj to min18737sen18739:  C18737to18739 + fMais18737to18739 - fMenos18737to18739  = 1;
subj to min18739sen18723:  C18739to18723 + fMais18739to18723 - fMenos18739to18723  = 1;
subj to min18723sen18727:  C18723to18727 + fMais18723to18727 - fMenos18723to18727  = 1;
subj to min18727sen18751:  C18727to18751 + fMais18727to18751 - fMenos18727to18751  = 1;
subj to min18751sen122173:  C18751to122173 + fMais18751to122173 - fMenos18751to122173  = 1;
subj to min122173sen122169:  C122173to122169 + fMais122173to122169 - fMenos122173to122169  = 1;
subj to min122169sen122166:  C122169to122166 + fMais122169to122166 - fMenos122169to122166  = 1;
subj to min122166sen122158:  C122166to122158 + fMais122166to122158 - fMenos122166to122158  = 1;
subj to min122158sen11099:  C122158to11099 + fMais122158to11099 - fMenos122158to11099  = 1;
subj to min11295sen33547:  C11295to33547 + fMais11295to33547 - fMenos11295to33547  = 1;
subj to min33547sen11063:  C33547to11063 + fMais33547to11063 - fMenos33547to11063  = 1;
subj to min2664sen116175:  C2664to116175 + fMais2664to116175 - fMenos2664to116175  = 4;
subj to min116175sen116172:  C116175to116172 + fMais116175to116172 - fMenos116175to116172  = 3;
subj to min19692sen163253:  C19692to163253 + fMais19692to163253 - fMenos19692to163253  = 3;
subj to min163253sen11139:  C163253to11139 + fMais163253to11139 - fMenos163253to11139  = 2;
subj to min11142sen18782:  C11142to18782 + fMais11142to18782 - fMenos11142to18782  = 4;
subj to min18782sen18784:  C18782to18784 + fMais18782to18784 - fMenos18782to18784  = 4;
subj to min11147sen11148:  C11147to11148 + fMais11147to11148 - fMenos11147to11148  = 2;
subj to min11169sen18946:  C11169to18946 + fMais11169to18946 - fMenos11169to18946  = 4;
subj to min18946sen11170:  C18946to11170 + fMais18946to11170 - fMenos18946to11170  = 3;
subj to min6974sen76013:  C6974to76013 + fMais6974to76013 - fMenos6974to76013  = 2;
subj to min11170sen122348:  C11170to122348 + fMais11170to122348 - fMenos11170to122348  = 3;
subj to min122348sen18888:  C122348to18888 + fMais122348to18888 - fMenos122348to18888  = 3;
subj to min18888sen18930:  C18888to18930 + fMais18888to18930 - fMenos18888to18930  = 2;
subj to min138965sen11249:  C138965to11249 + fMais138965to11249 - fMenos138965to11249  = 3;
subj to min50632sen158417:  C50632to158417 + fMais50632to158417 - fMenos50632to158417  = 1;
subj to min18867sen122275:  C18867to122275 + fMais18867to122275 - fMenos18867to122275  = 0;
subj to min76013sen132913:  C76013to132913 + fMais76013to132913 - fMenos76013to132913  = 2;
subj to min2374sen2382:  C2374to2382 + fMais2374to2382 - fMenos2374to2382  = 1;
subj to min2382sen2383:  C2382to2383 + fMais2382to2383 - fMenos2382to2383  = 2;
subj to min2383sen2384:  C2383to2384 + fMais2383to2384 - fMenos2383to2384  = 2;
subj to min2384sen2385:  C2384to2385 + fMais2384to2385 - fMenos2384to2385  = 3;
subj to min2385sen241:  C2385to241 + fMais2385to241 - fMenos2385to241  = 2;
subj to min2396sen2397:  C2396to2397 + fMais2396to2397 - fMenos2396to2397  = 1;
subj to min2397sen2398:  C2397to2398 + fMais2397to2398 - fMenos2397to2398  = 1;
subj to min2398sen2399:  C2398to2399 + fMais2398to2399 - fMenos2398to2399  = 1;
subj to min2399sen2400:  C2399to2400 + fMais2399to2400 - fMenos2399to2400  = 1;
subj to min2400sen2401:  C2400to2401 + fMais2400to2401 - fMenos2400to2401  = 1;
subj to min2401sen148362:  C2401to148362 + fMais2401to148362 - fMenos2401to148362  = 0;
subj to min122275sen11110:  C122275to11110 + fMais122275to11110 - fMenos122275to11110  = 0;
subj to min11208sen18857:  C11208to18857 + fMais11208to18857 - fMenos11208to18857  = 1;
subj to min11220sen11221:  C11220to11221 + fMais11220to11221 - fMenos11220to11221  = 1;
subj to min2408sen2407:  C2408to2407 + fMais2408to2407 - fMenos2408to2407  = 1;
subj to min11221sen11228:  C11221to11228 + fMais11221to11228 - fMenos11221to11228  = 2;
subj to min11228sen69231:  C11228to69231 + fMais11228to69231 - fMenos11228to69231  = 1;
subj to min11228sen11229:  C11228to11229 + fMais11228to11229 - fMenos11228to11229  = 1;
subj to min11235sen11236:  C11235to11236 + fMais11235to11236 - fMenos11235to11236  = 2;
subj to min132913sen6975:  C132913to6975 + fMais132913to6975 - fMenos132913to6975  = 1;
subj to min6975sen171275:  C6975to171275 + fMais6975to171275 - fMenos6975to171275  = 1;
subj to min5487sen7033:  C5487to7033 + fMais5487to7033 - fMenos5487to7033  = 1;
subj to min7033sen7025:  C7033to7025 + fMais7033to7025 - fMenos7033to7025  = 1;
subj to min7040sen7039:  C7040to7039 + fMais7040to7039 - fMenos7040to7039  = 1;
subj to min7039sen7046:  C7039to7046 + fMais7039to7046 - fMenos7039to7046  = 1;
subj to min11236sen11237:  C11236to11237 + fMais11236to11237 - fMenos11236to11237  = 2;
subj to min11237sen11239:  C11237to11239 + fMais11237to11239 - fMenos11237to11239  = 2;
subj to min48947sen11248:  C48947to11248 + fMais48947to11248 - fMenos48947to11248  = 1;
subj to min11248sen18754:  C11248to18754 + fMais11248to18754 - fMenos11248to18754  = 1;
subj to min18754sen11247:  C18754to11247 + fMais18754to11247 - fMenos18754to11247  = 2;
subj to min11247sen11246:  C11247to11246 + fMais11247to11246 - fMenos11247to11246  = 2;
subj to min11246sen11251:  C11246to11251 + fMais11246to11251 - fMenos11246to11251  = 2;
subj to min127179sen3745:  C127179to3745 + fMais127179to3745 - fMenos127179to3745  = 1;
subj to min3745sen159457:  C3745to159457 + fMais3745to159457 - fMenos3745to159457  = 1;
subj to min159457sen159456:  C159457to159456 + fMais159457to159456 - fMenos159457to159456  = 1;
subj to min11244sen158424:  C11244to158424 + fMais11244to158424 - fMenos11244to158424  = 2;
subj to min3807sen3808:  C3807to3808 + fMais3807to3808 - fMenos3807to3808  = 0;
subj to min158424sen11201:  C158424to11201 + fMais158424to11201 - fMenos158424to11201  = 2;
subj to min11253sen169647:  C11253to169647 + fMais11253to169647 - fMenos11253to169647  = 1;
subj to min11254sen11255:  C11254to11255 + fMais11254to11255 - fMenos11254to11255  = 1;
subj to min11255sen169646:  C11255to169646 + fMais11255to169646 - fMenos11255to169646  = 1;
subj to min8402sen8403:  C8402to8403 + fMais8402to8403 - fMenos8402to8403  = 0;
subj to min8403sen8404:  C8403to8404 + fMais8403to8404 - fMenos8403to8404  = 0;
subj to min8404sen8405:  C8404to8405 + fMais8404to8405 - fMenos8404to8405  = 0;
subj to min8405sen8406:  C8405to8406 + fMais8405to8406 - fMenos8405to8406  = 0;
subj to min169646sen11256:  C169646to11256 + fMais169646to11256 - fMenos169646to11256  = 1;
subj to min11256sen11262:  C11256to11262 + fMais11256to11262 - fMenos11256to11262  = 1;
subj to min11262sen169737:  C11262to169737 + fMais11262to169737 - fMenos11262to169737  = 1;
subj to min169737sen11263:  C169737to11263 + fMais169737to11263 - fMenos169737to11263  = 1;
subj to min11263sen169736:  C11263to169736 + fMais11263to169736 - fMenos11263to169736  = 1;
subj to min169736sen11264:  C169736to11264 + fMais169736to11264 - fMenos169736to11264  = 1;
subj to min11264sen11265:  C11264to11265 + fMais11264to11265 - fMenos11264to11265  = 1;
subj to min11065sen33339:  C11065to33339 + fMais11065to33339 - fMenos11065to33339  = 2;
subj to min33339sen11295:  C33339to11295 + fMais33339to11295 - fMenos33339to11295  = 3;
subj to min11299sen11300:  C11299to11300 + fMais11299to11300 - fMenos11299to11300  = 3;
subj to min11300sen11301:  C11300to11301 + fMais11300to11301 - fMenos11300to11301  = 3;
subj to min11301sen122084:  C11301to122084 + fMais11301to122084 - fMenos11301to122084  = 3;
subj to min122084sen11302:  C122084to11302 + fMais122084to11302 - fMenos122084to11302  = 3;
subj to min11302sen11303:  C11302to11303 + fMais11302to11303 - fMenos11302to11303  = 4;
subj to min11303sen127506:  C11303to127506 + fMais11303to127506 - fMenos11303to127506  = 4;
subj to min127506sen11304:  C127506to11304 + fMais127506to11304 - fMenos127506to11304  = 4;
subj to min11304sen11305:  C11304to11305 + fMais11304to11305 - fMenos11304to11305  = 4;
subj to min11309sen11310:  C11309to11310 + fMais11309to11310 - fMenos11309to11310  = 1;
subj to min11317sen11318:  C11317to11318 + fMais11317to11318 - fMenos11317to11318  = 4;
subj to min11318sen11319:  C11318to11319 + fMais11318to11319 - fMenos11318to11319  = 4;
subj to min11319sen11320:  C11319to11320 + fMais11319to11320 - fMenos11319to11320  = 4;
subj to min11320sen11321:  C11320to11321 + fMais11320to11321 - fMenos11320to11321  = 4;
subj to min94076sen171425:  C94076to171425 + fMais94076to171425 - fMenos94076to171425  = 0;
subj to min171425sen28818:  C171425to28818 + fMais171425to28818 - fMenos171425to28818  = 0;
subj to min28818sen94092:  C28818to94092 + fMais28818to94092 - fMenos28818to94092  = 0;
subj to min8399sen8400:  C8399to8400 + fMais8399to8400 - fMenos8399to8400  = 0;
subj to min8400sen8401:  C8400to8401 + fMais8400to8401 - fMenos8400to8401  = 0;
subj to min11321sen11322:  C11321to11322 + fMais11321to11322 - fMenos11321to11322  = 5;
subj to min3808sen3809:  C3808to3809 + fMais3808to3809 - fMenos3808to3809  = 0;
subj to min79823sen7139:  C79823to7139 + fMais79823to7139 - fMenos79823to7139  = 1;
subj to min11322sen11323:  C11322to11323 + fMais11322to11323 - fMenos11322to11323  = 5;
subj to min8302sen8304:  C8302to8304 + fMais8302to8304 - fMenos8302to8304  = 1;
subj to min11323sen11324:  C11323to11324 + fMais11323to11324 - fMenos11323to11324  = 5;
subj to min8304sen8303:  C8304to8303 + fMais8304to8303 - fMenos8304to8303  = 1;
subj to min11324sen169573:  C11324to169573 + fMais11324to169573 - fMenos11324to169573  = 4;
subj to min3809sen49621:  C3809to49621 + fMais3809to49621 - fMenos3809to49621  = 0;
subj to min8303sen13317:  C8303to13317 + fMais8303to13317 - fMenos8303to13317  = 1;
subj to min8401sen8537:  C8401to8537 + fMais8401to8537 - fMenos8401to8537  = 0;
subj to min8537sen8402:  C8537to8402 + fMais8537to8402 - fMenos8537to8402  = 0;
subj to min169573sen11325:  C169573to11325 + fMais169573to11325 - fMenos169573to11325  = 3;
subj to min11325sen11326:  C11325to11326 + fMais11325to11326 - fMenos11325to11326  = 0;
subj to min166671sen166673:  C166671to166673 + fMais166671to166673 - fMenos166671to166673  = 1;
subj to min166673sen2642:  C166673to2642 + fMais166673to2642 - fMenos166673to2642  = 1;
subj to min2642sen2641:  C2642to2641 + fMais2642to2641 - fMenos2642to2641  = 1;
subj to min13317sen138945:  C13317to138945 + fMais13317to138945 - fMenos13317to138945  = 1;
subj to min25376sen25367:  C25376to25367 + fMais25376to25367 - fMenos25376to25367  = 0;
subj to min25367sen8413:  C25367to8413 + fMais25367to8413 - fMenos25367to8413  = 0;
subj to min13916sen45696:  C13916to45696 + fMais13916to45696 - fMenos13916to45696  = 5;
subj to min45696sen130297:  C45696to130297 + fMais45696to130297 - fMenos45696to130297  = 5;
subj to min130297sen45687:  C130297to45687 + fMais130297to45687 - fMenos130297to45687  = 5;
subj to min45687sen45682:  C45687to45682 + fMais45687to45682 - fMenos45687to45682  = 5;
subj to min45682sen45688:  C45682to45688 + fMais45682to45688 - fMenos45682to45688  = 4;
subj to min8413sen8399:  C8413to8399 + fMais8413to8399 - fMenos8413to8399  = 0;
subj to min4163sen153753:  C4163to153753 + fMais4163to153753 - fMenos4163to153753  = 1;
subj to min153753sen8600:  C153753to8600 + fMais153753to8600 - fMenos153753to8600  = 1;
subj to min11326sen169568:  C11326to169568 + fMais11326to169568 - fMenos11326to169568  = 0;
subj to min169568sen11327:  C169568to11327 + fMais169568to11327 - fMenos169568to11327  = 0;
subj to min123340sen123334:  C123340to123334 + fMais123340to123334 - fMenos123340to123334  = 1;
subj to min123334sen18470:  C123334to18470 + fMais123334to18470 - fMenos123334to18470  = 1;
subj to min18470sen5314:  C18470to5314 + fMais18470to5314 - fMenos18470to5314  = 1;
subj to min5314sen18471:  C5314to18471 + fMais5314to18471 - fMenos5314to18471  = 1;
subj to min8600sen153742:  C8600to153742 + fMais8600to153742 - fMenos8600to153742  = 1;
subj to min153742sen153740:  C153742to153740 + fMais153742to153740 - fMenos153742to153740  = 1;
subj to min153740sen8601:  C153740to8601 + fMais153740to8601 - fMenos153740to8601  = 1;
subj to min8601sen153580:  C8601to153580 + fMais8601to153580 - fMenos8601to153580  = 1;
subj to min153580sen8602:  C153580to8602 + fMais153580to8602 - fMenos153580to8602  = 1;
subj to min18471sen5315:  C18471to5315 + fMais18471to5315 - fMenos18471to5315  = 1;
subj to min5315sen41116:  C5315to41116 + fMais5315to41116 - fMenos5315to41116  = 1;
subj to min41116sen7103:  C41116to7103 + fMais41116to7103 - fMenos41116to7103  = 1;
subj to min7103sen41115:  C7103to41115 + fMais7103to41115 - fMenos7103to41115  = 0;
subj to min69205sen1633:  C69205to1633 + fMais69205to1633 - fMenos69205to1633  = 2;
subj to min1633sen1632:  C1633to1632 + fMais1633to1632 - fMenos1633to1632  = 2;
subj to min11325sen169572:  C11325to169572 + fMais11325to169572 - fMenos11325to169572  = 3;
subj to min169572sen122163:  C169572to122163 + fMais169572to122163 - fMenos169572to122163  = 2;
subj to min169571sen11328:  C169571to11328 + fMais169571to11328 - fMenos169571to11328  = 1;
subj to min41115sen7104:  C41115to7104 + fMais41115to7104 - fMenos41115to7104  = 0;
subj to min7104sen7105:  C7104to7105 + fMais7104to7105 - fMenos7104to7105  = 0;
subj to min45688sen45693:  C45688to45693 + fMais45688to45693 - fMenos45688to45693  = 3;
subj to min8486sen8485:  C8486to8485 + fMais8486to8485 - fMenos8486to8485  = 1;
subj to min7105sen41122:  C7105to41122 + fMais7105to41122 - fMenos7105to41122  = 0;
subj to min7109sen41130:  C7109to41130 + fMais7109to41130 - fMenos7109to41130  = 0;
subj to min41130sen18694:  C41130to18694 + fMais41130to18694 - fMenos41130to18694  = 0;
subj to min18694sen18695:  C18694to18695 + fMais18694to18695 - fMenos18694to18695  = 0;
subj to min8485sen168904:  C8485to168904 + fMais8485to168904 - fMenos8485to168904  = 1;
subj to min11379sen97149:  C11379to97149 + fMais11379to97149 - fMenos11379to97149  = 2;
subj to min97149sen11380:  C97149to11380 + fMais97149to11380 - fMenos97149to11380  = 2;
subj to min1912sen11404:  C1912to11404 + fMais1912to11404 - fMenos1912to11404  = 1;
subj to min11404sen11405:  C11404to11405 + fMais11404to11405 - fMenos11404to11405  = 1;
subj to min2641sen2640:  C2641to2640 + fMais2641to2640 - fMenos2641to2640  = 1;
subj to min11501sen11500:  C11501to11500 + fMais11501to11500 - fMenos11501to11500  = 1;
subj to min171269sen5413:  C171269to5413 + fMais171269to5413 - fMenos171269to5413  = 2;
subj to min45693sen45690:  C45693to45690 + fMais45693to45690 - fMenos45693to45690  = 3;
subj to min25296sen11558:  C25296to11558 + fMais25296to11558 - fMenos25296to11558  = 1;
subj to min2640sen150217:  C2640to150217 + fMais2640to150217 - fMenos2640to150217  = 1;
subj to min168904sen8484:  C168904to8484 + fMais168904to8484 - fMenos168904to8484  = 1;
subj to min45690sen45694:  C45690to45694 + fMais45690to45694 - fMenos45690to45694  = 3;
#Contabilizando veículos por link a partir das rotas que passam pelo link:
subj to Cal8616to8617: C8616to8617 = (OD0to2*0.5 );
subj to Cal45694to135255: C45694to135255 = (OD12to11*0.023809523809523808 );
subj to Cal7142to160021: C7142to160021 = (OD14to0*0.5 );
subj to Cal135255to3837: C135255to3837 = (OD12to11*0.023809523809523808 );
subj to Cal146909to8621: C146909to8621 = (OD0to1*0.25 );
subj to Cal8621to8622: C8621to8622 = (OD0to1*0.25 );
subj to Cal8622to27426: C8622to27426 = (OD0to1*0.25 );
subj to Cal160021to160020: C160021to160020 = (OD14to0*0.5 );
subj to Cal160020to7316: C160020to7316 = (OD14to0*0.5 );
subj to Cal7316to160018: C7316to160018 = (OD14to0*0.5 );
subj to Cal27426to146907: C27426to146907 = (OD0to1*0.25 );
subj to Cal146907to8623: C146907to8623 = (OD0to1*0.25 );
subj to Cal160018to7317: C160018to7317 = (OD14to0*0.5 );
subj to Cal7317to160012: C7317to160012 = (OD14to0*0.5 );
subj to Cal160012to160009: C160012to160009 = (OD14to0*0.5 );
subj to Cal160009to160007: C160009to160007 = (OD14to0*0.5 );
subj to Cal160007to7318: C160007to7318 = (OD14to0*0.5 );
subj to Cal7318to160004: C7318to160004 = (OD14to0*0.5 );
subj to Cal8684to122806: C8684to122806 = (OD10to0*0.14285714285714285 );
subj to Cal3837to140136: C3837to140136 = (OD12to11*0.023809523809523808 );
subj to Cal140136to126927: C140136to126927 = (OD12to11*0.011904761904761904 );
subj to Cal160004to160003: C160004to160003 = (OD14to0*0.5 );
subj to Cal160003to7319: C160003to7319 = (OD14to0*0.5 );
subj to Cal3850to3851: C3850to3851 = (OD12to11*0.011904761904761904 );
subj to Cal2892to2901: C2892to2901 = (OD5to8*0.0392156862745098 );
subj to Cal2901to2902: C2901to2902 = (OD5to8*0.0392156862745098 );
subj to Cal2902to2903: C2902to2903 = (OD5to8*0.0392156862745098 );
subj to Cal7319to160005: C7319to160005 = (OD14to0*0.5 );
subj to Cal160005to160006: C160005to160006 = (OD14to0*0.5 );
subj to Cal160006to7320: C160006to7320 = (OD14to0*0.5 );
subj to Cal7320to160011: C7320to160011 = (OD14to0*0.5 );
subj to Cal160011to160013: C160011to160013 = (OD14to0*0.5 );
subj to Cal160013to7321: C160013to7321 = (OD14to0*0.5 );
subj to Cal7321to160019: C7321to160019 = (OD14to0*0.5 );
subj to Cal3851to129773: C3851to129773 = (OD12to11*0.011904761904761904 );
subj to Cal129773to3852: C129773to3852 = (OD12to11*0.011904761904761904 );
subj to Cal160019to7322: C160019to7322 = (OD14to0*0.5 );
subj to Cal122806to9073: C122806to9073 = (OD10to0*0.14285714285714285 );
subj to Cal2662to2663: C2662to2663 = (OD11to10*0.013157894736842105 );
subj to Cal2663to2664: C2663to2664 = (OD11to10*0.013157894736842105 );
subj to Cal8905to8948: C8905to8948 = (OD0to0*0.1111111111111111 );
subj to Cal7388to7389: C7388to7389 = (OD6to14*0.05555555555555555 );
subj to Cal7389to7390: C7389to7390 = (OD6to14*0.05555555555555555 );
subj to Cal7390to7391: C7390to7391 = (OD6to14*0.05555555555555555 );
subj to Cal7391to7392: C7391to7392 = (OD6to14*0.05555555555555555 );
subj to Cal1321to124772: C1321to124772 = (OD7to10*0.012195121951219513 );
subj to Cal7392to7393: C7392to7393 = (OD6to14*0.05555555555555555 );
subj to Cal3852to3846: C3852to3846 = (OD12to11*0.011904761904761904 );
subj to Cal7393to7394: C7393to7394 = (OD6to14*0.05555555555555555 );
subj to Cal7394to7395: C7394to7395 = (OD6to14*0.05555555555555555 );
subj to Cal8892to122757: C8892to122757 = (OD8to0*0.3333333333333333 );
subj to Cal7395to7563: C7395to7563 = (OD6to14*0.05555555555555555 );
subj to Cal7229to7230: C7229to7230 = (OD14to0*0.5 );
subj to Cal7230to7231: C7230to7231 = (OD14to0*0.5 );
subj to Cal3846to3847: C3846to3847 = (OD12to11*0.011904761904761904 );
subj to Cal3847to3848: C3847to3848 = (OD12to11*0.011904761904761904 );
subj to Cal3848to3849: C3848to3849 = (OD12to11*0.011904761904761904 );
subj to Cal122757to8928: C122757to8928 = (OD8to0*0.3333333333333333 );
subj to Cal8928to122751: C8928to122751 = (OD8to0*0.3333333333333333 );
subj to Cal7231to7232: C7231to7232 = (OD14to0*0.5 );
subj to Cal2039to120710: C2039to120710 = (OD5to9*0.07142857142857142 );
subj to Cal7232to7233: C7232to7233 = (OD14to0*0.5 );
subj to Cal7233to7234: C7233to7234 = (OD14to0*0.5 );
subj to Cal122751to8929: C122751to8929 = (OD8to0*0.3333333333333333 );
subj to Cal8929to8930: C8929to8930 = (OD8to0*0.3333333333333333 );
subj to Cal8937to8938: C8937to8938 = (OD0to0*0.1111111111111111 );
subj to Cal7234to7235: C7234to7235 = (OD14to0*0.5 );
subj to Cal120710to2040: C120710to2040 = (OD5to9*0.07142857142857142 );
subj to Cal2040to2041: C2040to2041 = (OD5to9*0.07142857142857142 );
subj to Cal8938to8939: C8938to8939 = (OD0to0*0.1111111111111111 );
subj to Cal8939to8940: C8939to8940 = (OD0to0*0.1111111111111111 );
subj to Cal3857to3856: C3857to3856 = (OD11to11*0.007042253521126761 );
subj to Cal8948to118872: C8948to118872 = (OD0to0*0.1111111111111111 );
subj to Cal118872to8949: C118872to8949 = (OD0to0*0.1111111111111111 );
subj to Cal8949to118870: C8949to118870 = (OD0to0*0.1111111111111111 );
subj to Cal118870to8836: C118870to8836 = (OD0to0*0.1111111111111111 );
subj to Cal3857to3858: C3857to3858 = (OD11to11*0.0035211267605633804 );
subj to Cal3858to3857: C3858to3857 = (OD11to11*0.007042253521126761 );
subj to Cal7235to7236: C7235to7236 = (OD14to0*0.5 );
subj to Cal3859to3858: C3859to3858 = (OD11to11*0.007042253521126761 );
subj to Cal3836to3859: C3836to3859 = (OD11to11*0.007042253521126761 );
subj to Cal3860to853: C3860to853 = (OD11to11*0.0035211267605633804 );
subj to Cal3861to3860: C3861to3860 = (OD11to11*0.0035211267605633804 );
subj to Cal8836to8937: C8836to8937 = (OD0to0*0.1111111111111111 );
subj to Cal9067to8963: C9067to8963 = (OD0to0*0.1111111111111111 );
subj to Cal9016to9062: C9016to9062 = (OD0to0*0.1111111111111111 );
subj to Cal9062to9063: C9062to9063 = (OD0to0*0.1111111111111111 );
subj to Cal7236to7237: C7236to7237 = (OD14to0*0.5 );
subj to Cal7237to7238: C7237to7238 = (OD14to0*0.5 );
subj to Cal7238to7239: C7238to7239 = (OD14to0*0.5 );
subj to Cal9063to141758: C9063to141758 = (OD0to0*0.1111111111111111 );
subj to Cal7239to7240: C7239to7240 = (OD14to0*0.5 );
subj to Cal141758to9064: C141758to9064 = (OD0to0*0.1111111111111111 );
subj to Cal7240to7241: C7240to7241 = (OD14to0*0.5 );
subj to Cal3861to3857: C3861to3857 = (OD11to11*0.0035211267605633804 );
subj to Cal9064to141759: C9064to141759 = (OD0to0*0.1111111111111111 );
subj to Cal7241to7242: C7241to7242 = (OD14to0*0.5 );
subj to Cal141759to9065: C141759to9065 = (OD0to0*0.1111111111111111 );
subj to Cal7242to7243: C7242to7243 = (OD14to0*0.5 );
subj to Cal7243to7244: C7243to7244 = (OD14to0*0.5 );
subj to Cal1351to11060: C1351to11060 = (OD7to7*0.01818181818181818 );
subj to Cal3402to143395: C3402to143395 = (OD2to9*0.1111111111111111 );
subj to Cal7244to7245: C7244to7245 = (OD14to0*0.5 );
subj to Cal9065to141760: C9065to141760 = (OD0to0*0.1111111111111111 );
subj to Cal141760to9066: C141760to9066 = (OD0to0*0.1111111111111111 );
subj to Cal9066to9067: C9066to9067 = (OD0to0*0.1111111111111111 );
subj to Cal9132to9115: C9132to9115 = (OD0to0*0.1111111111111111 );
subj to Cal144255to9130: C144255to9130 = (OD0to0*0.1111111111111111 );
subj to Cal9130to43195: C9130to43195 = (OD0to0*0.1111111111111111 );
subj to Cal143395to143392: C143395to143392 = (OD2to9*0.1111111111111111 );
subj to Cal143392to3395: C143392to3395 = (OD2to9*0.1111111111111111 );
subj to Cal7245to7246: C7245to7246 = (OD14to0*0.5 );
subj to Cal7246to7247: C7246to7247 = (OD14to0*0.5 );
subj to Cal7247to7248: C7247to7248 = (OD14to0*0.5 );
subj to Cal43195to9131: C43195to9131 = (OD0to0*0.1111111111111111 );
subj to Cal9131to43198: C9131to43198 = (OD0to0*0.1111111111111111 );
subj to Cal43198to9132: C43198to9132 = (OD0to0*0.1111111111111111 );
subj to Cal9126to43214: C9126to43214 = (OD0to0*0.1111111111111111 );
subj to Cal4101to29501: C4101to29501 = (OD4to14*0.25 );
subj to Cal9312to9288: C9312to9288 = (OD0to1*0.25 );
subj to Cal153432to153430: C153432to153430 = (OD0to11*0.3333333333333333 );
subj to Cal153430to286: C153430to286 = (OD0to11*0.3333333333333333 );
subj to Cal286to153427: C286to153427 = (OD0to11*0.3333333333333333 );
subj to Cal153427to153425: C153427to153425 = (OD0to11*0.3333333333333333 );
subj to Cal153425to153424: C153425to153424 = (OD0to11*0.3333333333333333 );
subj to Cal153424to287: C153424to287 = (OD0to11*0.3333333333333333 );
subj to Cal287to288: C287to288 = (OD0to11*0.3333333333333333 );
subj to Cal9288to143030: C9288to143030 = (OD0to1*0.25 );
subj to Cal143030to9289: C143030to9289 = (OD0to1*0.25 );
subj to Cal9311to9312: C9311to9312 = (OD0to1*0.25 );
subj to Cal89098to143029: C89098to143029 = (OD0to1*0.25 );
subj to Cal143029to9313: C143029to9313 = (OD0to1*0.25 );
subj to Cal517to4959: C517to4959 = (OD11to4*0.125 );
subj to Cal4959to519: C4959to519 = (OD11to4*0.125 );
subj to Cal519to521: C519to521 = (OD11to4*0.125 );
subj to Cal521to143453: C521to143453 = (OD11to4*0.125 );
subj to Cal143453to531: C143453to531 = (OD11to4*0.125 );
subj to Cal531to143454: C531to143454 = (OD11to4*0.125 );
subj to Cal9313to9314: C9313to9314 = (OD0to1*0.25 );
subj to Cal9314to143028: C9314to143028 = (OD0to1*0.25 );
subj to Cal725to153490: C725to153490 = (OD1to13*0.034482758620689655 );
subj to Cal153490to2012: C153490to2012 = (OD1to13*0.034482758620689655 );
subj to Cal2012to153486: C2012to153486 = (OD1to13*0.034482758620689655 );
subj to Cal153486to153484: C153486to153484 = (OD1to13*0.034482758620689655 );
subj to Cal153484to153481: C153484to153481 = (OD1to13*0.034482758620689655 );
subj to Cal153481to583: C153481to583 = (OD1to13*0.034482758620689655 );
subj to Cal583to153477: C583to153477 = (OD1to13*0.034482758620689655 );
subj to Cal153477to2013: C153477to2013 = (OD1to13*0.034482758620689655 );
subj to Cal2013to153473: C2013to153473 = (OD1to13*0.034482758620689655 );
subj to Cal153473to582: C153473to582 = (OD1to13*0.034482758620689655 );
subj to Cal582to153471: C582to153471 = (OD1to13*0.034482758620689655 );
subj to Cal153471to2014: C153471to2014 = (OD1to13*0.034482758620689655 );
subj to Cal143028to9302: C143028to9302 = (OD0to1*0.25 );
subj to Cal3395to3403: C3395to3403 = (OD2to9*0.1111111111111111 );
subj to Cal9302to9303: C9302to9303 = (OD0to1*0.25 );
subj to Cal7248to4134: C7248to4134 = (OD14to0*0.5 );
subj to Cal7647to7646: C7647to7646 = (OD0to12*0.5 );
subj to Cal133218to7647: C133218to7647 = (OD0to12*0.5 );
subj to Cal7648to133218: C7648to133218 = (OD0to12*0.5 );
subj to Cal133235to7648: C133235to7648 = (OD0to12*0.5 );
subj to Cal9303to143027: C9303to143027 = (OD0to1*0.25 );
subj to Cal3408to3397: C3408to3397 = (OD2to9*0.1111111111111111 );
subj to Cal3397to3409: C3397to3409 = (OD2to9*0.1111111111111111 );
subj to Cal3409to143383: C3409to143383 = (OD2to9*0.1111111111111111 );
subj to Cal143383to3410: C143383to3410 = (OD2to9*0.1111111111111111 );
subj to Cal3401to165585: C3401to165585 = (OD2to9*0.1111111111111111 );
subj to Cal165585to3402: C165585to3402 = (OD2to9*0.1111111111111111 );
subj to Cal29474to133235: C29474to133235 = (OD0to12*0.5 );
subj to Cal7719to7794: C7719to7794 = (OD5to7*0.1111111111111111 );
subj to Cal127724to7719: C127724to7719 = (OD5to7*0.1111111111111111 );
subj to Cal143027to89079: C143027to89079 = (OD0to1*0.25 );
subj to Cal89079to9304: C89079to9304 = (OD0to1*0.25 );
subj to Cal49702to7720: C49702to7720 = (OD11to7*0.006944444444444444 );
subj to Cal7720to122530: C7720to122530 = (OD11to7*0.006944444444444444 );
subj to Cal122530to116714: C122530to116714 = (OD11to7*0.006944444444444444 );
subj to Cal116714to49638: C116714to49638 = (OD11to7*0.006944444444444444 );
subj to Cal49638to7725: C49638to7725 = (OD11to7*0.006944444444444444 );
subj to Cal8930to9334: C8930to9334 = (OD8to0*0.3333333333333333 );
subj to Cal9334to9335: C9334to9335 = (OD8to0*0.3333333333333333 );
subj to Cal9335to9336: C9335to9336 = (OD8to0*0.3333333333333333 );
subj to Cal9336to119460: C9336to119460 = (OD8to0*0.3333333333333333 );
subj to Cal119460to119462: C119460to119462 = (OD8to0*0.3333333333333333 );
subj to Cal119462to9337: C119462to9337 = (OD8to0*0.3333333333333333 );
subj to Cal9337to9338: C9337to9338 = (OD8to0*0.3333333333333333 );
subj to Cal9338to9339: C9338to9339 = (OD8to0*0.3333333333333333 );
subj to Cal153498to153502: C153498to153502 = (OD13to1*0.038461538461538464 );
subj to Cal153502to153505: C153502to153505 = (OD13to1*0.038461538461538464 );
subj to Cal153505to593: C153505to593 = (OD13to1*0.038461538461538464 );
subj to Cal593to153508: C593to153508 = (OD13to1*0.038461538461538464 );
subj to Cal153508to594: C153508to594 = (OD13to1*0.038461538461538464 );
subj to Cal594to679: C594to679 = (OD13to1*0.038461538461538464 );
subj to Cal138091to138092: C138091to138092 = (OD6to0*0.058823529411764705 );
subj to Cal138092to138185: C138092to138185 = (OD6to0*0.058823529411764705 );
subj to Cal138185to776: C138185to776 = (OD6to0*0.058823529411764705 );
subj to Cal9339to9340: C9339to9340 = (OD8to0*0.3333333333333333 );
subj to Cal2947to2948: C2947to2948 = (OD10to11*0.004524886877828055 );
subj to Cal7794to122538: C7794to122538 = (OD5to7*0.1111111111111111 );
subj to Cal4975to4982: C4975to4982 = (OD4to14*0.25 );
subj to Cal4982to4983: C4982to4983 = (OD4to14*0.25 );
subj to Cal9340to9341: C9340to9341 = (OD8to0*0.3333333333333333 );
subj to Cal122538to7798: C122538to7798 = (OD5to7*0.1111111111111111 );
subj to Cal7798to937: C7798to937 = (OD5to7*0.1111111111111111 );
subj to Cal9341to9342: C9341to9342 = (OD8to0*0.3333333333333333 );
subj to Cal9342to9343: C9342to9343 = (OD8to0*0.3333333333333333 );
subj to Cal9343to9344: C9343to9344 = (OD8to0*0.3333333333333333 );
subj to Cal9344to9318: C9344to9318 = (OD8to0*0.3333333333333333 );
subj to Cal7795to49672: C7795to49672 = (OD7to11*0.0056179775280898875 );
subj to Cal133215to7795: C133215to7795 = (OD7to11*0.0056179775280898875 );
subj to Cal7801to133215: C7801to133215 = (OD7to11*0.0056179775280898875 );
subj to Cal7784to7801: C7784to7801 = (OD7to11*0.0056179775280898875 );
subj to Cal127731to7784: C127731to7784 = (OD7to11*0.0056179775280898875 );
subj to Cal9349to9348: C9349to9348 = (OD0to0*0.1111111111111111 );
subj to Cal9348to9347: C9348to9347 = (OD0to0*0.1111111111111111 );
subj to Cal9323to9354: C9323to9354 = (OD0to1*0.75 );
subj to Cal9354to142181: C9354to142181 = (OD0to1*0.75 );
subj to Cal142181to9355: C142181to9355 = (OD0to1*0.75 );
subj to Cal9355to142183: C9355to142183 = (OD0to1*0.75 );
subj to Cal131008to131004: C131008to131004 = (OD8to0*0.3333333333333333 );
subj to Cal131004to131006: C131004to131006 = (OD8to0*0.3333333333333333 );
subj to Cal131006to131003: C131006to131003 = (OD8to0*0.3333333333333333 );
subj to Cal131003to9370: C131003to9370 = (OD8to0*0.3333333333333333 );
subj to Cal9370to131000: C9370to131000 = (OD8to0*0.3333333333333333 );
subj to Cal9637to9624: C9637to9624 = (OD6to0*0.058823529411764705 );
subj to Cal9624to170743: C9624to170743 = (OD6to0*0.058823529411764705 );
subj to Cal170743to9641: C170743to9641 = (OD6to0*0.058823529411764705 );
subj to Cal127730to127731: C127730to127731 = (OD7to11*0.0056179775280898875 );
subj to Cal7816to158788: C7816to158788 = (OD7to11*0.0056179775280898875 );
subj to Cal146288to146287: C146288to146287 = (OD7to11*0.0056179775280898875 );
subj to Cal9641to9632: C9641to9632 = (OD6to0*0.058823529411764705 );
subj to Cal146287to146286: C146287to146286 = (OD7to11*0.0056179775280898875 );
subj to Cal9632to9631: C9632to9631 = (OD6to0*0.058823529411764705 );
subj to Cal160343to143520: C160343to143520 = (OD7to11*0.0056179775280898875 );
subj to Cal143520to49698: C143520to49698 = (OD7to11*0.0056179775280898875 );
subj to Cal122940to143636: C122940to143636 = (OD0to0*0.1111111111111111 );
subj to Cal2993to2994: C2993to2994 = (OD4to13*0.02631578947368421 );
subj to Cal49698to49703: C49698to49703 = (OD7to11*0.0056179775280898875 );
subj to Cal143636to5161: C143636to5161 = (OD0to0*0.1111111111111111 );
subj to Cal5161to5162: C5161to5162 = (OD0to0*0.1111111111111111 );
subj to Cal314to318: C314to318 = (OD10to6*0.0049261083743842365 );
subj to Cal9631to9630: C9631to9630 = (OD6to0*0.058823529411764705 );
subj to Cal9630to9629: C9630to9629 = (OD6to0*0.058823529411764705 );
subj to Cal5162to5163: C5162to5163 = (OD0to0*0.1111111111111111 );
subj to Cal5163to5164: C5163to5164 = (OD0to0*0.1111111111111111 );
subj to Cal19627to19626: C19627to19626 = (OD8to6*0.05263157894736842 );
subj to Cal19626to19625: C19626to19625 = (OD8to6*0.05263157894736842 );
subj to Cal19625to19624: C19625to19624 = (OD8to6*0.05263157894736842 );
subj to Cal19624to43716: C19624to43716 = (OD2to6*0.015873015873015872 );
subj to Cal9629to9642: C9629to9642 = (OD6to0*0.058823529411764705 );
subj to Cal5164to5165: C5164to5165 = (OD0to0*0.1111111111111111 );
subj to Cal5165to5166: C5165to5166 = (OD0to0*0.1111111111111111 );
subj to Cal9642to144205: C9642to144205 = (OD6to0*0.058823529411764705 );
subj to Cal5166to5167: C5166to5167 = (OD0to0*0.1111111111111111 );
subj to Cal49703to49619: C49703to49619 = (OD7to11*0.0056179775280898875 );
subj to Cal5167to5168: C5167to5168 = (OD0to0*0.1111111111111111 );
subj to Cal5168to5169: C5168to5169 = (OD0to0*0.1111111111111111 );
subj to Cal5169to5170: C5169to5170 = (OD0to0*0.1111111111111111 );
subj to Cal49619to49724: C49619to49724 = (OD7to11*0.0056179775280898875 );
subj to Cal2292to9798: C2292to9798 = (OD12to0*0.1 );
subj to Cal9799to168401: C9799to168401 = (OD6to0*0.058823529411764705 );
subj to Cal49724to49665: C49724to49665 = (OD7to11*0.0056179775280898875 );
subj to Cal5170to5171: C5170to5171 = (OD0to0*0.1111111111111111 );
subj to Cal168401to9800: C168401to9800 = (OD6to0*0.058823529411764705 );
subj to Cal5171to4659: C5171to4659 = (OD0to0*0.1111111111111111 );
subj to Cal5307to163392: C5307to163392 = (OD12to0*0.1 );
subj to Cal163392to5306: C163392to5306 = (OD12to0*0.1 );
subj to Cal49665to124922: C49665to124922 = (OD7to11*0.0056179775280898875 );
subj to Cal124922to146150: C124922to146150 = (OD7to11*0.0056179775280898875 );
subj to Cal146150to125364: C146150to125364 = (OD7to11*0.0056179775280898875 );
subj to Cal5306to5305: C5306to5305 = (OD12to0*0.1 );
subj to Cal135077to69925: C135077to69925 = (OD6to5*0.005813953488372093 );
subj to Cal5312to40323: C5312to40323 = (OD12to0*0.1 );
subj to Cal9826to9827: C9826to9827 = (OD12to0*0.1 );
subj to Cal9843to9831: C9843to9831 = (OD12to0*0.1 );
subj to Cal9831to9832: C9831to9832 = (OD12to0*0.1 );
subj to Cal9835to9843: C9835to9843 = (OD12to0*0.1 );
subj to Cal9832to9844: C9832to9844 = (OD12to0*0.1 );
subj to Cal125364to49637: C125364to49637 = (OD7to11*0.0056179775280898875 );
subj to Cal9844to9845: C9844to9845 = (OD12to0*0.1 );
subj to Cal40323to163393: C40323to163393 = (OD12to0*0.1 );
subj to Cal163393to5311: C163393to5311 = (OD12to0*0.1 );
subj to Cal3514to9873: C3514to9873 = (OD8to0*0.3333333333333333 );
subj to Cal49637to49633: C49637to49633 = (OD7to11*0.0056179775280898875 );
subj to Cal49633to10298: C49633to10298 = (OD7to11*0.0056179775280898875 );
subj to Cal5311to40324: C5311to40324 = (OD12to0*0.1 );
subj to Cal40324to5310: C40324to5310 = (OD12to0*0.1 );
subj to Cal9873to9874: C9873to9874 = (OD8to0*0.3333333333333333 );
subj to Cal7836to7853: C7836to7853 = (OD2to14*0.25 );
subj to Cal142501to142498: C142501to142498 = (OD6to6*0.0011806375442739079 );
subj to Cal142498to142500: C142498to142500 = (OD6to6*0.0011806375442739079 );
subj to Cal142500to142499: C142500to142499 = (OD6to6*0.0011806375442739079 );
subj to Cal142499to142502: C142499to142502 = (OD6to6*0.0011806375442739079 );
subj to Cal142502to142659: C142502to142659 = (OD6to6*0.0011806375442739079 );
subj to Cal142659to3065: C142659to3065 = (OD6to6*0.0011806375442739079 );
subj to Cal3065to355: C3065to355 = (OD6to6*0.0011806375442739079 );
subj to Cal355to148339: C355to148339 = (OD6to6*0.0011806375442739079 );
subj to Cal148339to142658: C148339to142658 = (OD6to6*0.0011806375442739079 );
subj to Cal142658to152918: C142658to152918 = (OD6to6*0.0011806375442739079 );
subj to Cal9874to9875: C9874to9875 = (OD8to0*0.3333333333333333 );
subj to Cal5310to163394: C5310to163394 = (OD12to0*0.1 );
subj to Cal152707to152745: C152707to152745 = (OD7to7*0.006060606060606061 );
subj to Cal163394to40336: C163394to40336 = (OD12to0*0.1 );
subj to Cal9875to9876: C9875to9876 = (OD8to0*0.3333333333333333 );
subj to Cal9876to9877: C9876to9877 = (OD8to0*0.3333333333333333 );
subj to Cal9877to9878: C9877to9878 = (OD8to0*0.3333333333333333 );
subj to Cal9878to9879: C9878to9879 = (OD8to0*0.3333333333333333 );
subj to Cal9879to9880: C9879to9880 = (OD8to0*0.3333333333333333 );
subj to Cal9880to9881: C9880to9881 = (OD8to0*0.3333333333333333 );
subj to Cal9881to9882: C9881to9882 = (OD8to0*0.3333333333333333 );
subj to Cal8963to9887: C8963to9887 = (OD0to0*0.1111111111111111 );
subj to Cal9887to9888: C9887to9888 = (OD0to0*0.1111111111111111 );
subj to Cal152745to152673: C152745to152673 = (OD7to7*0.006060606060606061 );
subj to Cal25121to46745: C25121to46745 = (OD7to7*0.012121212121212121 );
subj to Cal46745to46784: C46745to46784 = (OD7to7*0.012121212121212121 );
subj to Cal46784to46785: C46784to46785 = (OD7to7*0.012121212121212121 );
subj to Cal46785to132336: C46785to132336 = (OD7to7*0.012121212121212121 );
subj to Cal132336to132326: C132336to132326 = (OD7to7*0.012121212121212121 );
subj to Cal132326to46760: C132326to46760 = (OD7to7*0.012121212121212121 );
subj to Cal46760to46740: C46760to46740 = (OD7to7*0.012121212121212121 );
subj to Cal46740to131182: C46740to131182 = (OD7to7*0.012121212121212121 );
subj to Cal9888to9889: C9888to9889 = (OD0to0*0.1111111111111111 );
subj to Cal9889to9890: C9889to9890 = (OD0to0*0.1111111111111111 );
subj to Cal152673to152580: C152673to152580 = (OD7to7*0.006060606060606061 );
subj to Cal131182to46778: C131182to46778 = (OD7to7*0.012121212121212121 );
subj to Cal9890to9891: C9890to9891 = (OD0to0*0.1111111111111111 );
subj to Cal9891to9892: C9891to9892 = (OD0to0*0.1111111111111111 );
subj to Cal9892to9893: C9892to9893 = (OD0to0*0.1111111111111111 );
subj to Cal40336to5309: C40336to5309 = (OD12to0*0.1 );
subj to Cal46778to46761: C46778to46761 = (OD7to7*0.012121212121212121 );
subj to Cal46761to46729: C46761to46729 = (OD7to7*0.012121212121212121 );
subj to Cal8679to163189: C8679to163189 = (OD10to0*0.14285714285714285 );
subj to Cal163189to8683: C163189to8683 = (OD10to0*0.14285714285714285 );
subj to Cal8683to163188: C8683to163188 = (OD10to0*0.14285714285714285 );
subj to Cal163188to8710: C163188to8710 = (OD10to0*0.14285714285714285 );
subj to Cal152580to152829: C152580to152829 = (OD7to7*0.006060606060606061 );
subj to Cal8710to144315: C8710to144315 = (OD10to0*0.14285714285714285 );
subj to Cal9911to8684: C9911to8684 = (OD10to0*0.14285714285714285 );
subj to Cal8520to8507: C8520to8507 = (OD0to2*0.5 );
subj to Cal10265to10274: C10265to10274 = (OD12to12*0.02 );
subj to Cal10274to10273: C10274to10273 = (OD12to12*0.08 );
subj to Cal5309to40330: C5309to40330 = (OD12to0*0.1 );
subj to Cal46729to46739: C46729to46739 = (OD7to7*0.006060606060606061 );
subj to Cal46739to46728: C46739to46728 = (OD7to7*0.006060606060606061 );
subj to Cal10273to146228: C10273to146228 = (OD12to12*0.12 );
subj to Cal131048to7909: C131048to7909 = (OD7to7*0.012121212121212121 );
subj to Cal2706to162843: C2706to162843 = (OD11to11*0.02464788732394366 );
subj to Cal162843to2696: C162843to2696 = (OD11to11*0.02464788732394366 );
subj to Cal7909to152808: C7909to152808 = (OD7to7*0.012121212121212121 );
subj to Cal48955to119668: C48955to119668 = (OD7to11*0.0056179775280898875 );
subj to Cal119668to29343: C119668to29343 = (OD7to11*0.0056179775280898875 );
subj to Cal152808to152564: C152808to152564 = (OD7to7*0.012121212121212121 );
subj to Cal46728to46757: C46728to46757 = (OD7to7*0.006060606060606061 );
subj to Cal152564to152676: C152564to152676 = (OD7to7*0.012121212121212121 );
subj to Cal46757to46774: C46757to46774 = (OD7to7*0.006060606060606061 );
subj to Cal163391to40321: C163391to40321 = (OD12to0*0.1 );
subj to Cal152676to152814: C152676to152814 = (OD7to7*0.012121212121212121 );
subj to Cal40321to5308: C40321to5308 = (OD12to0*0.1 );
subj to Cal5308to40322: C5308to40322 = (OD12to0*0.1 );
subj to Cal40322to5307: C40322to5307 = (OD12to0*0.1 );
subj to Cal46774to3176: C46774to3176 = (OD7to7*0.006060606060606061 );
subj to Cal3176to132204: C3176to132204 = (OD7to7*0.006060606060606061 );
subj to Cal132204to46720: C132204to46720 = (OD7to7*0.006060606060606061 );
subj to Cal46720to3177: C46720to3177 = (OD7to7*0.006060606060606061 );
subj to Cal152814to152565: C152814to152565 = (OD7to7*0.012121212121212121 );
subj to Cal10261to146242: C10261to146242 = (OD12to12*0.04 );
subj to Cal5371to29320: C5371to29320 = (OD5to7*0.1111111111111111 );
subj to Cal146242to146239: C146242to146239 = (OD12to12*0.04 );
subj to Cal146239to104998: C146239to104998 = (OD12to12*0.04 );
subj to Cal104998to159882: C104998to159882 = (OD12to12*0.04 );
subj to Cal10257to146240: C10257to146240 = (OD12to12*0.04 );
subj to Cal146240to10261: C146240to10261 = (OD12to12*0.04 );
subj to Cal14171to7690: C14171to7690 = (OD6to0*0.058823529411764705 );
subj to Cal7690to14178: C7690to14178 = (OD6to0*0.058823529411764705 );
subj to Cal10282to126717: C10282to126717 = (OD11to11*0.0035211267605633804 );
subj to Cal126717to10279: C126717to10279 = (OD11to11*0.0035211267605633804 );
subj to Cal152565to152740: C152565to152740 = (OD7to7*0.012121212121212121 );
subj to Cal152740to152607: C152740to152607 = (OD7to7*0.006060606060606061 );
subj to Cal152607to152786: C152607to152786 = (OD7to7*0.006060606060606061 );
subj to Cal10279to129851: C10279to129851 = (OD11to11*0.0035211267605633804 );
subj to Cal152786to152557: C152786to152557 = (OD7to7*0.006060606060606061 );
subj to Cal129851to10283: C129851to10283 = (OD11to11*0.0035211267605633804 );
subj to Cal3595to119757: C3595to119757 = (OD7to7*0.012121212121212121 );
subj to Cal119757to1280: C119757to1280 = (OD7to7*0.012121212121212121 );
subj to Cal1280to119752: C1280to119752 = (OD7to7*0.01818181818181818 );
subj to Cal119752to119750: C119752to119750 = (OD7to7*0.01818181818181818 );
subj to Cal119750to1560: C119750to1560 = (OD7to7*0.01818181818181818 );
subj to Cal1560to1281: C1560to1281 = (OD7to7*0.01818181818181818 );
subj to Cal1281to1286: C1281to1286 = (OD7to7*0.01818181818181818 );
subj to Cal1286to132810: C1286to132810 = (OD7to7*0.01818181818181818 );
subj to Cal132810to132813: C132810to132813 = (OD7to7*0.01818181818181818 );
subj to Cal10283to129847: C10283to129847 = (OD11to11*0.0035211267605633804 );
subj to Cal129847to10280: C129847to10280 = (OD11to11*0.0035211267605633804 );
subj to Cal10280to129841: C10280to129841 = (OD11to11*0.0035211267605633804 );
subj to Cal129841to10281: C129841to10281 = (OD11to11*0.0035211267605633804 );
subj to Cal10281to129823: C10281to129823 = (OD11to11*0.0035211267605633804 );
subj to Cal122457to10291: C122457to10291 = (OD11to11*0.0035211267605633804 );
subj to Cal10292to10284: C10292to10284 = (OD11to12*0.09090909090909091 );
subj to Cal152557to152780: C152557to152780 = (OD7to7*0.006060606060606061 );
subj to Cal152780to152739: C152780to152739 = (OD7to7*0.006060606060606061 );
subj to Cal152739to152641: C152739to152641 = (OD7to7*0.006060606060606061 );
subj to Cal152641to152696: C152641to152696 = (OD7to7*0.006060606060606061 );
subj to Cal152696to7943: C152696to7943 = (OD7to7*0.006060606060606061 );
subj to Cal7943to7938: C7943to7938 = (OD7to7*0.006060606060606061 );
subj to Cal122474to10292: C122474to10292 = (OD11to12*0.09090909090909091 );
subj to Cal3177to3178: C3177to3178 = (OD7to7*0.006060606060606061 );
subj to Cal10285to122474: C10285to122474 = (OD11to12*0.09090909090909091 );
subj to Cal5378to5379: C5378to5379 = (OD5to7*0.1111111111111111 );
subj to Cal10286to10285: C10286to10285 = (OD11to12*0.09090909090909091 );
subj to Cal152740to152843: C152740to152843 = (OD7to7*0.006060606060606061 );
subj to Cal152693to152672: C152693to152672 = (OD5to7*0.1111111111111111 );
subj to Cal152672to152667: C152672to152667 = (OD5to7*0.1111111111111111 );
subj to Cal152667to152618: C152667to152618 = (OD5to7*0.1111111111111111 );
subj to Cal152618to152669: C152618to152669 = (OD5to7*0.1111111111111111 );
subj to Cal152669to152611: C152669to152611 = (OD5to7*0.1111111111111111 );
subj to Cal152611to152838: C152611to152838 = (OD5to7*0.1111111111111111 );
subj to Cal5379to5380: C5379to5380 = (OD5to7*0.1111111111111111 );
subj to Cal5380to5381: C5380to5381 = (OD5to7*0.1111111111111111 );
subj to Cal5381to5382: C5381to5382 = (OD5to7*0.1111111111111111 );
subj to Cal5382to5383: C5382to5383 = (OD5to7*0.1111111111111111 );
subj to Cal170885to5417: C170885to5417 = (OD7to7*0.006060606060606061 );
subj to Cal170884to170885: C170884to170885 = (OD7to7*0.006060606060606061 );
subj to Cal43547to170884: C43547to170884 = (OD7to7*0.006060606060606061 );
subj to Cal152838to152722: C152838to152722 = (OD5to7*0.1111111111111111 );
subj to Cal126234to7757: C126234to7757 = (OD6to11*0.005025125628140704 );
subj to Cal7757to137198: C7757to137198 = (OD6to11*0.005025125628140704 );
subj to Cal170883to43547: C170883to43547 = (OD7to7*0.006060606060606061 );
subj to Cal43548to170883: C43548to170883 = (OD7to7*0.006060606060606061 );
subj to Cal5418to43548: C5418to43548 = (OD7to7*0.006060606060606061 );
subj to Cal152722to152634: C152722to152634 = (OD5to7*0.1111111111111111 );
subj to Cal10298to49644: C10298to49644 = (OD7to11*0.0056179775280898875 );
subj to Cal120772to47746: C120772to47746 = (OD4to6*0.029411764705882353 );
subj to Cal49644to18509: C49644to18509 = (OD7to11*0.0056179775280898875 );
subj to Cal165244to120772: C165244to120772 = (OD4to6*0.029411764705882353 );
subj to Cal18509to10299: C18509to10299 = (OD7to11*0.0056179775280898875 );
subj to Cal152634to152837: C152634to152837 = (OD5to7*0.1111111111111111 );
subj to Cal10299to10297: C10299to10297 = (OD7to11*0.0056179775280898875 );
subj to Cal72963to69200: C72963to69200 = (OD11to7*0.020833333333333332 );
subj to Cal146310to10308: C146310to10308 = (OD11to11*0.0035211267605633804 );
subj to Cal170529to10431: C170529to10431 = (OD13to1*0.038461538461538464 );
subj to Cal10431to170517: C10431to170517 = (OD13to1*0.038461538461538464 );
subj to Cal170517to10426: C170517to10426 = (OD13to1*0.038461538461538464 );
subj to Cal2999to165244: C2999to165244 = (OD4to6*0.029411764705882353 );
subj to Cal10426to14601: C10426to14601 = (OD13to1*0.038461538461538464 );
subj to Cal6073to97137: C6073to97137 = (OD6to9*0.14285714285714285 );
subj to Cal97137to6074: C97137to6074 = (OD6to9*0.14285714285714285 );
subj to Cal6074to97138: C6074to97138 = (OD6to9*0.14285714285714285 );
subj to Cal97138to6075: C97138to6075 = (OD6to9*0.14285714285714285 );
subj to Cal6075to6076: C6075to6076 = (OD6to9*0.14285714285714285 );
subj to Cal6076to97160: C6076to97160 = (OD6to9*0.14285714285714285 );
subj to Cal97160to6077: C97160to6077 = (OD6to9*0.14285714285714285 );
subj to Cal152837to152654: C152837to152654 = (OD5to7*0.1111111111111111 );
subj to Cal6077to97200: C6077to97200 = (OD6to9*0.14285714285714285 );
subj to Cal10427to10428: C10427to10428 = (OD13to2*0.022727272727272728 );
subj to Cal1396to1395: C1396to1395 = (OD11to7*0.006944444444444444 );
subj to Cal14544to146571: C14544to146571 = (OD12to8*0.058823529411764705 );
subj to Cal1397to1396: C1397to1396 = (OD11to7*0.006944444444444444 );
subj to Cal138074to14544: C138074to14544 = (OD12to8*0.058823529411764705 );
subj to Cal10452to10453: C10452to10453 = (OD12to12*0.02 );
subj to Cal10453to10454: C10453to10454 = (OD12to12*0.02 );
subj to Cal10454to10273: C10454to10273 = (OD12to12*0.02 );
subj to Cal146223to146225: C146223to146225 = (OD12to12*0.02 );
subj to Cal146225to146226: C146225to146226 = (OD12to12*0.02 );
subj to Cal138930to11828: C138930to11828 = (OD7to11*0.0056179775280898875 );
subj to Cal152654to152663: C152654to152663 = (OD5to7*0.1111111111111111 );
subj to Cal97200to6078: C97200to6078 = (OD6to9*0.14285714285714285 );
subj to Cal6085to6086: C6085to6086 = (OD6to9*0.14285714285714285 );
subj to Cal152663to152598: C152663to152598 = (OD5to7*0.1111111111111111 );
subj to Cal152598to7955: C152598to7955 = (OD5to7*0.1111111111111111 );
subj to Cal7955to75582: C7955to75582 = (OD5to7*0.1111111111111111 );
subj to Cal6086to6087: C6086to6087 = (OD6to9*0.14285714285714285 );
subj to Cal6087to6088: C6087to6088 = (OD6to9*0.14285714285714285 );
subj to Cal69139to10692: C69139to10692 = (OD6to13*0.018518518518518517 );
subj to Cal7226to7962: C7226to7962 = (OD14to7*0.3333333333333333 );
subj to Cal14602to10430: C14602to10430 = (OD2to13*0.05555555555555555 );
subj to Cal3659to170033: C3659to170033 = (OD6to1*0.021739130434782608 );
subj to Cal167518to14597: C167518to14597 = (OD2to13*0.05555555555555555 );
subj to Cal170033to3658: C170033to3658 = (OD6to1*0.021739130434782608 );
subj to Cal2560to145782: C2560to145782 = (OD6to6*0.0011806375442739079 );
subj to Cal145782to129315: C145782to129315 = (OD6to6*0.0011806375442739079 );
subj to Cal14597to167516: C14597to167516 = (OD2to13*0.05555555555555555 );
subj to Cal129315to145781: C129315to145781 = (OD6to6*0.0011806375442739079 );
subj to Cal167516to10510: C167516to10510 = (OD2to13*0.05555555555555555 );
subj to Cal10510to10509: C10510to10509 = (OD2to13*0.05555555555555555 );
subj to Cal10509to10605: C10509to10605 = (OD2to13*0.05555555555555555 );
subj to Cal10605to121182: C10605to121182 = (OD2to13*0.05555555555555555 );
subj to Cal121182to123870: C121182to123870 = (OD2to13*0.05555555555555555 );
subj to Cal3680to13804: C3680to13804 = (OD10to10*0.004 );
subj to Cal123870to5420: C123870to5420 = (OD2to13*0.05555555555555555 );
subj to Cal5420to5421: C5420to5421 = (OD2to13*0.05555555555555555 );
subj to Cal5421to164952: C5421to164952 = (OD2to13*0.05555555555555555 );
subj to Cal164952to15565: C164952to15565 = (OD2to13*0.05555555555555555 );
subj to Cal121291to165835: C121291to165835 = (OD13to13*0.02631578947368421 );
subj to Cal6088to6089: C6088to6089 = (OD6to9*0.14285714285714285 );
subj to Cal165835to124221: C165835to124221 = (OD13to13*0.02631578947368421 );
subj to Cal6089to6090: C6089to6090 = (OD6to9*0.14285714285714285 );
subj to Cal124221to1793: C124221to1793 = (OD13to13*0.017543859649122806 );
subj to Cal10508to10601: C10508to10601 = (OD13to13*0.017543859649122806 );
subj to Cal10526to150806: C10526to150806 = (OD13to5*0.021739130434782608 );
subj to Cal150806to29292: C150806to29292 = (OD13to5*0.021739130434782608 );
subj to Cal13374to13375: C13374to13375 = (OD13to13*0.008771929824561403 );
subj to Cal13375to13376: C13375to13376 = (OD13to13*0.008771929824561403 );
subj to Cal7970to7983: C7970to7983 = (OD11to0*0.1111111111111111 );
subj to Cal13376to13377: C13376to13377 = (OD13to13*0.008771929824561403 );
subj to Cal7983to7971: C7983to7971 = (OD11to0*0.1111111111111111 );
subj to Cal13377to13378: C13377to13378 = (OD13to13*0.008771929824561403 );
subj to Cal8055to8057: C8055to8057 = (OD7to14*0.25 );
subj to Cal8057to8052: C8057to8052 = (OD7to14*0.25 );
subj to Cal8052to8056: C8052to8056 = (OD7to14*0.25 );
subj to Cal10269to104976: C10269to104976 = (OD11to12*0.022727272727272728 );
subj to Cal8056to8053: C8056to8053 = (OD7to14*0.25 );
subj to Cal13378to10528: C13378to10528 = (OD13to13*0.008771929824561403 );
subj to Cal10528to10530: C10528to10530 = (OD13to13*0.008771929824561403 );
subj to Cal130720to8251: C130720to8251 = (OD6to2*0.007751937984496124 );
subj to Cal104976to138262: C104976to138262 = (OD11to12*0.022727272727272728 );
subj to Cal8251to17585: C8251to17585 = (OD6to2*0.007751937984496124 );
subj to Cal17585to8252: C17585to8252 = (OD6to2*0.007751937984496124 );
subj to Cal10530to10554: C10530to10554 = (OD13to13*0.008771929824561403 );
subj to Cal10532to10554: C10532to10554 = (OD13to13*0.008771929824561403 );
subj to Cal10529to10532: C10529to10532 = (OD13to13*0.008771929824561403 );
subj to Cal10556to10536: C10556to10536 = (OD13to13*0.008771929824561403 );
subj to Cal10536to10538: C10536to10538 = (OD13to13*0.008771929824561403 );
subj to Cal10538to10544: C10538to10544 = (OD13to13*0.008771929824561403 );
subj to Cal10544to10551: C10544to10551 = (OD13to13*0.008771929824561403 );
subj to Cal3693to148277: C3693to148277 = (OD6to10*0.004123711340206186 );
subj to Cal10551to10550: C10551to10550 = (OD13to13*0.008771929824561403 );
subj to Cal132024to132023: C132024to132023 = (OD6to6*0.0011806375442739079 );
subj to Cal132023to132021: C132023to132021 = (OD6to6*0.0023612750885478157 );
subj to Cal132021to132022: C132021to132022 = (OD6to6*0.0023612750885478157 );
subj to Cal120901to10543: C120901to10543 = (OD13to13*0.008771929824561403 );
subj to Cal49498to8258: C49498to8258 = (OD6to11*0.005025125628140704 );
subj to Cal11889to120901: C11889to120901 = (OD13to13*0.008771929824561403 );
subj to Cal2726to2727: C2726to2727 = (OD11to11*0.0035211267605633804 );
subj to Cal3100to3018: C3100to3018 = (OD7to11*0.0056179775280898875 );
subj to Cal3695to8252: C3695to8252 = (OD6to6*0.0011806375442739079 );
subj to Cal69048to11889: C69048to11889 = (OD13to13*0.008771929824561403 );
subj to Cal69048to10537: C69048to10537 = (OD13to5*0.021739130434782608 );
subj to Cal10537to10539: C10537to10539 = (OD13to5*0.021739130434782608 );
subj to Cal8275to8276: C8275to8276 = (OD6to11*0.005025125628140704 );
subj to Cal10539to120914: C10539to120914 = (OD13to5*0.021739130434782608 );
subj to Cal8276to8277: C8276to8277 = (OD6to11*0.005025125628140704 );
subj to Cal8277to137974: C8277to137974 = (OD6to11*0.005025125628140704 );
subj to Cal137974to8278: C137974to8278 = (OD6to11*0.005025125628140704 );
subj to Cal8278to17533: C8278to17533 = (OD6to11*0.005025125628140704 );
subj to Cal14047to14099: C14047to14099 = (OD8to8*0.024390243902439025 );
subj to Cal120914to120911: C120914to120911 = (OD13to5*0.021739130434782608 );
subj to Cal120911to10542: C120911to10542 = (OD13to5*0.021739130434782608 );
subj to Cal8329to14348: C8329to14348 = (OD11to11*0.0035211267605633804 );
subj to Cal10542to10526: C10542to10526 = (OD13to5*0.021739130434782608 );
subj to Cal10554to124242: C10554to124242 = (OD13to13*0.017543859649122806 );
subj to Cal124242to10555: C124242to10555 = (OD13to13*0.017543859649122806 );
subj to Cal10555to10556: C10555to10556 = (OD13to13*0.017543859649122806 );
subj to Cal93333to2159: C93333to2159 = (OD4to5*0.020833333333333332 );
subj to Cal93277to6142: C93277to6142 = (OD4to5*0.020833333333333332 );
subj to Cal26356to167512: C26356to167512 = (OD13to13*0.008771929824561403 );
subj to Cal3718to3622: C3718to3622 = (OD6to5*0.011627906976744186 );
subj to Cal2727to2728: C2727to2728 = (OD11to11*0.0035211267605633804 );
subj to Cal162854to162855: C162854to162855 = (OD11to11*0.0035211267605633804 );
subj to Cal166609to166611: C166609to166611 = (OD11to11*0.0035211267605633804 );
subj to Cal166611to1430: C166611to1430 = (OD11to11*0.0035211267605633804 );
subj to Cal1430to166616: C1430to166616 = (OD11to11*0.0035211267605633804 );
subj to Cal166616to1429: C166616to1429 = (OD11to11*0.0035211267605633804 );
subj to Cal1429to166619: C1429to166619 = (OD11to11*0.0035211267605633804 );
subj to Cal166619to1428: C166619to1428 = (OD11to11*0.0035211267605633804 );
subj to Cal1428to166622: C1428to166622 = (OD11to11*0.0035211267605633804 );
subj to Cal166622to1427: C166622to1427 = (OD11to11*0.0035211267605633804 );
subj to Cal1427to166626: C1427to166626 = (OD11to11*0.0035211267605633804 );
subj to Cal167512to26358: C167512to26358 = (OD13to13*0.008771929824561403 );
subj to Cal26358to26348: C26358to26348 = (OD13to13*0.008771929824561403 );
subj to Cal26348to26355: C26348to26355 = (OD13to13*0.008771929824561403 );
subj to Cal26355to170515: C26355to170515 = (OD13to13*0.008771929824561403 );
subj to Cal10578to10576: C10578to10576 = (OD13to5*0.021739130434782608 );
subj to Cal10576to10577: C10576to10577 = (OD13to5*0.021739130434782608 );
subj to Cal10578to10583: C10578to10583 = (OD2to13*0.05555555555555555 );
subj to Cal10583to10575: C10583to10575 = (OD2to13*0.05555555555555555 );
subj to Cal1463to166664: C1463to166664 = (OD7to10*0.012195121951219513 );
subj to Cal166664to1462: C166664to1462 = (OD7to10*0.012195121951219513 );
subj to Cal1462to166660: C1462to166660 = (OD7to10*0.012195121951219513 );
subj to Cal166660to527: C166660to527 = (OD7to10*0.012195121951219513 );
subj to Cal527to1461: C527to1461 = (OD7to10*0.012195121951219513 );
subj to Cal1461to528: C1461to528 = (OD7to10*0.012195121951219513 );
subj to Cal162918to1465: C162918to1465 = (OD5to10*0.02702702702702703 );
subj to Cal10591to10592: C10591to10592 = (OD5to2*0.010869565217391304 );
subj to Cal10588to69138: C10588to69138 = (OD5to2*0.010869565217391304 );
subj to Cal121114to10601: C121114to10601 = (OD13to2*0.022727272727272728 );
subj to Cal69177to49544: C69177to49544 = (OD5to10*0.02702702702702703 );
subj to Cal49544to10612: C49544to10612 = (OD5to10*0.02702702702702703 );
subj to Cal10613to10608: C10613to10608 = (OD5to10*0.05405405405405406 );
subj to Cal10608to10609: C10608to10609 = (OD5to10*0.02702702702702703 );
subj to Cal10613to49541: C10613to49541 = (OD11to2*0.03125 );
subj to Cal14200to8326: C14200to8326 = (OD11to11*0.0035211267605633804 );
subj to Cal49541to10617: C49541to10617 = (OD11to2*0.03125 );
subj to Cal8324to8325: C8324to8325 = (OD1to1*0.037037037037037035 );
subj to Cal8318to14259: C8318to14259 = (OD8to1*0.058823529411764705 );
subj to Cal14259to27421: C14259to27421 = (OD8to1*0.058823529411764705 );
subj to Cal14352to14540: C14352to14540 = (OD1to1*0.037037037037037035 );
subj to Cal14540to41074: C14540to41074 = (OD1to1*0.037037037037037035 );
subj to Cal41074to144983: C41074to144983 = (OD1to1*0.037037037037037035 );
subj to Cal144983to8324: C144983to8324 = (OD1to1*0.037037037037037035 );
subj to Cal8325to8334: C8325to8334 = (OD1to1*0.037037037037037035 );
subj to Cal144043to8388: C144043to8388 = (OD11to1*0.3333333333333333 );
subj to Cal8388to8387: C8388to8387 = (OD11to1*0.3333333333333333 );
subj to Cal8387to160953: C8387to160953 = (OD11to1*0.3333333333333333 );
subj to Cal132917to6956: C132917to6956 = (OD10to7*0.022222222222222223 );
subj to Cal160953to8386: C160953to8386 = (OD11to1*0.3333333333333333 );
subj to Cal3725to147979: C3725to147979 = (OD10to5*0.08333333333333333 );
subj to Cal162855to2732: C162855to2732 = (OD11to11*0.0035211267605633804 );
subj to Cal147979to147976: C147979to147976 = (OD10to5*0.08333333333333333 );
subj to Cal2732to162856: C2732to162856 = (OD11to11*0.0035211267605633804 );
subj to Cal6956to6957: C6956to6957 = (OD10to7*0.022222222222222223 );
subj to Cal162856to2733: C162856to2733 = (OD11to11*0.0035211267605633804 );
subj to Cal6957to6958: C6957to6958 = (OD10to7*0.022222222222222223 );
subj to Cal2733to162857: C2733to162857 = (OD11to11*0.0035211267605633804 );
subj to Cal6958to123764: C6958to123764 = (OD10to7*0.022222222222222223 );
subj to Cal162857to2734: C162857to2734 = (OD11to11*0.0035211267605633804 );
subj to Cal147976to147974: C147976to147974 = (OD10to5*0.08333333333333333 );
subj to Cal8386to161698: C8386to161698 = (OD11to1*0.3333333333333333 );
subj to Cal161698to8385: C161698to8385 = (OD11to1*0.3333333333333333 );
subj to Cal123764to123757: C123764to123757 = (OD10to7*0.022222222222222223 );
subj to Cal123757to123758: C123757to123758 = (OD10to7*0.022222222222222223 );
subj to Cal10617to10618: C10617to10618 = (OD11to2*0.03125 );
subj to Cal147974to111242: C147974to111242 = (OD10to5*0.08333333333333333 );
subj to Cal8385to161695: C8385to161695 = (OD11to1*0.3333333333333333 );
subj to Cal161695to81843: C161695to81843 = (OD11to1*0.3333333333333333 );
subj to Cal2784to2783: C2784to2783 = (OD10to12*0.02857142857142857 );
subj to Cal132836to132837: C132836to132837 = (OD5to5*0.0031847133757961785 );
subj to Cal132837to147960: C132837to147960 = (OD5to5*0.0031847133757961785 );
subj to Cal147960to95076: C147960to95076 = (OD5to5*0.0031847133757961785 );
subj to Cal127028to2784: C127028to2784 = (OD10to12*0.02857142857142857 );
subj to Cal2734to162858: C2734to162858 = (OD11to11*0.0035211267605633804 );
subj to Cal162858to162859: C162858to162859 = (OD11to11*0.0035211267605633804 );
subj to Cal95076to3724: C95076to3724 = (OD5to5*0.006369426751592357 );
subj to Cal13013to10648: C13013to10648 = (OD2to13*0.05555555555555555 );
subj to Cal3724to128994: C3724to128994 = (OD5to5*0.006369426751592357 );
subj to Cal128994to147961: C128994to147961 = (OD5to5*0.009554140127388535 );
subj to Cal10648to10649: C10648to10649 = (OD2to13*0.05555555555555555 );
subj to Cal123758to123730: C123758to123730 = (OD10to7*0.022222222222222223 );
subj to Cal123730to123745: C123730to123745 = (OD10to7*0.022222222222222223 );
subj to Cal123745to123759: C123745to123759 = (OD10to7*0.022222222222222223 );
subj to Cal10649to10650: C10649to10650 = (OD2to13*0.05555555555555555 );
subj to Cal10650to10651: C10650to10651 = (OD2to13*0.05555555555555555 );
subj to Cal10651to10652: C10651to10652 = (OD2to13*0.05555555555555555 );
subj to Cal10652to10653: C10652to10653 = (OD2to13*0.05555555555555555 );
subj to Cal10653to10654: C10653to10654 = (OD2to13*0.05555555555555555 );
subj to Cal81843to161696: C81843to161696 = (OD11to1*0.3333333333333333 );
subj to Cal161696to8384: C161696to8384 = (OD11to1*0.3333333333333333 );
subj to Cal8384to161035: C8384to161035 = (OD11to1*0.3333333333333333 );
subj to Cal134742to134741: C134742to134741 = (OD2to4*0.16666666666666666 );
subj to Cal134740to10661: C134740to10661 = (OD2to5*0.045454545454545456 );
subj to Cal10675to13013: C10675to13013 = (OD5to2*0.010869565217391304 );
subj to Cal1518to169425: C1518to169425 = (OD7to7*0.01818181818181818 );
subj to Cal169425to1516: C169425to1516 = (OD7to7*0.006060606060606061 );
subj to Cal12173to13018: C12173to13018 = (OD13to5*0.021739130434782608 );
subj to Cal123759to123738: C123759to123738 = (OD10to7*0.022222222222222223 );
subj to Cal10701to13017: C10701to13017 = (OD13to5*0.021739130434782608 );
subj to Cal3658to150740: C3658to150740 = (OD5to12*0.011764705882352941 );
subj to Cal150740to129437: C150740to129437 = (OD5to12*0.011764705882352941 );
subj to Cal10707to10703: C10707to10703 = (OD13to5*0.021739130434782608 );
subj to Cal161035to161034: C161035to161034 = (OD11to1*0.3333333333333333 );
subj to Cal10713to150695: C10713to150695 = (OD5to2*0.03260869565217391 );
subj to Cal150695to10712: C150695to10712 = (OD5to2*0.03260869565217391 );
subj to Cal10720to10722: C10720to10722 = (OD5to8*0.0196078431372549 );
subj to Cal10722to10719: C10722to10719 = (OD5to8*0.0196078431372549 );
subj to Cal8444to43125: C8444to43125 = (OD12to0*0.1 );
subj to Cal123738to123736: C123738to123736 = (OD10to7*0.022222222222222223 );
subj to Cal123736to123741: C123736to123741 = (OD10to7*0.022222222222222223 );
subj to Cal43125to8446: C43125to8446 = (OD12to0*0.1 );
subj to Cal8446to43137: C8446to43137 = (OD12to0*0.1 );
subj to Cal43137to8443: C43137to8443 = (OD12to0*0.1 );
subj to Cal151939to151831: C151939to151831 = (OD14to11*0.1 );
subj to Cal151831to151940: C151831to151940 = (OD14to11*0.1 );
subj to Cal151940to151894: C151940to151894 = (OD14to11*0.1 );
subj to Cal151894to151945: C151894to151945 = (OD14to11*0.1 );
subj to Cal151945to151943: C151945to151943 = (OD14to11*0.1 );
subj to Cal151943to151823: C151943to151823 = (OD14to11*0.1 );
subj to Cal10719to50738: C10719to50738 = (OD5to8*0.0196078431372549 );
subj to Cal50738to10710: C50738to10710 = (OD5to8*0.0196078431372549 );
subj to Cal10710to19777: C10710to19777 = (OD5to8*0.0196078431372549 );
subj to Cal151823to151861: C151823to151861 = (OD14to11*0.1 );
subj to Cal19777to10711: C19777to10711 = (OD5to8*0.0196078431372549 );
subj to Cal10711to13034: C10711to13034 = (OD5to8*0.0196078431372549 );
subj to Cal10730to47129: C10730to47129 = (OD13to7*0.3333333333333333 );
subj to Cal2268to128677: C2268to128677 = (OD11to7*0.006944444444444444 );
subj to Cal1519to1538: C1519to1538 = (OD7to7*0.012121212121212121 );
subj to Cal47129to10730: C47129to10730 = (OD13to7*0.3333333333333333 );
subj to Cal47129to10772: C47129to10772 = (OD13to7*0.3333333333333333 );
subj to Cal109516to123924: C109516to123924 = (OD7to7*0.012121212121212121 );
subj to Cal10806to1549: C10806to1549 = (OD7to7*0.006060606060606061 );
subj to Cal1549to10784: C1549to10784 = (OD7to7*0.006060606060606061 );
subj to Cal1581to1582: C1581to1582 = (OD11to7*0.006944444444444444 );
subj to Cal1583to1300: C1583to1300 = (OD6to7*0.021739130434782608 );
subj to Cal151861to151841: C151861to151841 = (OD14to11*0.1 );
subj to Cal151841to151912: C151841to151912 = (OD14to11*0.1 );
subj to Cal151912to151950: C151912to151950 = (OD14to11*0.1 );
subj to Cal123741to123754: C123741to123754 = (OD10to7*0.022222222222222223 );
subj to Cal123754to123752: C123754to123752 = (OD10to7*0.022222222222222223 );
subj to Cal151950to151888: C151950to151888 = (OD14to11*0.1 );
subj to Cal151888to151890: C151888to151890 = (OD14to11*0.1 );
subj to Cal123924to123923: C123924to123923 = (OD7to7*0.012121212121212121 );
subj to Cal123923to10752: C123923to10752 = (OD7to7*0.012121212121212121 );
subj to Cal10752to10753: C10752to10753 = (OD7to7*0.012121212121212121 );
subj to Cal10753to169437: C10753to169437 = (OD7to7*0.012121212121212121 );
subj to Cal10772to2261: C10772to2261 = (OD13to7*0.3333333333333333 );
subj to Cal10777to124010: C10777to124010 = (OD7to7*0.006060606060606061 );
subj to Cal124010to2260: C124010to2260 = (OD7to7*0.006060606060606061 );
subj to Cal2260to160314: C2260to160314 = (OD7to7*0.006060606060606061 );
subj to Cal160314to47118: C160314to47118 = (OD7to7*0.006060606060606061 );
subj to Cal162859to162860: C162859to162860 = (OD11to11*0.0035211267605633804 );
subj to Cal123752to123746: C123752to123746 = (OD10to7*0.022222222222222223 );
subj to Cal2161to6965: C2161to6965 = (OD14to14*0.14285714285714285 );
subj to Cal6965to6966: C6965to6966 = (OD14to14*0.14285714285714285 );
subj to Cal6966to6967: C6966to6967 = (OD14to14*0.14285714285714285 );
subj to Cal6967to6968: C6967to6968 = (OD14to14*0.14285714285714285 );
subj to Cal47118to2273: C47118to2273 = (OD7to7*0.006060606060606061 );
subj to Cal6968to6969: C6968to6969 = (OD14to14*0.14285714285714285 );
subj to Cal6969to45206: C6969to45206 = (OD14to14*0.14285714285714285 );
subj to Cal45206to76003: C45206to76003 = (OD14to14*0.14285714285714285 );
subj to Cal171275to6976: C171275to6976 = (OD14to14*0.14285714285714285 );
subj to Cal2273to10775: C2273to10775 = (OD7to7*0.006060606060606061 );
subj to Cal6980to75983: C6980to75983 = (OD7to7*0.006060606060606061 );
subj to Cal132910to6983: C132910to6983 = (OD14to14*0.14285714285714285 );
subj to Cal162860to2735: C162860to2735 = (OD11to11*0.0035211267605633804 );
subj to Cal122005to3717: C122005to3717 = (OD6to5*0.005813953488372093 );
subj to Cal10775to123941: C10775to123941 = (OD7to7*0.006060606060606061 );
subj to Cal6983to163633: C6983to163633 = (OD14to14*0.14285714285714285 );
subj to Cal46844to10794: C46844to10794 = (OD11to7*0.006944444444444444 );
subj to Cal10794to10795: C10794to10795 = (OD11to7*0.006944444444444444 );
subj to Cal10730to10777: C10730to10777 = (OD7to7*0.006060606060606061 );
subj to Cal10788to163612: C10788to163612 = (OD7to7*0.006060606060606061 );
subj to Cal163612to10806: C163612to10806 = (OD7to7*0.006060606060606061 );
subj to Cal152255to152412: C152255to152412 = (OD11to7*0.006944444444444444 );
subj to Cal152412to127817: C152412to127817 = (OD11to7*0.006944444444444444 );
subj to Cal127817to152378: C127817to152378 = (OD11to7*0.006944444444444444 );
subj to Cal152378to10828: C152378to10828 = (OD11to7*0.006944444444444444 );
subj to Cal10828to152179: C10828to152179 = (OD11to7*0.006944444444444444 );
subj to Cal152179to152449: C152179to152449 = (OD11to7*0.006944444444444444 );
subj to Cal152449to152472: C152449to152472 = (OD11to7*0.006944444444444444 );
subj to Cal145147to45684: C145147to45684 = (OD11to7*0.006944444444444444 );
subj to Cal45684to45699: C45684to45699 = (OD11to7*0.006944444444444444 );
subj to Cal45699to45680: C45699to45680 = (OD11to7*0.006944444444444444 );
subj to Cal24985to24986: C24985to24986 = (OD5to7*0.1111111111111111 );
subj to Cal24986to122486: C24986to122486 = (OD5to7*0.1111111111111111 );
subj to Cal149863to150034: C149863to150034 = (OD14to11*0.1 );
subj to Cal150022to10879: C150022to10879 = (OD8to6*0.05263157894736842 );
subj to Cal2735to162861: C2735to162861 = (OD11to11*0.0035211267605633804 );
subj to Cal10885to149730: C10885to149730 = (OD8to6*0.05263157894736842 );
subj to Cal149730to149579: C149730to149579 = (OD8to6*0.05263157894736842 );
subj to Cal163633to76011: C163633to76011 = (OD14to14*0.14285714285714285 );
subj to Cal149579to122515: C149579to122515 = (OD8to6*0.05263157894736842 );
subj to Cal122515to149632: C122515to149632 = (OD8to6*0.05263157894736842 );
subj to Cal149554to149735: C149554to149735 = (OD14to11*0.1 );
subj to Cal1681to1682: C1681to1682 = (OD11to8*0.045454545454545456 );
subj to Cal1682to1683: C1682to1683 = (OD11to8*0.045454545454545456 );
subj to Cal149735to10887: C149735to10887 = (OD14to11*0.1 );
subj to Cal10887to149578: C10887to149578 = (OD14to11*0.1 );
subj to Cal1696to1670: C1696to1670 = (OD2to11*0.02631578947368421 );
subj to Cal1670to1696: C1670to1696 = (OD11to11*0.0035211267605633804 );
subj to Cal149578to149700: C149578to149700 = (OD14to11*0.1 );
subj to Cal149700to10888: C149700to10888 = (OD14to11*0.1 );
subj to Cal10888to149630: C10888to149630 = (OD14to11*0.1 );
subj to Cal119703to119712: C119703to119712 = (OD11to13*0.03333333333333333 );
subj to Cal119712to119715: C119712to119715 = (OD11to13*0.03333333333333333 );
subj to Cal119715to119716: C119715to119716 = (OD11to13*0.03333333333333333 );
subj to Cal119716to119714: C119716to119714 = (OD11to13*0.03333333333333333 );
subj to Cal119714to119710: C119714to119710 = (OD11to13*0.03333333333333333 );
subj to Cal119710to119706: C119710to119706 = (OD11to13*0.03333333333333333 );
subj to Cal119706to163481: C119706to163481 = (OD11to13*0.03333333333333333 );
subj to Cal163481to119700: C163481to119700 = (OD11to13*0.03333333333333333 );
subj to Cal149630to149568: C149630to149568 = (OD14to11*0.1 );
subj to Cal149568to149691: C149568to149691 = (OD14to11*0.1 );
subj to Cal149691to149827: C149691to149827 = (OD14to11*0.1 );
subj to Cal149827to150075: C149827to150075 = (OD14to11*0.1 );
subj to Cal119694to119693: C119694to119693 = (OD11to2*0.03125 );
subj to Cal2180to149646: C2180to149646 = (OD8to6*0.05263157894736842 );
subj to Cal149646to149948: C149646to149948 = (OD8to6*0.05263157894736842 );
subj to Cal129004to144609: C129004to144609 = (OD7to7*0.006060606060606061 );
subj to Cal144609to129005: C144609to129005 = (OD7to7*0.006060606060606061 );
subj to Cal129005to129326: C129005to129326 = (OD7to7*0.006060606060606061 );
subj to Cal129326to129337: C129326to129337 = (OD7to7*0.006060606060606061 );
subj to Cal129006to129004: C129006to129004 = (OD7to7*0.006060606060606061 );
subj to Cal76011to6974: C76011to6974 = (OD14to14*0.14285714285714285 );
subj to Cal1871to156675: C1871to156675 = (OD5to9*0.07142857142857142 );
subj to Cal156675to1872: C156675to1872 = (OD5to9*0.07142857142857142 );
subj to Cal1872to1873: C1872to1873 = (OD5to9*0.07142857142857142 );
subj to Cal1873to156666: C1873to156666 = (OD5to9*0.07142857142857142 );
subj to Cal156666to1874: C156666to1874 = (OD5to9*0.07142857142857142 );
subj to Cal19249to18916: C19249to18916 = (OD7to7*0.006060606060606061 );
subj to Cal18916to19252: C18916to19252 = (OD7to7*0.006060606060606061 );
subj to Cal149617to149848: C149617to149848 = (OD7to7*0.006060606060606061 );
subj to Cal19252to29400: C19252to29400 = (OD7to7*0.006060606060606061 );
subj to Cal11033to18752: C11033to18752 = (OD11to7*0.006944444444444444 );
subj to Cal18752to11032: C18752to11032 = (OD11to7*0.006944444444444444 );
subj to Cal1878to1879: C1878to1879 = (OD4to13*0.02631578947368421 );
subj to Cal3465to3550: C3465to3550 = (OD0to2*0.5 );
subj to Cal3550to122723: C3550to122723 = (OD0to2*0.5 );
subj to Cal122723to2328: C122723to2328 = (OD0to2*0.5 );
subj to Cal11039to11038: C11039to11038 = (OD7to7*0.012121212121212121 );
subj to Cal11038to11037: C11038to11037 = (OD7to7*0.012121212121212121 );
subj to Cal11037to138722: C11037to138722 = (OD7to7*0.012121212121212121 );
subj to Cal138722to11036: C138722to11036 = (OD7to7*0.012121212121212121 );
subj to Cal150051to149868: C150051to149868 = (OD6to7*0.021739130434782608 );
subj to Cal149868to149866: C149868to149866 = (OD6to7*0.021739130434782608 );
subj to Cal149866to149809: C149866to149809 = (OD6to7*0.021739130434782608 );
subj to Cal11036to11035: C11036to11035 = (OD7to7*0.012121212121212121 );
subj to Cal11035to169418: C11035to169418 = (OD7to7*0.012121212121212121 );
subj to Cal2199to2244: C2199to2244 = (OD13to7*0.3333333333333333 );
subj to Cal2244to2245: C2244to2245 = (OD13to7*0.3333333333333333 );
subj to Cal2245to2246: C2245to2246 = (OD13to7*0.3333333333333333 );
subj to Cal2246to2257: C2246to2257 = (OD13to7*0.3333333333333333 );
subj to Cal169418to11034: C169418to11034 = (OD7to7*0.012121212121212121 );
subj to Cal2257to122449: C2257to122449 = (OD13to7*0.3333333333333333 );
subj to Cal122449to13498: C122449to13498 = (OD13to7*0.3333333333333333 );
subj to Cal11034to169749: C11034to169749 = (OD7to7*0.012121212121212121 );
subj to Cal11045to11065: C11045to11065 = (OD7to11*0.0056179775280898875 );
subj to Cal19252to19253: C19252to19253 = (OD7to7*0.006060606060606061 );
subj to Cal13044to2267: C13044to2267 = (OD7to7*0.006060606060606061 );
subj to Cal2267to2268: C2267to2268 = (OD7to7*0.006060606060606061 );
subj to Cal2268to10780: C2268to10780 = (OD7to7*0.006060606060606061 );
subj to Cal10780to2269: C10780to2269 = (OD7to7*0.006060606060606061 );
subj to Cal2269to2270: C2269to2270 = (OD7to7*0.006060606060606061 );
subj to Cal2270to2271: C2270to2271 = (OD7to7*0.006060606060606061 );
subj to Cal2277to13493: C2277to13493 = (OD7to7*0.006060606060606061 );
subj to Cal19253to1355: C19253to1355 = (OD7to7*0.006060606060606061 );
subj to Cal11064to11335: C11064to11335 = (OD7to11*0.0056179775280898875 );
subj to Cal11335to11044: C11335to11044 = (OD7to11*0.0056179775280898875 );
subj to Cal11044to11045: C11044to11045 = (OD7to11*0.0056179775280898875 );
subj to Cal11117to121856: C11117to121856 = (OD7to11*0.016853932584269662 );
subj to Cal11069to11070: C11069to11070 = (OD11to7*0.006944444444444444 );
subj to Cal11081to11099: C11081to11099 = (OD7to10*0.012195121951219513 );
subj to Cal11096to11083: C11096to11083 = (OD7to10*0.012195121951219513 );
subj to Cal11083to11084: C11083to11084 = (OD7to10*0.012195121951219513 );
subj to Cal11097to142878: C11097to142878 = (OD7to11*0.0056179775280898875 );
subj to Cal11100to18737: C11100to18737 = (OD7to11*0.0056179775280898875 );
subj to Cal18737to18739: C18737to18739 = (OD7to11*0.0056179775280898875 );
subj to Cal18739to18723: C18739to18723 = (OD7to11*0.0056179775280898875 );
subj to Cal18723to18727: C18723to18727 = (OD7to11*0.0056179775280898875 );
subj to Cal18727to18751: C18727to18751 = (OD7to11*0.0056179775280898875 );
subj to Cal18751to122173: C18751to122173 = (OD7to11*0.0056179775280898875 );
subj to Cal122173to122169: C122173to122169 = (OD7to11*0.0056179775280898875 );
subj to Cal122169to122166: C122169to122166 = (OD7to11*0.0056179775280898875 );
subj to Cal122166to122158: C122166to122158 = (OD7to11*0.0056179775280898875 );
subj to Cal122158to11099: C122158to11099 = (OD7to11*0.0056179775280898875 );
subj to Cal11295to33547: C11295to33547 = (OD7to7*0.006060606060606061 );
subj to Cal33547to11063: C33547to11063 = (OD7to7*0.006060606060606061 );
subj to Cal2664to116175: C2664to116175 = (OD11to10*0.017543859649122806 );
subj to Cal116175to116172: C116175to116172 = (OD11to10*0.017543859649122806 );
subj to Cal19692to163253: C19692to163253 = (OD11to10*0.021929824561403508 );
subj to Cal163253to11139: C163253to11139 = (OD11to10*0.013157894736842105 );
subj to Cal11142to18782: C11142to18782 = (OD7to7*0.012121212121212121 );
subj to Cal18782to18784: C18782to18784 = (OD7to7*0.012121212121212121 );
subj to Cal11147to11148: C11147to11148 = (OD7to12*0.06666666666666667 );
subj to Cal11169to18946: C11169to18946 = (OD7to7*0.006060606060606061 );
subj to Cal18946to11170: C18946to11170 = (OD7to7*0.006060606060606061 );
subj to Cal6974to76013: C6974to76013 = (OD14to14*0.14285714285714285 );
subj to Cal11170to122348: C11170to122348 = (OD7to7*0.006060606060606061 );
subj to Cal122348to18888: C122348to18888 = (OD7to7*0.006060606060606061 );
subj to Cal18888to18930: C18888to18930 = (OD7to7*0.006060606060606061 );
subj to Cal138965to11249: C138965to11249 = (OD7to7*0.006060606060606061 );
subj to Cal50632to158417: C50632to158417 = (OD11to7*0.006944444444444444 );
subj to Cal18867to122275: C18867to122275 = (OD7to7*0.006060606060606061 );
subj to Cal76013to132913: C76013to132913 = (OD14to14*0.14285714285714285 );
subj to Cal2374to2382: C2374to2382 = (OD4to4*0.023809523809523808 );
subj to Cal2382to2383: C2382to2383 = (OD4to4*0.023809523809523808 );
subj to Cal2383to2384: C2383to2384 = (OD4to4*0.023809523809523808 );
subj to Cal2384to2385: C2384to2385 = (OD4to4*0.047619047619047616 );
subj to Cal2385to241: C2385to241 = (OD4to4*0.023809523809523808 );
subj to Cal2396to2397: C2396to2397 = (OD9to10*1.0 );
subj to Cal2397to2398: C2397to2398 = (OD9to10*1.0 );
subj to Cal2398to2399: C2398to2399 = (OD9to10*1.0 );
subj to Cal2399to2400: C2399to2400 = (OD9to10*1.0 );
subj to Cal2400to2401: C2400to2401 = (OD9to10*1.0 );
subj to Cal2401to148362: C2401to148362 = (OD5to0*0.09090909090909091 );
subj to Cal122275to11110: C122275to11110 = (OD7to7*0.006060606060606061 );
subj to Cal11208to18857: C11208to18857 = (OD7to11*0.0056179775280898875 );
subj to Cal11220to11221: C11220to11221 = (OD7to11*0.0056179775280898875 );
subj to Cal2408to2407: C2408to2407 = (OD5to1*0.020833333333333332 );
subj to Cal11221to11228: C11221to11228 = (OD7to11*0.011235955056179775 );
subj to Cal11228to69231: C11228to69231 = (OD7to11*0.0056179775280898875 );
subj to Cal11228to11229: C11228to11229 = (OD7to11*0.0056179775280898875 );
subj to Cal11235to11236: C11235to11236 = (OD7to11*0.0056179775280898875 );
subj to Cal132913to6975: C132913to6975 = (OD14to14*0.14285714285714285 );
subj to Cal6975to171275: C6975to171275 = (OD14to14*0.14285714285714285 );
subj to Cal5487to7033: C5487to7033 = (OD9to9*0.125 );
subj to Cal7033to7025: C7033to7025 = (OD9to9*0.125 );
subj to Cal7040to7039: C7040to7039 = (OD9to9*0.125 );
subj to Cal7039to7046: C7039to7046 = (OD9to9*0.125 );
subj to Cal11236to11237: C11236to11237 = (OD7to11*0.0056179775280898875 );
subj to Cal11237to11239: C11237to11239 = (OD7to11*0.0056179775280898875 );
subj to Cal48947to11248: C48947to11248 = (OD7to10*0.012195121951219513 );
subj to Cal11248to18754: C11248to18754 = (OD7to10*0.012195121951219513 );
subj to Cal18754to11247: C18754to11247 = (OD7to10*0.012195121951219513 );
subj to Cal11247to11246: C11247to11246 = (OD7to10*0.012195121951219513 );
subj to Cal11246to11251: C11246to11251 = (OD7to10*0.012195121951219513 );
subj to Cal127179to3745: C127179to3745 = (OD5to5*0.0031847133757961785 );
subj to Cal3745to159457: C3745to159457 = (OD5to5*0.0031847133757961785 );
subj to Cal159457to159456: C159457to159456 = (OD5to5*0.0031847133757961785 );
subj to Cal11244to158424: C11244to158424 = (OD7to11*0.0056179775280898875 );
subj to Cal3807to3808: C3807to3808 = (OD5to7*0.1111111111111111 );
subj to Cal158424to11201: C158424to11201 = (OD7to11*0.0056179775280898875 );
subj to Cal11253to169647: C11253to169647 = (OD6to7*0.021739130434782608 );
subj to Cal11254to11255: C11254to11255 = (OD7to11*0.0056179775280898875 );
subj to Cal11255to169646: C11255to169646 = (OD7to11*0.0056179775280898875 );
subj to Cal8402to8403: C8402to8403 = (OD6to0*0.058823529411764705 );
subj to Cal8403to8404: C8403to8404 = (OD6to0*0.058823529411764705 );
subj to Cal8404to8405: C8404to8405 = (OD6to0*0.058823529411764705 );
subj to Cal8405to8406: C8405to8406 = (OD6to0*0.058823529411764705 );
subj to Cal169646to11256: C169646to11256 = (OD7to11*0.0056179775280898875 );
subj to Cal11256to11262: C11256to11262 = (OD7to11*0.0056179775280898875 );
subj to Cal11262to169737: C11262to169737 = (OD7to11*0.0056179775280898875 );
subj to Cal169737to11263: C169737to11263 = (OD7to11*0.0056179775280898875 );
subj to Cal11263to169736: C11263to169736 = (OD7to11*0.0056179775280898875 );
subj to Cal169736to11264: C169736to11264 = (OD7to11*0.0056179775280898875 );
subj to Cal11264to11265: C11264to11265 = (OD7to11*0.0056179775280898875 );
subj to Cal11065to33339: C11065to33339 = (OD7to11*0.011235955056179775 );
subj to Cal33339to11295: C33339to11295 = (OD7to11*0.011235955056179775 );
subj to Cal11299to11300: C11299to11300 = (OD7to7*0.006060606060606061 );
subj to Cal11300to11301: C11300to11301 = (OD7to7*0.006060606060606061 );
subj to Cal11301to122084: C11301to122084 = (OD7to7*0.012121212121212121 );
subj to Cal122084to11302: C122084to11302 = (OD7to7*0.012121212121212121 );
subj to Cal11302to11303: C11302to11303 = (OD7to7*0.01818181818181818 );
subj to Cal11303to127506: C11303to127506 = (OD7to7*0.01818181818181818 );
subj to Cal127506to11304: C127506to11304 = (OD7to7*0.01818181818181818 );
subj to Cal11304to11305: C11304to11305 = (OD7to7*0.01818181818181818 );
subj to Cal11309to11310: C11309to11310 = (OD7to13*0.1111111111111111 );
subj to Cal11317to11318: C11317to11318 = (OD11to7*0.027777777777777776 );
subj to Cal11318to11319: C11318to11319 = (OD11to7*0.027777777777777776 );
subj to Cal11319to11320: C11319to11320 = (OD11to7*0.027777777777777776 );
subj to Cal11320to11321: C11320to11321 = (OD11to7*0.034722222222222224 );
subj to Cal94076to171425: C94076to171425 = (OD5to4*0.012345679012345678 );
subj to Cal171425to28818: C171425to28818 = (OD5to4*0.012345679012345678 );
subj to Cal28818to94092: C28818to94092 = (OD5to4*0.012345679012345678 );
subj to Cal8399to8400: C8399to8400 = (OD6to0*0.058823529411764705 );
subj to Cal8400to8401: C8400to8401 = (OD6to0*0.058823529411764705 );
subj to Cal11321to11322: C11321to11322 = (OD11to7*0.034722222222222224 );
subj to Cal3808to3809: C3808to3809 = (OD5to7*0.1111111111111111 );
subj to Cal79823to7139: C79823to7139 = (OD11to1*0.3333333333333333 );
subj to Cal11322to11323: C11322to11323 = (OD11to7*0.034722222222222224 );
subj to Cal8302to8304: C8302to8304 = (OD12to12*0.02 );
subj to Cal11323to11324: C11323to11324 = (OD11to7*0.034722222222222224 );
subj to Cal8304to8303: C8304to8303 = (OD12to12*0.02 );
subj to Cal11324to169573: C11324to169573 = (OD11to7*0.027777777777777776 );
subj to Cal3809to49621: C3809to49621 = (OD5to7*0.1111111111111111 );
subj to Cal8303to13317: C8303to13317 = (OD12to12*0.02 );
subj to Cal8401to8537: C8401to8537 = (OD6to0*0.058823529411764705 );
subj to Cal8537to8402: C8537to8402 = (OD6to0*0.058823529411764705 );
subj to Cal169573to11325: C169573to11325 = (OD11to7*0.020833333333333332 );
subj to Cal11325to11326: C11325to11326 = (OD11to7*0.006944444444444444 );
subj to Cal166671to166673: C166671to166673 = (OD11to11*0.0035211267605633804 );
subj to Cal166673to2642: C166673to2642 = (OD11to11*0.0035211267605633804 );
subj to Cal2642to2641: C2642to2641 = (OD11to11*0.0035211267605633804 );
subj to Cal13317to138945: C13317to138945 = (OD12to12*0.02 );
subj to Cal25376to25367: C25376to25367 = (OD6to0*0.058823529411764705 );
subj to Cal25367to8413: C25367to8413 = (OD6to0*0.058823529411764705 );
subj to Cal13916to45696: C13916to45696 = (OD12to11*0.03571428571428571 );
subj to Cal45696to130297: C45696to130297 = (OD12to11*0.03571428571428571 );
subj to Cal130297to45687: C130297to45687 = (OD12to11*0.03571428571428571 );
subj to Cal45687to45682: C45687to45682 = (OD12to11*0.03571428571428571 );
subj to Cal45682to45688: C45682to45688 = (OD12to11*0.023809523809523808 );
subj to Cal8413to8399: C8413to8399 = (OD6to0*0.058823529411764705 );
subj to Cal4163to153753: C4163to153753 = (OD0to1*0.25 );
subj to Cal153753to8600: C153753to8600 = (OD0to1*0.25 );
subj to Cal11326to169568: C11326to169568 = (OD11to7*0.006944444444444444 );
subj to Cal169568to11327: C169568to11327 = (OD11to7*0.006944444444444444 );
subj to Cal123340to123334: C123340to123334 = (OD5to14*0.2 );
subj to Cal123334to18470: C123334to18470 = (OD5to14*0.2 );
subj to Cal18470to5314: C18470to5314 = (OD5to14*0.2 );
subj to Cal5314to18471: C5314to18471 = (OD5to14*0.2 );
subj to Cal8600to153742: C8600to153742 = (OD0to1*0.25 );
subj to Cal153742to153740: C153742to153740 = (OD0to1*0.25 );
subj to Cal153740to8601: C153740to8601 = (OD0to1*0.25 );
subj to Cal8601to153580: C8601to153580 = (OD0to1*0.25 );
subj to Cal153580to8602: C153580to8602 = (OD0to1*0.25 );
subj to Cal18471to5315: C18471to5315 = (OD5to14*0.2 );
subj to Cal5315to41116: C5315to41116 = (OD5to14*0.2 );
subj to Cal41116to7103: C41116to7103 = (OD5to14*0.2 );
subj to Cal7103to41115: C7103to41115 = (OD5to14*0.2 );
subj to Cal69205to1633: C69205to1633 = (OD11to11*0.0035211267605633804 );
subj to Cal1633to1632: C1633to1632 = (OD11to11*0.0035211267605633804 );
subj to Cal11325to169572: C11325to169572 = (OD11to7*0.013888888888888888 );
subj to Cal169572to122163: C169572to122163 = (OD11to7*0.006944444444444444 );
subj to Cal169571to11328: C169571to11328 = (OD6to7*0.021739130434782608 );
subj to Cal41115to7104: C41115to7104 = (OD5to14*0.2 );
subj to Cal7104to7105: C7104to7105 = (OD5to14*0.2 );
subj to Cal45688to45693: C45688to45693 = (OD12to11*0.023809523809523808 );
subj to Cal8486to8485: C8486to8485 = (OD0to11*0.3333333333333333 );
subj to Cal7105to41122: C7105to41122 = (OD5to14*0.2 );
subj to Cal7109to41130: C7109to41130 = (OD5to14*0.2 );
subj to Cal41130to18694: C41130to18694 = (OD5to14*0.2 );
subj to Cal18694to18695: C18694to18695 = (OD5to14*0.2 );
subj to Cal8485to168904: C8485to168904 = (OD0to11*0.3333333333333333 );
subj to Cal11379to97149: C11379to97149 = (OD2to9*0.1111111111111111 );
subj to Cal97149to11380: C97149to11380 = (OD2to9*0.1111111111111111 );
subj to Cal1912to11404: C1912to11404 = (OD2to9*0.1111111111111111 );
subj to Cal11404to11405: C11404to11405 = (OD2to9*0.1111111111111111 );
subj to Cal2641to2640: C2641to2640 = (OD11to11*0.0035211267605633804 );
subj to Cal11501to11500: C11501to11500 = (OD4to9*0.09090909090909091 );
subj to Cal171269to5413: C171269to5413 = (OD14to7*0.3333333333333333 );
subj to Cal45693to45690: C45693to45690 = (OD12to11*0.023809523809523808 );
subj to Cal25296to11558: C25296to11558 = (OD14to14*0.14285714285714285 );
subj to Cal2640to150217: C2640to150217 = (OD11to11*0.0035211267605633804 );
subj to Cal168904to8484: C168904to8484 = (OD0to11*0.3333333333333333 );
subj to Cal45690to45694: C45690to45694 = (OD12to11*0.023809523809523808 );

solve;
printf "\n\n#QUALIDADE DE FLUXO NOS SENSORES:\n";
printf "!C8616to8617: %3d / 1 = %10.2f \n", C8616to8617, C8616to8617/1;
printf "!C45694to135255: %3d / 3 = %10.2f \n", C45694to135255, C45694to135255/3;
printf "!C7142to160021: %3d / 1 = %10.2f \n", C7142to160021, C7142to160021/1;
printf "!C135255to3837: %3d / 3 = %10.2f \n", C135255to3837, C135255to3837/3;
printf "!C146909to8621: %3d / 1 = %10.2f \n", C146909to8621, C146909to8621/1;
printf "!C8621to8622: %3d / 1 = %10.2f \n", C8621to8622, C8621to8622/1;
printf "!C8622to27426: %3d / 1 = %10.2f \n", C8622to27426, C8622to27426/1;
printf "!C160021to160020: %3d / 1 = %10.2f \n", C160021to160020, C160021to160020/1;
printf "!C160020to7316: %3d / 2 = %10.2f \n", C160020to7316, C160020to7316/2;
printf "!C7316to160018: %3d / 2 = %10.2f \n", C7316to160018, C7316to160018/2;
printf "!C27426to146907: %3d / 1 = %10.2f \n", C27426to146907, C27426to146907/1;
printf "!C146907to8623: %3d / 1 = %10.2f \n", C146907to8623, C146907to8623/1;
printf "!C160018to7317: %3d / 2 = %10.2f \n", C160018to7317, C160018to7317/2;
printf "!C7317to160012: %3d / 1 = %10.2f \n", C7317to160012, C7317to160012/1;
printf "!C160012to160009: %3d / 1 = %10.2f \n", C160012to160009, C160012to160009/1;
printf "!C160009to160007: %3d / 1 = %10.2f \n", C160009to160007, C160009to160007/1;
printf "!C160007to7318: %3d / 1 = %10.2f \n", C160007to7318, C160007to7318/1;
printf "!C7318to160004: %3d / 1 = %10.2f \n", C7318to160004, C7318to160004/1;
printf "!C8684to122806: %3d / 2 = %10.2f \n", C8684to122806, C8684to122806/2;
printf "!C3837to140136: %3d / 3 = %10.2f \n", C3837to140136, C3837to140136/3;
printf "!C140136to126927: %3d / 2 = %10.2f \n", C140136to126927, C140136to126927/2;
printf "!C160004to160003: %3d / 1 = %10.2f \n", C160004to160003, C160004to160003/1;
printf "!C160003to7319: %3d / 1 = %10.2f \n", C160003to7319, C160003to7319/1;
printf "!C3850to3851: %3d / 1 = %10.2f \n", C3850to3851, C3850to3851/1;
printf "!C2892to2901: %3d / 2 = %10.2f \n", C2892to2901, C2892to2901/2;
printf "!C2901to2902: %3d / 2 = %10.2f \n", C2901to2902, C2901to2902/2;
printf "!C2902to2903: %3d / 2 = %10.2f \n", C2902to2903, C2902to2903/2;
printf "!C7319to160005: %3d / 1 = %10.2f \n", C7319to160005, C7319to160005/1;
printf "!C160005to160006: %3d / 1 = %10.2f \n", C160005to160006, C160005to160006/1;
printf "!C160006to7320: %3d / 1 = %10.2f \n", C160006to7320, C160006to7320/1;
printf "!C7320to160011: %3d / 1 = %10.2f \n", C7320to160011, C7320to160011/1;
printf "!C160011to160013: %3d / 1 = %10.2f \n", C160011to160013, C160011to160013/1;
printf "!C160013to7321: %3d / 1 = %10.2f \n", C160013to7321, C160013to7321/1;
printf "!C7321to160019: %3d / 1 = %10.2f \n", C7321to160019, C7321to160019/1;
printf "!C3851to129773: %3d / 1 = %10.2f \n", C3851to129773, C3851to129773/1;
printf "!C129773to3852: %3d / 1 = %10.2f \n", C129773to3852, C129773to3852/1;
printf "!C160019to7322: %3d / 1 = %10.2f \n", C160019to7322, C160019to7322/1;
printf "!C122806to9073: %3d / 2 = %10.2f \n", C122806to9073, C122806to9073/2;
printf "!C2662to2663: %3d / 4 = %10.2f \n", C2662to2663, C2662to2663/4;
printf "!C2663to2664: %3d / 4 = %10.2f \n", C2663to2664, C2663to2664/4;
printf "!C8905to8948: %3d / 2 = %10.2f \n", C8905to8948, C8905to8948/2;
printf "!C7388to7389: %3d / 1 = %10.2f \n", C7388to7389, C7388to7389/1;
printf "!C7389to7390: %3d / 1 = %10.2f \n", C7389to7390, C7389to7390/1;
printf "!C7390to7391: %3d / 1 = %10.2f \n", C7390to7391, C7390to7391/1;
printf "!C7391to7392: %3d / 1 = %10.2f \n", C7391to7392, C7391to7392/1;
printf "!C1321to124772: %3d / 1 = %10.2f \n", C1321to124772, C1321to124772/1;
printf "!C7392to7393: %3d / 1 = %10.2f \n", C7392to7393, C7392to7393/1;
printf "!C3852to3846: %3d / 1 = %10.2f \n", C3852to3846, C3852to3846/1;
printf "!C7393to7394: %3d / 1 = %10.2f \n", C7393to7394, C7393to7394/1;
printf "!C7394to7395: %3d / 1 = %10.2f \n", C7394to7395, C7394to7395/1;
printf "!C7395to7563: %3d / 1 = %10.2f \n", C7395to7563, C7395to7563/1;
printf "!C7229to7230: %3d / 1 = %10.2f \n", C7229to7230, C7229to7230/1;
printf "!C7230to7231: %3d / 1 = %10.2f \n", C7230to7231, C7230to7231/1;
printf "!C3846to3847: %3d / 1 = %10.2f \n", C3846to3847, C3846to3847/1;
printf "!C3847to3848: %3d / 1 = %10.2f \n", C3847to3848, C3847to3848/1;
printf "!C3848to3849: %3d / 1 = %10.2f \n", C3848to3849, C3848to3849/1;
printf "!C7231to7232: %3d / 1 = %10.2f \n", C7231to7232, C7231to7232/1;
printf "!C2039to120710: %3d / 1 = %10.2f \n", C2039to120710, C2039to120710/1;
printf "!C7232to7233: %3d / 1 = %10.2f \n", C7232to7233, C7232to7233/1;
printf "!C7233to7234: %3d / 1 = %10.2f \n", C7233to7234, C7233to7234/1;
printf "!C8937to8938: %3d / 2 = %10.2f \n", C8937to8938, C8937to8938/2;
printf "!C7234to7235: %3d / 1 = %10.2f \n", C7234to7235, C7234to7235/1;
printf "!C120710to2040: %3d / 1 = %10.2f \n", C120710to2040, C120710to2040/1;
printf "!C2040to2041: %3d / 1 = %10.2f \n", C2040to2041, C2040to2041/1;
printf "!C8938to8939: %3d / 1 = %10.2f \n", C8938to8939, C8938to8939/1;
printf "!C8939to8940: %3d / 1 = %10.2f \n", C8939to8940, C8939to8940/1;
printf "!C3857to3856: %3d / 3 = %10.2f \n", C3857to3856, C3857to3856/3;
printf "!C8948to118872: %3d / 3 = %10.2f \n", C8948to118872, C8948to118872/3;
printf "!C118872to8949: %3d / 3 = %10.2f \n", C118872to8949, C118872to8949/3;
printf "!C8949to118870: %3d / 2 = %10.2f \n", C8949to118870, C8949to118870/2;
printf "!C118870to8836: %3d / 2 = %10.2f \n", C118870to8836, C118870to8836/2;
printf "!C3857to3858: %3d / 1 = %10.2f \n", C3857to3858, C3857to3858/1;
printf "!C3858to3857: %3d / 2 = %10.2f \n", C3858to3857, C3858to3857/2;
printf "!C7235to7236: %3d / 1 = %10.2f \n", C7235to7236, C7235to7236/1;
printf "!C3859to3858: %3d / 2 = %10.2f \n", C3859to3858, C3859to3858/2;
printf "!C3836to3859: %3d / 2 = %10.2f \n", C3836to3859, C3836to3859/2;
printf "!C3860to853: %3d / 1 = %10.2f \n", C3860to853, C3860to853/1;
printf "!C3861to3860: %3d / 1 = %10.2f \n", C3861to3860, C3861to3860/1;
printf "!C8836to8937: %3d / 2 = %10.2f \n", C8836to8937, C8836to8937/2;
printf "!C9067to8963: %3d / 3 = %10.2f \n", C9067to8963, C9067to8963/3;
printf "!C9016to9062: %3d / 2 = %10.2f \n", C9016to9062, C9016to9062/2;
printf "!C9062to9063: %3d / 3 = %10.2f \n", C9062to9063, C9062to9063/3;
printf "!C7236to7237: %3d / 1 = %10.2f \n", C7236to7237, C7236to7237/1;
printf "!C7237to7238: %3d / 1 = %10.2f \n", C7237to7238, C7237to7238/1;
printf "!C7238to7239: %3d / 1 = %10.2f \n", C7238to7239, C7238to7239/1;
printf "!C9063to141758: %3d / 3 = %10.2f \n", C9063to141758, C9063to141758/3;
printf "!C7239to7240: %3d / 1 = %10.2f \n", C7239to7240, C7239to7240/1;
printf "!C141758to9064: %3d / 3 = %10.2f \n", C141758to9064, C141758to9064/3;
printf "!C7240to7241: %3d / 1 = %10.2f \n", C7240to7241, C7240to7241/1;
printf "!C3861to3857: %3d / 2 = %10.2f \n", C3861to3857, C3861to3857/2;
printf "!C9064to141759: %3d / 3 = %10.2f \n", C9064to141759, C9064to141759/3;
printf "!C7241to7242: %3d / 1 = %10.2f \n", C7241to7242, C7241to7242/1;
printf "!C141759to9065: %3d / 3 = %10.2f \n", C141759to9065, C141759to9065/3;
printf "!C7242to7243: %3d / 1 = %10.2f \n", C7242to7243, C7242to7243/1;
printf "!C7243to7244: %3d / 1 = %10.2f \n", C7243to7244, C7243to7244/1;
printf "!C1351to11060: %3d / 4 = %10.2f \n", C1351to11060, C1351to11060/4;
printf "!C3402to143395: %3d / 3 = %10.2f \n", C3402to143395, C3402to143395/3;
printf "!C7244to7245: %3d / 1 = %10.2f \n", C7244to7245, C7244to7245/1;
printf "!C9065to141760: %3d / 3 = %10.2f \n", C9065to141760, C9065to141760/3;
printf "!C141760to9066: %3d / 3 = %10.2f \n", C141760to9066, C141760to9066/3;
printf "!C9066to9067: %3d / 3 = %10.2f \n", C9066to9067, C9066to9067/3;
printf "!C9132to9115: %3d / 1 = %10.2f \n", C9132to9115, C9132to9115/1;
printf "!C144255to9130: %3d / 1 = %10.2f \n", C144255to9130, C144255to9130/1;
printf "!C9130to43195: %3d / 1 = %10.2f \n", C9130to43195, C9130to43195/1;
printf "!C143395to143392: %3d / 4 = %10.2f \n", C143395to143392, C143395to143392/4;
printf "!C143392to3395: %3d / 4 = %10.2f \n", C143392to3395, C143392to3395/4;
printf "!C7245to7246: %3d / 1 = %10.2f \n", C7245to7246, C7245to7246/1;
printf "!C7246to7247: %3d / 1 = %10.2f \n", C7246to7247, C7246to7247/1;
printf "!C7247to7248: %3d / 1 = %10.2f \n", C7247to7248, C7247to7248/1;
printf "!C43195to9131: %3d / 1 = %10.2f \n", C43195to9131, C43195to9131/1;
printf "!C9131to43198: %3d / 1 = %10.2f \n", C9131to43198, C9131to43198/1;
printf "!C43198to9132: %3d / 1 = %10.2f \n", C43198to9132, C43198to9132/1;
printf "!C4101to29501: %3d / 1 = %10.2f \n", C4101to29501, C4101to29501/1;
printf "!C9312to9288: %3d / 1 = %10.2f \n", C9312to9288, C9312to9288/1;
printf "!C153432to153430: %3d / 1 = %10.2f \n", C153432to153430, C153432to153430/1;
printf "!C153430to286: %3d / 1 = %10.2f \n", C153430to286, C153430to286/1;
printf "!C286to153427: %3d / 1 = %10.2f \n", C286to153427, C286to153427/1;
printf "!C153427to153425: %3d / 1 = %10.2f \n", C153427to153425, C153427to153425/1;
printf "!C153425to153424: %3d / 1 = %10.2f \n", C153425to153424, C153425to153424/1;
printf "!C153424to287: %3d / 1 = %10.2f \n", C153424to287, C153424to287/1;
printf "!C287to288: %3d / 1 = %10.2f \n", C287to288, C287to288/1;
printf "!C9288to143030: %3d / 1 = %10.2f \n", C9288to143030, C9288to143030/1;
printf "!C143030to9289: %3d / 1 = %10.2f \n", C143030to9289, C143030to9289/1;
printf "!C9311to9312: %3d / 2 = %10.2f \n", C9311to9312, C9311to9312/2;
printf "!C89098to143029: %3d / 2 = %10.2f \n", C89098to143029, C89098to143029/2;
printf "!C143029to9313: %3d / 2 = %10.2f \n", C143029to9313, C143029to9313/2;
printf "!C517to4959: %3d / 2 = %10.2f \n", C517to4959, C517to4959/2;
printf "!C4959to519: %3d / 2 = %10.2f \n", C4959to519, C4959to519/2;
printf "!C519to521: %3d / 2 = %10.2f \n", C519to521, C519to521/2;
printf "!C521to143453: %3d / 2 = %10.2f \n", C521to143453, C521to143453/2;
printf "!C143453to531: %3d / 2 = %10.2f \n", C143453to531, C143453to531/2;
printf "!C531to143454: %3d / 2 = %10.2f \n", C531to143454, C531to143454/2;
printf "!C9313to9314: %3d / 2 = %10.2f \n", C9313to9314, C9313to9314/2;
printf "!C9314to143028: %3d / 2 = %10.2f \n", C9314to143028, C9314to143028/2;
printf "!C725to153490: %3d / 3 = %10.2f \n", C725to153490, C725to153490/3;
printf "!C153490to2012: %3d / 3 = %10.2f \n", C153490to2012, C153490to2012/3;
printf "!C2012to153486: %3d / 3 = %10.2f \n", C2012to153486, C2012to153486/3;
printf "!C153486to153484: %3d / 3 = %10.2f \n", C153486to153484, C153486to153484/3;
printf "!C153484to153481: %3d / 3 = %10.2f \n", C153484to153481, C153484to153481/3;
printf "!C153481to583: %3d / 3 = %10.2f \n", C153481to583, C153481to583/3;
printf "!C583to153477: %3d / 3 = %10.2f \n", C583to153477, C583to153477/3;
printf "!C153477to2013: %3d / 3 = %10.2f \n", C153477to2013, C153477to2013/3;
printf "!C2013to153473: %3d / 3 = %10.2f \n", C2013to153473, C2013to153473/3;
printf "!C153473to582: %3d / 3 = %10.2f \n", C153473to582, C153473to582/3;
printf "!C582to153471: %3d / 3 = %10.2f \n", C582to153471, C582to153471/3;
printf "!C153471to2014: %3d / 3 = %10.2f \n", C153471to2014, C153471to2014/3;
printf "!C143028to9302: %3d / 1 = %10.2f \n", C143028to9302, C143028to9302/1;
printf "!C3395to3403: %3d / 4 = %10.2f \n", C3395to3403, C3395to3403/4;
printf "!C9302to9303: %3d / 1 = %10.2f \n", C9302to9303, C9302to9303/1;
printf "!C7248to4134: %3d / 1 = %10.2f \n", C7248to4134, C7248to4134/1;
printf "!C7647to7646: %3d / 1 = %10.2f \n", C7647to7646, C7647to7646/1;
printf "!C133218to7647: %3d / 1 = %10.2f \n", C133218to7647, C133218to7647/1;
printf "!C7648to133218: %3d / 1 = %10.2f \n", C7648to133218, C7648to133218/1;
printf "!C133235to7648: %3d / 1 = %10.2f \n", C133235to7648, C133235to7648/1;
printf "!C9303to143027: %3d / 1 = %10.2f \n", C9303to143027, C9303to143027/1;
printf "!C3408to3397: %3d / 4 = %10.2f \n", C3408to3397, C3408to3397/4;
printf "!C3397to3409: %3d / 4 = %10.2f \n", C3397to3409, C3397to3409/4;
printf "!C3409to143383: %3d / 4 = %10.2f \n", C3409to143383, C3409to143383/4;
printf "!C143383to3410: %3d / 4 = %10.2f \n", C143383to3410, C143383to3410/4;
printf "!C3401to165585: %3d / 3 = %10.2f \n", C3401to165585, C3401to165585/3;
printf "!C165585to3402: %3d / 3 = %10.2f \n", C165585to3402, C165585to3402/3;
printf "!C29474to133235: %3d / 1 = %10.2f \n", C29474to133235, C29474to133235/1;
printf "!C143027to89079: %3d / 1 = %10.2f \n", C143027to89079, C143027to89079/1;
printf "!C89079to9304: %3d / 1 = %10.2f \n", C89079to9304, C89079to9304/1;
printf "!C49702to7720: %3d / 1 = %10.2f \n", C49702to7720, C49702to7720/1;
printf "!C7720to122530: %3d / 1 = %10.2f \n", C7720to122530, C7720to122530/1;
printf "!C122530to116714: %3d / 1 = %10.2f \n", C122530to116714, C122530to116714/1;
printf "!C116714to49638: %3d / 1 = %10.2f \n", C116714to49638, C116714to49638/1;
printf "!C49638to7725: %3d / 1 = %10.2f \n", C49638to7725, C49638to7725/1;
printf "!C153498to153502: %3d / 1 = %10.2f \n", C153498to153502, C153498to153502/1;
printf "!C153502to153505: %3d / 1 = %10.2f \n", C153502to153505, C153502to153505/1;
printf "!C153505to593: %3d / 1 = %10.2f \n", C153505to593, C153505to593/1;
printf "!C593to153508: %3d / 1 = %10.2f \n", C593to153508, C593to153508/1;
printf "!C153508to594: %3d / 1 = %10.2f \n", C153508to594, C153508to594/1;
printf "!C594to679: %3d / 1 = %10.2f \n", C594to679, C594to679/1;
printf "!C138091to138092: %3d / 1 = %10.2f \n", C138091to138092, C138091to138092/1;
printf "!C138092to138185: %3d / 1 = %10.2f \n", C138092to138185, C138092to138185/1;
printf "!C138185to776: %3d / 1 = %10.2f \n", C138185to776, C138185to776/1;
printf "!C4975to4982: %3d / 1 = %10.2f \n", C4975to4982, C4975to4982/1;
printf "!C4982to4983: %3d / 1 = %10.2f \n", C4982to4983, C4982to4983/1;
printf "!C9343to9344: %3d / 1 = %10.2f \n", C9343to9344, C9343to9344/1;
printf "!C9344to9318: %3d / 1 = %10.2f \n", C9344to9318, C9344to9318/1;
printf "!C7795to49672: %3d / 1 = %10.2f \n", C7795to49672, C7795to49672/1;
printf "!C133215to7795: %3d / 1 = %10.2f \n", C133215to7795, C133215to7795/1;
printf "!C7801to133215: %3d / 1 = %10.2f \n", C7801to133215, C7801to133215/1;
printf "!C7784to7801: %3d / 1 = %10.2f \n", C7784to7801, C7784to7801/1;
printf "!C127731to7784: %3d / 1 = %10.2f \n", C127731to7784, C127731to7784/1;
printf "!C9349to9348: %3d / 3 = %10.2f \n", C9349to9348, C9349to9348/3;
printf "!C9348to9347: %3d / 3 = %10.2f \n", C9348to9347, C9348to9347/3;
printf "!C9323to9354: %3d / 3 = %10.2f \n", C9323to9354, C9323to9354/3;
printf "!C9354to142181: %3d / 3 = %10.2f \n", C9354to142181, C9354to142181/3;
printf "!C142181to9355: %3d / 3 = %10.2f \n", C142181to9355, C142181to9355/3;
printf "!C9355to142183: %3d / 3 = %10.2f \n", C9355to142183, C9355to142183/3;
printf "!C131008to131004: %3d / 1 = %10.2f \n", C131008to131004, C131008to131004/1;
printf "!C131004to131006: %3d / 1 = %10.2f \n", C131004to131006, C131004to131006/1;
printf "!C131006to131003: %3d / 1 = %10.2f \n", C131006to131003, C131006to131003/1;
printf "!C131003to9370: %3d / 1 = %10.2f \n", C131003to9370, C131003to9370/1;
printf "!C9370to131000: %3d / 1 = %10.2f \n", C9370to131000, C9370to131000/1;
printf "!C9637to9624: %3d / 1 = %10.2f \n", C9637to9624, C9637to9624/1;
printf "!C9624to170743: %3d / 1 = %10.2f \n", C9624to170743, C9624to170743/1;
printf "!C170743to9641: %3d / 1 = %10.2f \n", C170743to9641, C170743to9641/1;
printf "!C127730to127731: %3d / 1 = %10.2f \n", C127730to127731, C127730to127731/1;
printf "!C7816to158788: %3d / 1 = %10.2f \n", C7816to158788, C7816to158788/1;
printf "!C146288to146287: %3d / 1 = %10.2f \n", C146288to146287, C146288to146287/1;
printf "!C9641to9632: %3d / 1 = %10.2f \n", C9641to9632, C9641to9632/1;
printf "!C146287to146286: %3d / 1 = %10.2f \n", C146287to146286, C146287to146286/1;
printf "!C160343to143520: %3d / 1 = %10.2f \n", C160343to143520, C160343to143520/1;
printf "!C143520to49698: %3d / 1 = %10.2f \n", C143520to49698, C143520to49698/1;
printf "!C122940to143636: %3d / 1 = %10.2f \n", C122940to143636, C122940to143636/1;
printf "!C2993to2994: %3d / 1 = %10.2f \n", C2993to2994, C2993to2994/1;
printf "!C49698to49703: %3d / 1 = %10.2f \n", C49698to49703, C49698to49703/1;
printf "!C143636to5161: %3d / 1 = %10.2f \n", C143636to5161, C143636to5161/1;
printf "!C5161to5162: %3d / 1 = %10.2f \n", C5161to5162, C5161to5162/1;
printf "!C314to318: %3d / 1 = %10.2f \n", C314to318, C314to318/1;
printf "!C5162to5163: %3d / 1 = %10.2f \n", C5162to5163, C5162to5163/1;
printf "!C5163to5164: %3d / 1 = %10.2f \n", C5163to5164, C5163to5164/1;
printf "!C19627to19626: %3d / 1 = %10.2f \n", C19627to19626, C19627to19626/1;
printf "!C19626to19625: %3d / 1 = %10.2f \n", C19626to19625, C19626to19625/1;
printf "!C19625to19624: %3d / 1 = %10.2f \n", C19625to19624, C19625to19624/1;
printf "!C19624to43716: %3d / 1 = %10.2f \n", C19624to43716, C19624to43716/1;
printf "!C5164to5165: %3d / 1 = %10.2f \n", C5164to5165, C5164to5165/1;
printf "!C5165to5166: %3d / 1 = %10.2f \n", C5165to5166, C5165to5166/1;
printf "!C5166to5167: %3d / 1 = %10.2f \n", C5166to5167, C5166to5167/1;
printf "!C49703to49619: %3d / 1 = %10.2f \n", C49703to49619, C49703to49619/1;
printf "!C5167to5168: %3d / 1 = %10.2f \n", C5167to5168, C5167to5168/1;
printf "!C5168to5169: %3d / 1 = %10.2f \n", C5168to5169, C5168to5169/1;
printf "!C5169to5170: %3d / 1 = %10.2f \n", C5169to5170, C5169to5170/1;
printf "!C49619to49724: %3d / 1 = %10.2f \n", C49619to49724, C49619to49724/1;
printf "!C2292to9798: %3d / 1 = %10.2f \n", C2292to9798, C2292to9798/1;
printf "!C9799to168401: %3d / 1 = %10.2f \n", C9799to168401, C9799to168401/1;
printf "!C49724to49665: %3d / 1 = %10.2f \n", C49724to49665, C49724to49665/1;
printf "!C5170to5171: %3d / 1 = %10.2f \n", C5170to5171, C5170to5171/1;
printf "!C168401to9800: %3d / 1 = %10.2f \n", C168401to9800, C168401to9800/1;
printf "!C5171to4659: %3d / 1 = %10.2f \n", C5171to4659, C5171to4659/1;
printf "!C49665to124922: %3d / 1 = %10.2f \n", C49665to124922, C49665to124922/1;
printf "!C124922to146150: %3d / 1 = %10.2f \n", C124922to146150, C124922to146150/1;
printf "!C146150to125364: %3d / 1 = %10.2f \n", C146150to125364, C146150to125364/1;
printf "!C135077to69925: %3d / 1 = %10.2f \n", C135077to69925, C135077to69925/1;
printf "!C5312to40323: %3d / 3 = %10.2f \n", C5312to40323, C5312to40323/3;
printf "!C9826to9827: %3d / 1 = %10.2f \n", C9826to9827, C9826to9827/1;
printf "!C9843to9831: %3d / 1 = %10.2f \n", C9843to9831, C9843to9831/1;
printf "!C9831to9832: %3d / 1 = %10.2f \n", C9831to9832, C9831to9832/1;
printf "!C9835to9843: %3d / 1 = %10.2f \n", C9835to9843, C9835to9843/1;
printf "!C9832to9844: %3d / 1 = %10.2f \n", C9832to9844, C9832to9844/1;
printf "!C125364to49637: %3d / 1 = %10.2f \n", C125364to49637, C125364to49637/1;
printf "!C9844to9845: %3d / 1 = %10.2f \n", C9844to9845, C9844to9845/1;
printf "!C40323to163393: %3d / 3 = %10.2f \n", C40323to163393, C40323to163393/3;
printf "!C163393to5311: %3d / 3 = %10.2f \n", C163393to5311, C163393to5311/3;
printf "!C49637to49633: %3d / 1 = %10.2f \n", C49637to49633, C49637to49633/1;
printf "!C49633to10298: %3d / 1 = %10.2f \n", C49633to10298, C49633to10298/1;
printf "!C5311to40324: %3d / 3 = %10.2f \n", C5311to40324, C5311to40324/3;
printf "!C40324to5310: %3d / 3 = %10.2f \n", C40324to5310, C40324to5310/3;
printf "!C7836to7853: %3d / 1 = %10.2f \n", C7836to7853, C7836to7853/1;
printf "!C142501to142498: %3d / 3 = %10.2f \n", C142501to142498, C142501to142498/3;
printf "!C142498to142500: %3d / 3 = %10.2f \n", C142498to142500, C142498to142500/3;
printf "!C142500to142499: %3d / 3 = %10.2f \n", C142500to142499, C142500to142499/3;
printf "!C142499to142502: %3d / 3 = %10.2f \n", C142499to142502, C142499to142502/3;
printf "!C142502to142659: %3d / 3 = %10.2f \n", C142502to142659, C142502to142659/3;
printf "!C142659to3065: %3d / 3 = %10.2f \n", C142659to3065, C142659to3065/3;
printf "!C3065to355: %3d / 3 = %10.2f \n", C3065to355, C3065to355/3;
printf "!C355to148339: %3d / 3 = %10.2f \n", C355to148339, C355to148339/3;
printf "!C148339to142658: %3d / 4 = %10.2f \n", C148339to142658, C148339to142658/4;
printf "!C142658to152918: %3d / 4 = %10.2f \n", C142658to152918, C142658to152918/4;
printf "!C5310to163394: %3d / 3 = %10.2f \n", C5310to163394, C5310to163394/3;
printf "!C152707to152745: %3d / 2 = %10.2f \n", C152707to152745, C152707to152745/2;
printf "!C163394to40336: %3d / 3 = %10.2f \n", C163394to40336, C163394to40336/3;
printf "!C8963to9887: %3d / 3 = %10.2f \n", C8963to9887, C8963to9887/3;
printf "!C9887to9888: %3d / 3 = %10.2f \n", C9887to9888, C9887to9888/3;
printf "!C152745to152673: %3d / 1 = %10.2f \n", C152745to152673, C152745to152673/1;
printf "!C25121to46745: %3d / 2 = %10.2f \n", C25121to46745, C25121to46745/2;
printf "!C46745to46784: %3d / 2 = %10.2f \n", C46745to46784, C46745to46784/2;
printf "!C46784to46785: %3d / 2 = %10.2f \n", C46784to46785, C46784to46785/2;
printf "!C46785to132336: %3d / 2 = %10.2f \n", C46785to132336, C46785to132336/2;
printf "!C132336to132326: %3d / 2 = %10.2f \n", C132336to132326, C132336to132326/2;
printf "!C132326to46760: %3d / 2 = %10.2f \n", C132326to46760, C132326to46760/2;
printf "!C46760to46740: %3d / 2 = %10.2f \n", C46760to46740, C46760to46740/2;
printf "!C46740to131182: %3d / 2 = %10.2f \n", C46740to131182, C46740to131182/2;
printf "!C9888to9889: %3d / 3 = %10.2f \n", C9888to9889, C9888to9889/3;
printf "!C9889to9890: %3d / 3 = %10.2f \n", C9889to9890, C9889to9890/3;
printf "!C152673to152580: %3d / 1 = %10.2f \n", C152673to152580, C152673to152580/1;
printf "!C131182to46778: %3d / 2 = %10.2f \n", C131182to46778, C131182to46778/2;
printf "!C9890to9891: %3d / 3 = %10.2f \n", C9890to9891, C9890to9891/3;
printf "!C9891to9892: %3d / 3 = %10.2f \n", C9891to9892, C9891to9892/3;
printf "!C9892to9893: %3d / 3 = %10.2f \n", C9892to9893, C9892to9893/3;
printf "!C40336to5309: %3d / 3 = %10.2f \n", C40336to5309, C40336to5309/3;
printf "!C46778to46761: %3d / 2 = %10.2f \n", C46778to46761, C46778to46761/2;
printf "!C46761to46729: %3d / 2 = %10.2f \n", C46761to46729, C46761to46729/2;
printf "!C8679to163189: %3d / 1 = %10.2f \n", C8679to163189, C8679to163189/1;
printf "!C163189to8683: %3d / 1 = %10.2f \n", C163189to8683, C163189to8683/1;
printf "!C8683to163188: %3d / 1 = %10.2f \n", C8683to163188, C8683to163188/1;
printf "!C163188to8710: %3d / 1 = %10.2f \n", C163188to8710, C163188to8710/1;
printf "!C152580to152829: %3d / 1 = %10.2f \n", C152580to152829, C152580to152829/1;
printf "!C8710to144315: %3d / 2 = %10.2f \n", C8710to144315, C8710to144315/2;
printf "!C9911to8684: %3d / 2 = %10.2f \n", C9911to8684, C9911to8684/2;
printf "!C8520to8507: %3d / 1 = %10.2f \n", C8520to8507, C8520to8507/1;
printf "!C10265to10274: %3d / 1 = %10.2f \n", C10265to10274, C10265to10274/1;
printf "!C10274to10273: %3d / 4 = %10.2f \n", C10274to10273, C10274to10273/4;
printf "!C5309to40330: %3d / 4 = %10.2f \n", C5309to40330, C5309to40330/4;
printf "!C46729to46739: %3d / 1 = %10.2f \n", C46729to46739, C46729to46739/1;
printf "!C46739to46728: %3d / 1 = %10.2f \n", C46739to46728, C46739to46728/1;
printf "!C10273to146228: %3d / 6 = %10.2f \n", C10273to146228, C10273to146228/6;
printf "!C131048to7909: %3d / 2 = %10.2f \n", C131048to7909, C131048to7909/2;
printf "!C2706to162843: %3d / 8 = %10.2f \n", C2706to162843, C2706to162843/8;
printf "!C162843to2696: %3d / 8 = %10.2f \n", C162843to2696, C162843to2696/8;
printf "!C7909to152808: %3d / 1 = %10.2f \n", C7909to152808, C7909to152808/1;
printf "!C48955to119668: %3d / 1 = %10.2f \n", C48955to119668, C48955to119668/1;
printf "!C119668to29343: %3d / 1 = %10.2f \n", C119668to29343, C119668to29343/1;
printf "!C152808to152564: %3d / 1 = %10.2f \n", C152808to152564, C152808to152564/1;
printf "!C46728to46757: %3d / 1 = %10.2f \n", C46728to46757, C46728to46757/1;
printf "!C152564to152676: %3d / 1 = %10.2f \n", C152564to152676, C152564to152676/1;
printf "!C46757to46774: %3d / 1 = %10.2f \n", C46757to46774, C46757to46774/1;
printf "!C152676to152814: %3d / 1 = %10.2f \n", C152676to152814, C152676to152814/1;
printf "!C46774to3176: %3d / 1 = %10.2f \n", C46774to3176, C46774to3176/1;
printf "!C3176to132204: %3d / 1 = %10.2f \n", C3176to132204, C3176to132204/1;
printf "!C132204to46720: %3d / 1 = %10.2f \n", C132204to46720, C132204to46720/1;
printf "!C46720to3177: %3d / 1 = %10.2f \n", C46720to3177, C46720to3177/1;
printf "!C152814to152565: %3d / 1 = %10.2f \n", C152814to152565, C152814to152565/1;
printf "!C10261to146242: %3d / 2 = %10.2f \n", C10261to146242, C10261to146242/2;
printf "!C146242to146239: %3d / 2 = %10.2f \n", C146242to146239, C146242to146239/2;
printf "!C146239to104998: %3d / 2 = %10.2f \n", C146239to104998, C146239to104998/2;
printf "!C104998to159882: %3d / 2 = %10.2f \n", C104998to159882, C104998to159882/2;
printf "!C10257to146240: %3d / 2 = %10.2f \n", C10257to146240, C10257to146240/2;
printf "!C146240to10261: %3d / 2 = %10.2f \n", C146240to10261, C146240to10261/2;
printf "!C10282to126717: %3d / 1 = %10.2f \n", C10282to126717, C10282to126717/1;
printf "!C126717to10279: %3d / 1 = %10.2f \n", C126717to10279, C126717to10279/1;
printf "!C152565to152740: %3d / 1 = %10.2f \n", C152565to152740, C152565to152740/1;
printf "!C10279to129851: %3d / 1 = %10.2f \n", C10279to129851, C10279to129851/1;
printf "!C129851to10283: %3d / 1 = %10.2f \n", C129851to10283, C129851to10283/1;
printf "!C3595to119757: %3d / 2 = %10.2f \n", C3595to119757, C3595to119757/2;
printf "!C119757to1280: %3d / 2 = %10.2f \n", C119757to1280, C119757to1280/2;
printf "!C1280to119752: %3d / 3 = %10.2f \n", C1280to119752, C1280to119752/3;
printf "!C119752to119750: %3d / 3 = %10.2f \n", C119752to119750, C119752to119750/3;
printf "!C119750to1560: %3d / 3 = %10.2f \n", C119750to1560, C119750to1560/3;
printf "!C1560to1281: %3d / 3 = %10.2f \n", C1560to1281, C1560to1281/3;
printf "!C1281to1286: %3d / 3 = %10.2f \n", C1281to1286, C1281to1286/3;
printf "!C1286to132810: %3d / 3 = %10.2f \n", C1286to132810, C1286to132810/3;
printf "!C132810to132813: %3d / 3 = %10.2f \n", C132810to132813, C132810to132813/3;
printf "!C10283to129847: %3d / 1 = %10.2f \n", C10283to129847, C10283to129847/1;
printf "!C129847to10280: %3d / 2 = %10.2f \n", C129847to10280, C129847to10280/2;
printf "!C10280to129841: %3d / 2 = %10.2f \n", C10280to129841, C10280to129841/2;
printf "!C129841to10281: %3d / 2 = %10.2f \n", C129841to10281, C129841to10281/2;
printf "!C10281to129823: %3d / 2 = %10.2f \n", C10281to129823, C10281to129823/2;
printf "!C122457to10291: %3d / 1 = %10.2f \n", C122457to10291, C122457to10291/1;
printf "!C10292to10284: %3d / 2 = %10.2f \n", C10292to10284, C10292to10284/2;
printf "!C122474to10292: %3d / 2 = %10.2f \n", C122474to10292, C122474to10292/2;
printf "!C3177to3178: %3d / 1 = %10.2f \n", C3177to3178, C3177to3178/1;
printf "!C10285to122474: %3d / 2 = %10.2f \n", C10285to122474, C10285to122474/2;
printf "!C10286to10285: %3d / 2 = %10.2f \n", C10286to10285, C10286to10285/2;
printf "!C152740to152843: %3d / 1 = %10.2f \n", C152740to152843, C152740to152843/1;
printf "!C152693to152672: %3d / 2 = %10.2f \n", C152693to152672, C152693to152672/2;
printf "!C152672to152667: %3d / 2 = %10.2f \n", C152672to152667, C152672to152667/2;
printf "!C152667to152618: %3d / 2 = %10.2f \n", C152667to152618, C152667to152618/2;
printf "!C152618to152669: %3d / 2 = %10.2f \n", C152618to152669, C152618to152669/2;
printf "!C152669to152611: %3d / 2 = %10.2f \n", C152669to152611, C152669to152611/2;
printf "!C152611to152838: %3d / 2 = %10.2f \n", C152611to152838, C152611to152838/2;
printf "!C170885to5417: %3d / 1 = %10.2f \n", C170885to5417, C170885to5417/1;
printf "!C170884to170885: %3d / 1 = %10.2f \n", C170884to170885, C170884to170885/1;
printf "!C43547to170884: %3d / 1 = %10.2f \n", C43547to170884, C43547to170884/1;
printf "!C152838to152722: %3d / 2 = %10.2f \n", C152838to152722, C152838to152722/2;
printf "!C126234to7757: %3d / 1 = %10.2f \n", C126234to7757, C126234to7757/1;
printf "!C7757to137198: %3d / 1 = %10.2f \n", C7757to137198, C7757to137198/1;
printf "!C170883to43547: %3d / 1 = %10.2f \n", C170883to43547, C170883to43547/1;
printf "!C43548to170883: %3d / 1 = %10.2f \n", C43548to170883, C43548to170883/1;
printf "!C5418to43548: %3d / 1 = %10.2f \n", C5418to43548, C5418to43548/1;
printf "!C152722to152634: %3d / 2 = %10.2f \n", C152722to152634, C152722to152634/2;
printf "!C10298to49644: %3d / 1 = %10.2f \n", C10298to49644, C10298to49644/1;
printf "!C120772to47746: %3d / 1 = %10.2f \n", C120772to47746, C120772to47746/1;
printf "!C49644to18509: %3d / 1 = %10.2f \n", C49644to18509, C49644to18509/1;
printf "!C165244to120772: %3d / 1 = %10.2f \n", C165244to120772, C165244to120772/1;
printf "!C18509to10299: %3d / 1 = %10.2f \n", C18509to10299, C18509to10299/1;
printf "!C152634to152837: %3d / 2 = %10.2f \n", C152634to152837, C152634to152837/2;
printf "!C10299to10297: %3d / 1 = %10.2f \n", C10299to10297, C10299to10297/1;
printf "!C72963to69200: %3d / 2 = %10.2f \n", C72963to69200, C72963to69200/2;
printf "!C146310to10308: %3d / 1 = %10.2f \n", C146310to10308, C146310to10308/1;
printf "!C170529to10431: %3d / 1 = %10.2f \n", C170529to10431, C170529to10431/1;
printf "!C10431to170517: %3d / 1 = %10.2f \n", C10431to170517, C10431to170517/1;
printf "!C170517to10426: %3d / 1 = %10.2f \n", C170517to10426, C170517to10426/1;
printf "!C2999to165244: %3d / 1 = %10.2f \n", C2999to165244, C2999to165244/1;
printf "!C10426to14601: %3d / 1 = %10.2f \n", C10426to14601, C10426to14601/1;
printf "!C6076to97160: %3d / 1 = %10.2f \n", C6076to97160, C6076to97160/1;
printf "!C97160to6077: %3d / 1 = %10.2f \n", C97160to6077, C97160to6077/1;
printf "!C152837to152654: %3d / 2 = %10.2f \n", C152837to152654, C152837to152654/2;
printf "!C6077to97200: %3d / 1 = %10.2f \n", C6077to97200, C6077to97200/1;
printf "!C10427to10428: %3d / 1 = %10.2f \n", C10427to10428, C10427to10428/1;
printf "!C1396to1395: %3d / 1 = %10.2f \n", C1396to1395, C1396to1395/1;
printf "!C14544to146571: %3d / 1 = %10.2f \n", C14544to146571, C14544to146571/1;
printf "!C1397to1396: %3d / 1 = %10.2f \n", C1397to1396, C1397to1396/1;
printf "!C138074to14544: %3d / 1 = %10.2f \n", C138074to14544, C138074to14544/1;
printf "!C10452to10453: %3d / 1 = %10.2f \n", C10452to10453, C10452to10453/1;
printf "!C10453to10454: %3d / 1 = %10.2f \n", C10453to10454, C10453to10454/1;
printf "!C10454to10273: %3d / 1 = %10.2f \n", C10454to10273, C10454to10273/1;
printf "!C146223to146225: %3d / 1 = %10.2f \n", C146223to146225, C146223to146225/1;
printf "!C146225to146226: %3d / 1 = %10.2f \n", C146225to146226, C146225to146226/1;
printf "!C138930to11828: %3d / 1 = %10.2f \n", C138930to11828, C138930to11828/1;
printf "!C152654to152663: %3d / 2 = %10.2f \n", C152654to152663, C152654to152663/2;
printf "!C97200to6078: %3d / 1 = %10.2f \n", C97200to6078, C97200to6078/1;
printf "!C6085to6086: %3d / 2 = %10.2f \n", C6085to6086, C6085to6086/2;
printf "!C152663to152598: %3d / 2 = %10.2f \n", C152663to152598, C152663to152598/2;
printf "!C152598to7955: %3d / 2 = %10.2f \n", C152598to7955, C152598to7955/2;
printf "!C7955to75582: %3d / 2 = %10.2f \n", C7955to75582, C7955to75582/2;
printf "!C6086to6087: %3d / 2 = %10.2f \n", C6086to6087, C6086to6087/2;
printf "!C6087to6088: %3d / 2 = %10.2f \n", C6087to6088, C6087to6088/2;
printf "!C69139to10692: %3d / 2 = %10.2f \n", C69139to10692, C69139to10692/2;
printf "!C7226to7962: %3d / 1 = %10.2f \n", C7226to7962, C7226to7962/1;
printf "!C14602to10430: %3d / 1 = %10.2f \n", C14602to10430, C14602to10430/1;
printf "!C3659to170033: %3d / 2 = %10.2f \n", C3659to170033, C3659to170033/2;
printf "!C167518to14597: %3d / 1 = %10.2f \n", C167518to14597, C167518to14597/1;
printf "!C170033to3658: %3d / 2 = %10.2f \n", C170033to3658, C170033to3658/2;
printf "!C2560to145782: %3d / 3 = %10.2f \n", C2560to145782, C2560to145782/3;
printf "!C145782to129315: %3d / 3 = %10.2f \n", C145782to129315, C145782to129315/3;
printf "!C14597to167516: %3d / 1 = %10.2f \n", C14597to167516, C14597to167516/1;
printf "!C129315to145781: %3d / 3 = %10.2f \n", C129315to145781, C129315to145781/3;
printf "!C167516to10510: %3d / 1 = %10.2f \n", C167516to10510, C167516to10510/1;
printf "!C10510to10509: %3d / 1 = %10.2f \n", C10510to10509, C10510to10509/1;
printf "!C10509to10605: %3d / 1 = %10.2f \n", C10509to10605, C10509to10605/1;
printf "!C10605to121182: %3d / 1 = %10.2f \n", C10605to121182, C10605to121182/1;
printf "!C121182to123870: %3d / 1 = %10.2f \n", C121182to123870, C121182to123870/1;
printf "!C3680to13804: %3d / 1 = %10.2f \n", C3680to13804, C3680to13804/1;
printf "!C123870to5420: %3d / 1 = %10.2f \n", C123870to5420, C123870to5420/1;
printf "!C5420to5421: %3d / 1 = %10.2f \n", C5420to5421, C5420to5421/1;
printf "!C5421to164952: %3d / 1 = %10.2f \n", C5421to164952, C5421to164952/1;
printf "!C164952to15565: %3d / 1 = %10.2f \n", C164952to15565, C164952to15565/1;
printf "!C121291to165835: %3d / 3 = %10.2f \n", C121291to165835, C121291to165835/3;
printf "!C6088to6089: %3d / 2 = %10.2f \n", C6088to6089, C6088to6089/2;
printf "!C165835to124221: %3d / 3 = %10.2f \n", C165835to124221, C165835to124221/3;
printf "!C6089to6090: %3d / 2 = %10.2f \n", C6089to6090, C6089to6090/2;
printf "!C124221to1793: %3d / 2 = %10.2f \n", C124221to1793, C124221to1793/2;
printf "!C10508to10601: %3d / 3 = %10.2f \n", C10508to10601, C10508to10601/3;
printf "!C10526to150806: %3d / 1 = %10.2f \n", C10526to150806, C10526to150806/1;
printf "!C150806to29292: %3d / 1 = %10.2f \n", C150806to29292, C150806to29292/1;
printf "!C13374to13375: %3d / 1 = %10.2f \n", C13374to13375, C13374to13375/1;
printf "!C13375to13376: %3d / 1 = %10.2f \n", C13375to13376, C13375to13376/1;
printf "!C7970to7983: %3d / 1 = %10.2f \n", C7970to7983, C7970to7983/1;
printf "!C13376to13377: %3d / 1 = %10.2f \n", C13376to13377, C13376to13377/1;
printf "!C7983to7971: %3d / 1 = %10.2f \n", C7983to7971, C7983to7971/1;
printf "!C13377to13378: %3d / 1 = %10.2f \n", C13377to13378, C13377to13378/1;
printf "!C8055to8057: %3d / 1 = %10.2f \n", C8055to8057, C8055to8057/1;
printf "!C8057to8052: %3d / 1 = %10.2f \n", C8057to8052, C8057to8052/1;
printf "!C8052to8056: %3d / 2 = %10.2f \n", C8052to8056, C8052to8056/2;
printf "!C10269to104976: %3d / 1 = %10.2f \n", C10269to104976, C10269to104976/1;
printf "!C8056to8053: %3d / 2 = %10.2f \n", C8056to8053, C8056to8053/2;
printf "!C13378to10528: %3d / 1 = %10.2f \n", C13378to10528, C13378to10528/1;
printf "!C10528to10530: %3d / 1 = %10.2f \n", C10528to10530, C10528to10530/1;
printf "!C130720to8251: %3d / 2 = %10.2f \n", C130720to8251, C130720to8251/2;
printf "!C104976to138262: %3d / 1 = %10.2f \n", C104976to138262, C104976to138262/1;
printf "!C8251to17585: %3d / 2 = %10.2f \n", C8251to17585, C8251to17585/2;
printf "!C17585to8252: %3d / 2 = %10.2f \n", C17585to8252, C17585to8252/2;
printf "!C10530to10554: %3d / 1 = %10.2f \n", C10530to10554, C10530to10554/1;
printf "!C10532to10554: %3d / 1 = %10.2f \n", C10532to10554, C10532to10554/1;
printf "!C10529to10532: %3d / 1 = %10.2f \n", C10529to10532, C10529to10532/1;
printf "!C10556to10536: %3d / 1 = %10.2f \n", C10556to10536, C10556to10536/1;
printf "!C10536to10538: %3d / 1 = %10.2f \n", C10536to10538, C10536to10538/1;
printf "!C10538to10544: %3d / 1 = %10.2f \n", C10538to10544, C10538to10544/1;
printf "!C10544to10551: %3d / 1 = %10.2f \n", C10544to10551, C10544to10551/1;
printf "!C3693to148277: %3d / 2 = %10.2f \n", C3693to148277, C3693to148277/2;
printf "!C10551to10550: %3d / 1 = %10.2f \n", C10551to10550, C10551to10550/1;
printf "!C132024to132023: %3d / 1 = %10.2f \n", C132024to132023, C132024to132023/1;
printf "!C132023to132021: %3d / 2 = %10.2f \n", C132023to132021, C132023to132021/2;
printf "!C132021to132022: %3d / 2 = %10.2f \n", C132021to132022, C132021to132022/2;
printf "!C120901to10543: %3d / 1 = %10.2f \n", C120901to10543, C120901to10543/1;
printf "!C49498to8258: %3d / 1 = %10.2f \n", C49498to8258, C49498to8258/1;
printf "!C11889to120901: %3d / 1 = %10.2f \n", C11889to120901, C11889to120901/1;
printf "!C2726to2727: %3d / 1 = %10.2f \n", C2726to2727, C2726to2727/1;
printf "!C3100to3018: %3d / 1 = %10.2f \n", C3100to3018, C3100to3018/1;
printf "!C3695to8252: %3d / 1 = %10.2f \n", C3695to8252, C3695to8252/1;
printf "!C69048to11889: %3d / 1 = %10.2f \n", C69048to11889, C69048to11889/1;
printf "!C69048to10537: %3d / 1 = %10.2f \n", C69048to10537, C69048to10537/1;
printf "!C10537to10539: %3d / 1 = %10.2f \n", C10537to10539, C10537to10539/1;
printf "!C8275to8276: %3d / 1 = %10.2f \n", C8275to8276, C8275to8276/1;
printf "!C10539to120914: %3d / 1 = %10.2f \n", C10539to120914, C10539to120914/1;
printf "!C8276to8277: %3d / 1 = %10.2f \n", C8276to8277, C8276to8277/1;
printf "!C8277to137974: %3d / 1 = %10.2f \n", C8277to137974, C8277to137974/1;
printf "!C137974to8278: %3d / 1 = %10.2f \n", C137974to8278, C137974to8278/1;
printf "!C8278to17533: %3d / 1 = %10.2f \n", C8278to17533, C8278to17533/1;
printf "!C14047to14099: %3d / 1 = %10.2f \n", C14047to14099, C14047to14099/1;
printf "!C120914to120911: %3d / 1 = %10.2f \n", C120914to120911, C120914to120911/1;
printf "!C120911to10542: %3d / 1 = %10.2f \n", C120911to10542, C120911to10542/1;
printf "!C8329to14348: %3d / 1 = %10.2f \n", C8329to14348, C8329to14348/1;
printf "!C10542to10526: %3d / 1 = %10.2f \n", C10542to10526, C10542to10526/1;
printf "!C10554to124242: %3d / 2 = %10.2f \n", C10554to124242, C10554to124242/2;
printf "!C124242to10555: %3d / 2 = %10.2f \n", C124242to10555, C124242to10555/2;
printf "!C10555to10556: %3d / 2 = %10.2f \n", C10555to10556, C10555to10556/2;
printf "!C93333to2159: %3d / 1 = %10.2f \n", C93333to2159, C93333to2159/1;
printf "!C93277to6142: %3d / 3 = %10.2f \n", C93277to6142, C93277to6142/3;
printf "!C26356to167512: %3d / 1 = %10.2f \n", C26356to167512, C26356to167512/1;
printf "!C3718to3622: %3d / 3 = %10.2f \n", C3718to3622, C3718to3622/3;
printf "!C2727to2728: %3d / 1 = %10.2f \n", C2727to2728, C2727to2728/1;
printf "!C162854to162855: %3d / 1 = %10.2f \n", C162854to162855, C162854to162855/1;
printf "!C166609to166611: %3d / 1 = %10.2f \n", C166609to166611, C166609to166611/1;
printf "!C166611to1430: %3d / 1 = %10.2f \n", C166611to1430, C166611to1430/1;
printf "!C1430to166616: %3d / 1 = %10.2f \n", C1430to166616, C1430to166616/1;
printf "!C166616to1429: %3d / 1 = %10.2f \n", C166616to1429, C166616to1429/1;
printf "!C1429to166619: %3d / 1 = %10.2f \n", C1429to166619, C1429to166619/1;
printf "!C166619to1428: %3d / 1 = %10.2f \n", C166619to1428, C166619to1428/1;
printf "!C1428to166622: %3d / 1 = %10.2f \n", C1428to166622, C1428to166622/1;
printf "!C166622to1427: %3d / 1 = %10.2f \n", C166622to1427, C166622to1427/1;
printf "!C1427to166626: %3d / 1 = %10.2f \n", C1427to166626, C1427to166626/1;
printf "!C167512to26358: %3d / 1 = %10.2f \n", C167512to26358, C167512to26358/1;
printf "!C26358to26348: %3d / 1 = %10.2f \n", C26358to26348, C26358to26348/1;
printf "!C26348to26355: %3d / 1 = %10.2f \n", C26348to26355, C26348to26355/1;
printf "!C26355to170515: %3d / 2 = %10.2f \n", C26355to170515, C26355to170515/2;
printf "!C10578to10576: %3d / 1 = %10.2f \n", C10578to10576, C10578to10576/1;
printf "!C10576to10577: %3d / 1 = %10.2f \n", C10576to10577, C10576to10577/1;
printf "!C10578to10583: %3d / 1 = %10.2f \n", C10578to10583, C10578to10583/1;
printf "!C10583to10575: %3d / 1 = %10.2f \n", C10583to10575, C10583to10575/1;
printf "!C1463to166664: %3d / 1 = %10.2f \n", C1463to166664, C1463to166664/1;
printf "!C166664to1462: %3d / 1 = %10.2f \n", C166664to1462, C166664to1462/1;
printf "!C1462to166660: %3d / 1 = %10.2f \n", C1462to166660, C1462to166660/1;
printf "!C166660to527: %3d / 1 = %10.2f \n", C166660to527, C166660to527/1;
printf "!C527to1461: %3d / 1 = %10.2f \n", C527to1461, C527to1461/1;
printf "!C1461to528: %3d / 1 = %10.2f \n", C1461to528, C1461to528/1;
printf "!C162918to1465: %3d / 1 = %10.2f \n", C162918to1465, C162918to1465/1;
printf "!C10591to10592: %3d / 1 = %10.2f \n", C10591to10592, C10591to10592/1;
printf "!C10588to69138: %3d / 1 = %10.2f \n", C10588to69138, C10588to69138/1;
printf "!C121114to10601: %3d / 1 = %10.2f \n", C121114to10601, C121114to10601/1;
printf "!C69177to49544: %3d / 1 = %10.2f \n", C69177to49544, C69177to49544/1;
printf "!C49544to10612: %3d / 1 = %10.2f \n", C49544to10612, C49544to10612/1;
printf "!C10613to10608: %3d / 2 = %10.2f \n", C10613to10608, C10613to10608/2;
printf "!C10608to10609: %3d / 1 = %10.2f \n", C10608to10609, C10608to10609/1;
printf "!C10613to49541: %3d / 1 = %10.2f \n", C10613to49541, C10613to49541/1;
printf "!C14200to8326: %3d / 1 = %10.2f \n", C14200to8326, C14200to8326/1;
printf "!C49541to10617: %3d / 1 = %10.2f \n", C49541to10617, C49541to10617/1;
printf "!C8324to8325: %3d / 1 = %10.2f \n", C8324to8325, C8324to8325/1;
printf "!C8318to14259: %3d / 1 = %10.2f \n", C8318to14259, C8318to14259/1;
printf "!C14259to27421: %3d / 1 = %10.2f \n", C14259to27421, C14259to27421/1;
printf "!C14352to14540: %3d / 1 = %10.2f \n", C14352to14540, C14352to14540/1;
printf "!C14540to41074: %3d / 1 = %10.2f \n", C14540to41074, C14540to41074/1;
printf "!C41074to144983: %3d / 1 = %10.2f \n", C41074to144983, C41074to144983/1;
printf "!C144983to8324: %3d / 1 = %10.2f \n", C144983to8324, C144983to8324/1;
printf "!C8325to8334: %3d / 1 = %10.2f \n", C8325to8334, C8325to8334/1;
printf "!C144043to8388: %3d / 3 = %10.2f \n", C144043to8388, C144043to8388/3;
printf "!C8388to8387: %3d / 3 = %10.2f \n", C8388to8387, C8388to8387/3;
printf "!C8387to160953: %3d / 3 = %10.2f \n", C8387to160953, C8387to160953/3;
printf "!C132917to6956: %3d / 1 = %10.2f \n", C132917to6956, C132917to6956/1;
printf "!C160953to8386: %3d / 3 = %10.2f \n", C160953to8386, C160953to8386/3;
printf "!C162855to2732: %3d / 1 = %10.2f \n", C162855to2732, C162855to2732/1;
printf "!C2732to162856: %3d / 1 = %10.2f \n", C2732to162856, C2732to162856/1;
printf "!C6956to6957: %3d / 1 = %10.2f \n", C6956to6957, C6956to6957/1;
printf "!C162856to2733: %3d / 1 = %10.2f \n", C162856to2733, C162856to2733/1;
printf "!C6957to6958: %3d / 1 = %10.2f \n", C6957to6958, C6957to6958/1;
printf "!C2733to162857: %3d / 1 = %10.2f \n", C2733to162857, C2733to162857/1;
printf "!C6958to123764: %3d / 1 = %10.2f \n", C6958to123764, C6958to123764/1;
printf "!C162857to2734: %3d / 1 = %10.2f \n", C162857to2734, C162857to2734/1;
printf "!C8386to161698: %3d / 3 = %10.2f \n", C8386to161698, C8386to161698/3;
printf "!C161698to8385: %3d / 3 = %10.2f \n", C161698to8385, C161698to8385/3;
printf "!C123764to123757: %3d / 1 = %10.2f \n", C123764to123757, C123764to123757/1;
printf "!C123757to123758: %3d / 1 = %10.2f \n", C123757to123758, C123757to123758/1;
printf "!C10617to10618: %3d / 1 = %10.2f \n", C10617to10618, C10617to10618/1;
printf "!C8385to161695: %3d / 3 = %10.2f \n", C8385to161695, C8385to161695/3;
printf "!C161695to81843: %3d / 3 = %10.2f \n", C161695to81843, C161695to81843/3;
printf "!C2784to2783: %3d / 1 = %10.2f \n", C2784to2783, C2784to2783/1;
printf "!C132836to132837: %3d / 1 = %10.2f \n", C132836to132837, C132836to132837/1;
printf "!C132837to147960: %3d / 1 = %10.2f \n", C132837to147960, C132837to147960/1;
printf "!C147960to95076: %3d / 1 = %10.2f \n", C147960to95076, C147960to95076/1;
printf "!C127028to2784: %3d / 1 = %10.2f \n", C127028to2784, C127028to2784/1;
printf "!C2734to162858: %3d / 1 = %10.2f \n", C2734to162858, C2734to162858/1;
printf "!C162858to162859: %3d / 1 = %10.2f \n", C162858to162859, C162858to162859/1;
printf "!C95076to3724: %3d / 2 = %10.2f \n", C95076to3724, C95076to3724/2;
printf "!C13013to10648: %3d / 1 = %10.2f \n", C13013to10648, C13013to10648/1;
printf "!C3724to128994: %3d / 2 = %10.2f \n", C3724to128994, C3724to128994/2;
printf "!C128994to147961: %3d / 3 = %10.2f \n", C128994to147961, C128994to147961/3;
printf "!C10648to10649: %3d / 1 = %10.2f \n", C10648to10649, C10648to10649/1;
printf "!C123758to123730: %3d / 1 = %10.2f \n", C123758to123730, C123758to123730/1;
printf "!C123730to123745: %3d / 1 = %10.2f \n", C123730to123745, C123730to123745/1;
printf "!C123745to123759: %3d / 1 = %10.2f \n", C123745to123759, C123745to123759/1;
printf "!C10649to10650: %3d / 1 = %10.2f \n", C10649to10650, C10649to10650/1;
printf "!C10650to10651: %3d / 1 = %10.2f \n", C10650to10651, C10650to10651/1;
printf "!C10651to10652: %3d / 1 = %10.2f \n", C10651to10652, C10651to10652/1;
printf "!C10652to10653: %3d / 1 = %10.2f \n", C10652to10653, C10652to10653/1;
printf "!C10653to10654: %3d / 1 = %10.2f \n", C10653to10654, C10653to10654/1;
printf "!C81843to161696: %3d / 3 = %10.2f \n", C81843to161696, C81843to161696/3;
printf "!C161696to8384: %3d / 3 = %10.2f \n", C161696to8384, C161696to8384/3;
printf "!C8384to161035: %3d / 3 = %10.2f \n", C8384to161035, C8384to161035/3;
printf "!C134742to134741: %3d / 1 = %10.2f \n", C134742to134741, C134742to134741/1;
printf "!C134740to10661: %3d / 1 = %10.2f \n", C134740to10661, C134740to10661/1;
printf "!C1518to169425: %3d / 2 = %10.2f \n", C1518to169425, C1518to169425/2;
printf "!C169425to1516: %3d / 1 = %10.2f \n", C169425to1516, C169425to1516/1;
printf "!C12173to13018: %3d / 1 = %10.2f \n", C12173to13018, C12173to13018/1;
printf "!C123759to123738: %3d / 1 = %10.2f \n", C123759to123738, C123759to123738/1;
printf "!C10701to13017: %3d / 2 = %10.2f \n", C10701to13017, C10701to13017/2;
printf "!C3658to150740: %3d / 1 = %10.2f \n", C3658to150740, C3658to150740/1;
printf "!C150740to129437: %3d / 1 = %10.2f \n", C150740to129437, C150740to129437/1;
printf "!C10707to10703: %3d / 6 = %10.2f \n", C10707to10703, C10707to10703/6;
printf "!C161035to161034: %3d / 2 = %10.2f \n", C161035to161034, C161035to161034/2;
printf "!C10713to150695: %3d / 1 = %10.2f \n", C10713to150695, C10713to150695/1;
printf "!C150695to10712: %3d / 1 = %10.2f \n", C150695to10712, C150695to10712/1;
printf "!C10720to10722: %3d / 1 = %10.2f \n", C10720to10722, C10720to10722/1;
printf "!C10722to10719: %3d / 1 = %10.2f \n", C10722to10719, C10722to10719/1;
printf "!C8444to43125: %3d / 1 = %10.2f \n", C8444to43125, C8444to43125/1;
printf "!C123738to123736: %3d / 1 = %10.2f \n", C123738to123736, C123738to123736/1;
printf "!C123736to123741: %3d / 1 = %10.2f \n", C123736to123741, C123736to123741/1;
printf "!C43125to8446: %3d / 1 = %10.2f \n", C43125to8446, C43125to8446/1;
printf "!C8446to43137: %3d / 1 = %10.2f \n", C8446to43137, C8446to43137/1;
printf "!C43137to8443: %3d / 1 = %10.2f \n", C43137to8443, C43137to8443/1;
printf "!C151939to151831: %3d / 1 = %10.2f \n", C151939to151831, C151939to151831/1;
printf "!C151831to151940: %3d / 1 = %10.2f \n", C151831to151940, C151831to151940/1;
printf "!C151940to151894: %3d / 1 = %10.2f \n", C151940to151894, C151940to151894/1;
printf "!C151894to151945: %3d / 1 = %10.2f \n", C151894to151945, C151894to151945/1;
printf "!C151945to151943: %3d / 1 = %10.2f \n", C151945to151943, C151945to151943/1;
printf "!C151943to151823: %3d / 1 = %10.2f \n", C151943to151823, C151943to151823/1;
printf "!C10719to50738: %3d / 1 = %10.2f \n", C10719to50738, C10719to50738/1;
printf "!C50738to10710: %3d / 1 = %10.2f \n", C50738to10710, C50738to10710/1;
printf "!C10710to19777: %3d / 1 = %10.2f \n", C10710to19777, C10710to19777/1;
printf "!C151823to151861: %3d / 1 = %10.2f \n", C151823to151861, C151823to151861/1;
printf "!C19777to10711: %3d / 1 = %10.2f \n", C19777to10711, C19777to10711/1;
printf "!C10711to13034: %3d / 1 = %10.2f \n", C10711to13034, C10711to13034/1;
printf "!C10730to47129: %3d / 1 = %10.2f \n", C10730to47129, C10730to47129/1;
printf "!C2268to128677: %3d / 3 = %10.2f \n", C2268to128677, C2268to128677/3;
printf "!C1519to1538: %3d / 3 = %10.2f \n", C1519to1538, C1519to1538/3;
printf "!C47129to10730: %3d / 1 = %10.2f \n", C47129to10730, C47129to10730/1;
printf "!C47129to10772: %3d / 1 = %10.2f \n", C47129to10772, C47129to10772/1;
printf "!C109516to123924: %3d / 2 = %10.2f \n", C109516to123924, C109516to123924/2;
printf "!C10806to1549: %3d / 1 = %10.2f \n", C10806to1549, C10806to1549/1;
printf "!C1549to10784: %3d / 1 = %10.2f \n", C1549to10784, C1549to10784/1;
printf "!C1581to1582: %3d / 1 = %10.2f \n", C1581to1582, C1581to1582/1;
printf "!C1583to1300: %3d / 1 = %10.2f \n", C1583to1300, C1583to1300/1;
printf "!C151861to151841: %3d / 1 = %10.2f \n", C151861to151841, C151861to151841/1;
printf "!C151841to151912: %3d / 1 = %10.2f \n", C151841to151912, C151841to151912/1;
printf "!C151912to151950: %3d / 1 = %10.2f \n", C151912to151950, C151912to151950/1;
printf "!C123741to123754: %3d / 1 = %10.2f \n", C123741to123754, C123741to123754/1;
printf "!C123754to123752: %3d / 1 = %10.2f \n", C123754to123752, C123754to123752/1;
printf "!C151950to151888: %3d / 1 = %10.2f \n", C151950to151888, C151950to151888/1;
printf "!C151888to151890: %3d / 1 = %10.2f \n", C151888to151890, C151888to151890/1;
printf "!C123924to123923: %3d / 1 = %10.2f \n", C123924to123923, C123924to123923/1;
printf "!C123923to10752: %3d / 1 = %10.2f \n", C123923to10752, C123923to10752/1;
printf "!C10752to10753: %3d / 1 = %10.2f \n", C10752to10753, C10752to10753/1;
printf "!C10753to169437: %3d / 1 = %10.2f \n", C10753to169437, C10753to169437/1;
printf "!C10772to2261: %3d / 1 = %10.2f \n", C10772to2261, C10772to2261/1;
printf "!C10777to124010: %3d / 1 = %10.2f \n", C10777to124010, C10777to124010/1;
printf "!C124010to2260: %3d / 1 = %10.2f \n", C124010to2260, C124010to2260/1;
printf "!C2260to160314: %3d / 1 = %10.2f \n", C2260to160314, C2260to160314/1;
printf "!C160314to47118: %3d / 1 = %10.2f \n", C160314to47118, C160314to47118/1;
printf "!C162859to162860: %3d / 1 = %10.2f \n", C162859to162860, C162859to162860/1;
printf "!C123752to123746: %3d / 1 = %10.2f \n", C123752to123746, C123752to123746/1;
printf "!C47118to2273: %3d / 1 = %10.2f \n", C47118to2273, C47118to2273/1;
printf "!C171275to6976: %3d / 1 = %10.2f \n", C171275to6976, C171275to6976/1;
printf "!C2273to10775: %3d / 1 = %10.2f \n", C2273to10775, C2273to10775/1;
printf "!C6980to75983: %3d / 3 = %10.2f \n", C6980to75983, C6980to75983/3;
printf "!C132910to6983: %3d / 2 = %10.2f \n", C132910to6983, C132910to6983/2;
printf "!C162860to2735: %3d / 1 = %10.2f \n", C162860to2735, C162860to2735/1;
printf "!C122005to3717: %3d / 1 = %10.2f \n", C122005to3717, C122005to3717/1;
printf "!C10775to123941: %3d / 1 = %10.2f \n", C10775to123941, C10775to123941/1;
printf "!C6983to163633: %3d / 2 = %10.2f \n", C6983to163633, C6983to163633/2;
printf "!C46844to10794: %3d / 2 = %10.2f \n", C46844to10794, C46844to10794/2;
printf "!C10794to10795: %3d / 3 = %10.2f \n", C10794to10795, C10794to10795/3;
printf "!C10730to10777: %3d / 1 = %10.2f \n", C10730to10777, C10730to10777/1;
printf "!C10788to163612: %3d / 1 = %10.2f \n", C10788to163612, C10788to163612/1;
printf "!C163612to10806: %3d / 1 = %10.2f \n", C163612to10806, C163612to10806/1;
printf "!C152255to152412: %3d / 2 = %10.2f \n", C152255to152412, C152255to152412/2;
printf "!C152412to127817: %3d / 2 = %10.2f \n", C152412to127817, C152412to127817/2;
printf "!C127817to152378: %3d / 2 = %10.2f \n", C127817to152378, C127817to152378/2;
printf "!C152378to10828: %3d / 2 = %10.2f \n", C152378to10828, C152378to10828/2;
printf "!C10828to152179: %3d / 2 = %10.2f \n", C10828to152179, C10828to152179/2;
printf "!C152179to152449: %3d / 2 = %10.2f \n", C152179to152449, C152179to152449/2;
printf "!C152449to152472: %3d / 2 = %10.2f \n", C152449to152472, C152449to152472/2;
printf "!C145147to45684: %3d / 3 = %10.2f \n", C145147to45684, C145147to45684/3;
printf "!C45684to45699: %3d / 2 = %10.2f \n", C45684to45699, C45684to45699/2;
printf "!C45699to45680: %3d / 2 = %10.2f \n", C45699to45680, C45699to45680/2;
printf "!C24985to24986: %3d / 2 = %10.2f \n", C24985to24986, C24985to24986/2;
printf "!C24986to122486: %3d / 2 = %10.2f \n", C24986to122486, C24986to122486/2;
printf "!C149863to150034: %3d / 1 = %10.2f \n", C149863to150034, C149863to150034/1;
printf "!C2735to162861: %3d / 1 = %10.2f \n", C2735to162861, C2735to162861/1;
printf "!C10885to149730: %3d / 1 = %10.2f \n", C10885to149730, C10885to149730/1;
printf "!C149730to149579: %3d / 1 = %10.2f \n", C149730to149579, C149730to149579/1;
printf "!C163633to76011: %3d / 2 = %10.2f \n", C163633to76011, C163633to76011/2;
printf "!C149579to122515: %3d / 1 = %10.2f \n", C149579to122515, C149579to122515/1;
printf "!C122515to149632: %3d / 1 = %10.2f \n", C122515to149632, C122515to149632/1;
printf "!C1681to1682: %3d / 2 = %10.2f \n", C1681to1682, C1681to1682/2;
printf "!C1682to1683: %3d / 2 = %10.2f \n", C1682to1683, C1682to1683/2;
printf "!C1696to1670: %3d / 2 = %10.2f \n", C1696to1670, C1696to1670/2;
printf "!C1670to1696: %3d / 1 = %10.2f \n", C1670to1696, C1670to1696/1;
printf "!C119703to119712: %3d / 2 = %10.2f \n", C119703to119712, C119703to119712/2;
printf "!C119712to119715: %3d / 2 = %10.2f \n", C119712to119715, C119712to119715/2;
printf "!C119715to119716: %3d / 2 = %10.2f \n", C119715to119716, C119715to119716/2;
printf "!C119716to119714: %3d / 2 = %10.2f \n", C119716to119714, C119716to119714/2;
printf "!C119714to119710: %3d / 2 = %10.2f \n", C119714to119710, C119714to119710/2;
printf "!C119710to119706: %3d / 2 = %10.2f \n", C119710to119706, C119710to119706/2;
printf "!C119706to163481: %3d / 2 = %10.2f \n", C119706to163481, C119706to163481/2;
printf "!C163481to119700: %3d / 2 = %10.2f \n", C163481to119700, C163481to119700/2;
printf "!C119694to119693: %3d / 1 = %10.2f \n", C119694to119693, C119694to119693/1;
printf "!C2180to149646: %3d / 1 = %10.2f \n", C2180to149646, C2180to149646/1;
printf "!C149646to149948: %3d / 2 = %10.2f \n", C149646to149948, C149646to149948/2;
printf "!C129004to144609: %3d / 1 = %10.2f \n", C129004to144609, C129004to144609/1;
printf "!C144609to129005: %3d / 1 = %10.2f \n", C144609to129005, C144609to129005/1;
printf "!C129005to129326: %3d / 2 = %10.2f \n", C129005to129326, C129005to129326/2;
printf "!C129326to129337: %3d / 2 = %10.2f \n", C129326to129337, C129326to129337/2;
printf "!C129006to129004: %3d / 1 = %10.2f \n", C129006to129004, C129006to129004/1;
printf "!C76011to6974: %3d / 2 = %10.2f \n", C76011to6974, C76011to6974/2;
printf "!C1871to156675: %3d / 1 = %10.2f \n", C1871to156675, C1871to156675/1;
printf "!C156675to1872: %3d / 1 = %10.2f \n", C156675to1872, C156675to1872/1;
printf "!C1872to1873: %3d / 1 = %10.2f \n", C1872to1873, C1872to1873/1;
printf "!C1873to156666: %3d / 1 = %10.2f \n", C1873to156666, C1873to156666/1;
printf "!C156666to1874: %3d / 1 = %10.2f \n", C156666to1874, C156666to1874/1;
printf "!C19249to18916: %3d / 1 = %10.2f \n", C19249to18916, C19249to18916/1;
printf "!C18916to19252: %3d / 2 = %10.2f \n", C18916to19252, C18916to19252/2;
printf "!C19252to29400: %3d / 1 = %10.2f \n", C19252to29400, C19252to29400/1;
printf "!C1878to1879: %3d / 1 = %10.2f \n", C1878to1879, C1878to1879/1;
printf "!C3465to3550: %3d / 2 = %10.2f \n", C3465to3550, C3465to3550/2;
printf "!C3550to122723: %3d / 2 = %10.2f \n", C3550to122723, C3550to122723/2;
printf "!C122723to2328: %3d / 2 = %10.2f \n", C122723to2328, C122723to2328/2;
printf "!C11039to11038: %3d / 2 = %10.2f \n", C11039to11038, C11039to11038/2;
printf "!C11038to11037: %3d / 2 = %10.2f \n", C11038to11037, C11038to11037/2;
printf "!C11037to138722: %3d / 2 = %10.2f \n", C11037to138722, C11037to138722/2;
printf "!C138722to11036: %3d / 2 = %10.2f \n", C138722to11036, C138722to11036/2;
printf "!C150051to149868: %3d / 1 = %10.2f \n", C150051to149868, C150051to149868/1;
printf "!C149868to149866: %3d / 1 = %10.2f \n", C149868to149866, C149868to149866/1;
printf "!C149866to149809: %3d / 1 = %10.2f \n", C149866to149809, C149866to149809/1;
printf "!C11036to11035: %3d / 2 = %10.2f \n", C11036to11035, C11036to11035/2;
printf "!C11035to169418: %3d / 2 = %10.2f \n", C11035to169418, C11035to169418/2;
printf "!C2199to2244: %3d / 2 = %10.2f \n", C2199to2244, C2199to2244/2;
printf "!C2244to2245: %3d / 2 = %10.2f \n", C2244to2245, C2244to2245/2;
printf "!C2245to2246: %3d / 2 = %10.2f \n", C2245to2246, C2245to2246/2;
printf "!C2246to2257: %3d / 2 = %10.2f \n", C2246to2257, C2246to2257/2;
printf "!C169418to11034: %3d / 2 = %10.2f \n", C169418to11034, C169418to11034/2;
printf "!C2257to122449: %3d / 1 = %10.2f \n", C2257to122449, C2257to122449/1;
printf "!C122449to13498: %3d / 1 = %10.2f \n", C122449to13498, C122449to13498/1;
printf "!C11034to169749: %3d / 2 = %10.2f \n", C11034to169749, C11034to169749/2;
printf "!C11045to11065: %3d / 1 = %10.2f \n", C11045to11065, C11045to11065/1;
printf "!C19252to19253: %3d / 2 = %10.2f \n", C19252to19253, C19252to19253/2;
printf "!C13044to2267: %3d / 1 = %10.2f \n", C13044to2267, C13044to2267/1;
printf "!C2267to2268: %3d / 1 = %10.2f \n", C2267to2268, C2267to2268/1;
printf "!C2268to10780: %3d / 1 = %10.2f \n", C2268to10780, C2268to10780/1;
printf "!C10780to2269: %3d / 1 = %10.2f \n", C10780to2269, C10780to2269/1;
printf "!C2269to2270: %3d / 1 = %10.2f \n", C2269to2270, C2269to2270/1;
printf "!C2270to2271: %3d / 1 = %10.2f \n", C2270to2271, C2270to2271/1;
printf "!C2277to13493: %3d / 1 = %10.2f \n", C2277to13493, C2277to13493/1;
printf "!C19253to1355: %3d / 2 = %10.2f \n", C19253to1355, C19253to1355/2;
printf "!C11064to11335: %3d / 1 = %10.2f \n", C11064to11335, C11064to11335/1;
printf "!C11335to11044: %3d / 1 = %10.2f \n", C11335to11044, C11335to11044/1;
printf "!C11044to11045: %3d / 1 = %10.2f \n", C11044to11045, C11044to11045/1;
printf "!C11117to121856: %3d / 4 = %10.2f \n", C11117to121856, C11117to121856/4;
printf "!C11069to11070: %3d / 1 = %10.2f \n", C11069to11070, C11069to11070/1;
printf "!C11081to11099: %3d / 1 = %10.2f \n", C11081to11099, C11081to11099/1;
printf "!C11096to11083: %3d / 1 = %10.2f \n", C11096to11083, C11096to11083/1;
printf "!C11083to11084: %3d / 1 = %10.2f \n", C11083to11084, C11083to11084/1;
printf "!C11097to142878: %3d / 1 = %10.2f \n", C11097to142878, C11097to142878/1;
printf "!C11100to18737: %3d / 1 = %10.2f \n", C11100to18737, C11100to18737/1;
printf "!C18737to18739: %3d / 1 = %10.2f \n", C18737to18739, C18737to18739/1;
printf "!C18739to18723: %3d / 1 = %10.2f \n", C18739to18723, C18739to18723/1;
printf "!C18723to18727: %3d / 1 = %10.2f \n", C18723to18727, C18723to18727/1;
printf "!C18727to18751: %3d / 1 = %10.2f \n", C18727to18751, C18727to18751/1;
printf "!C18751to122173: %3d / 1 = %10.2f \n", C18751to122173, C18751to122173/1;
printf "!C122173to122169: %3d / 1 = %10.2f \n", C122173to122169, C122173to122169/1;
printf "!C122169to122166: %3d / 1 = %10.2f \n", C122169to122166, C122169to122166/1;
printf "!C122166to122158: %3d / 1 = %10.2f \n", C122166to122158, C122166to122158/1;
printf "!C122158to11099: %3d / 1 = %10.2f \n", C122158to11099, C122158to11099/1;
printf "!C11295to33547: %3d / 1 = %10.2f \n", C11295to33547, C11295to33547/1;
printf "!C33547to11063: %3d / 1 = %10.2f \n", C33547to11063, C33547to11063/1;
printf "!C2664to116175: %3d / 4 = %10.2f \n", C2664to116175, C2664to116175/4;
printf "!C116175to116172: %3d / 3 = %10.2f \n", C116175to116172, C116175to116172/3;
printf "!C19692to163253: %3d / 3 = %10.2f \n", C19692to163253, C19692to163253/3;
printf "!C163253to11139: %3d / 2 = %10.2f \n", C163253to11139, C163253to11139/2;
printf "!C11142to18782: %3d / 4 = %10.2f \n", C11142to18782, C11142to18782/4;
printf "!C18782to18784: %3d / 4 = %10.2f \n", C18782to18784, C18782to18784/4;
printf "!C11147to11148: %3d / 2 = %10.2f \n", C11147to11148, C11147to11148/2;
printf "!C11169to18946: %3d / 4 = %10.2f \n", C11169to18946, C11169to18946/4;
printf "!C18946to11170: %3d / 3 = %10.2f \n", C18946to11170, C18946to11170/3;
printf "!C6974to76013: %3d / 2 = %10.2f \n", C6974to76013, C6974to76013/2;
printf "!C11170to122348: %3d / 3 = %10.2f \n", C11170to122348, C11170to122348/3;
printf "!C122348to18888: %3d / 3 = %10.2f \n", C122348to18888, C122348to18888/3;
printf "!C18888to18930: %3d / 2 = %10.2f \n", C18888to18930, C18888to18930/2;
printf "!C138965to11249: %3d / 3 = %10.2f \n", C138965to11249, C138965to11249/3;
printf "!C50632to158417: %3d / 1 = %10.2f \n", C50632to158417, C50632to158417/1;
printf "!C76013to132913: %3d / 2 = %10.2f \n", C76013to132913, C76013to132913/2;
printf "!C2374to2382: %3d / 1 = %10.2f \n", C2374to2382, C2374to2382/1;
printf "!C2382to2383: %3d / 2 = %10.2f \n", C2382to2383, C2382to2383/2;
printf "!C2383to2384: %3d / 2 = %10.2f \n", C2383to2384, C2383to2384/2;
printf "!C2384to2385: %3d / 3 = %10.2f \n", C2384to2385, C2384to2385/3;
printf "!C2385to241: %3d / 2 = %10.2f \n", C2385to241, C2385to241/2;
printf "!C2396to2397: %3d / 1 = %10.2f \n", C2396to2397, C2396to2397/1;
printf "!C2397to2398: %3d / 1 = %10.2f \n", C2397to2398, C2397to2398/1;
printf "!C2398to2399: %3d / 1 = %10.2f \n", C2398to2399, C2398to2399/1;
printf "!C2399to2400: %3d / 1 = %10.2f \n", C2399to2400, C2399to2400/1;
printf "!C2400to2401: %3d / 1 = %10.2f \n", C2400to2401, C2400to2401/1;
printf "!C11208to18857: %3d / 1 = %10.2f \n", C11208to18857, C11208to18857/1;
printf "!C11220to11221: %3d / 1 = %10.2f \n", C11220to11221, C11220to11221/1;
printf "!C2408to2407: %3d / 1 = %10.2f \n", C2408to2407, C2408to2407/1;
printf "!C11221to11228: %3d / 2 = %10.2f \n", C11221to11228, C11221to11228/2;
printf "!C11228to69231: %3d / 1 = %10.2f \n", C11228to69231, C11228to69231/1;
printf "!C11228to11229: %3d / 1 = %10.2f \n", C11228to11229, C11228to11229/1;
printf "!C11235to11236: %3d / 2 = %10.2f \n", C11235to11236, C11235to11236/2;
printf "!C132913to6975: %3d / 1 = %10.2f \n", C132913to6975, C132913to6975/1;
printf "!C6975to171275: %3d / 1 = %10.2f \n", C6975to171275, C6975to171275/1;
printf "!C5487to7033: %3d / 1 = %10.2f \n", C5487to7033, C5487to7033/1;
printf "!C7033to7025: %3d / 1 = %10.2f \n", C7033to7025, C7033to7025/1;
printf "!C7040to7039: %3d / 1 = %10.2f \n", C7040to7039, C7040to7039/1;
printf "!C7039to7046: %3d / 1 = %10.2f \n", C7039to7046, C7039to7046/1;
printf "!C11236to11237: %3d / 2 = %10.2f \n", C11236to11237, C11236to11237/2;
printf "!C11237to11239: %3d / 2 = %10.2f \n", C11237to11239, C11237to11239/2;
printf "!C48947to11248: %3d / 1 = %10.2f \n", C48947to11248, C48947to11248/1;
printf "!C11248to18754: %3d / 1 = %10.2f \n", C11248to18754, C11248to18754/1;
printf "!C18754to11247: %3d / 2 = %10.2f \n", C18754to11247, C18754to11247/2;
printf "!C11247to11246: %3d / 2 = %10.2f \n", C11247to11246, C11247to11246/2;
printf "!C11246to11251: %3d / 2 = %10.2f \n", C11246to11251, C11246to11251/2;
printf "!C127179to3745: %3d / 1 = %10.2f \n", C127179to3745, C127179to3745/1;
printf "!C3745to159457: %3d / 1 = %10.2f \n", C3745to159457, C3745to159457/1;
printf "!C159457to159456: %3d / 1 = %10.2f \n", C159457to159456, C159457to159456/1;
printf "!C11244to158424: %3d / 2 = %10.2f \n", C11244to158424, C11244to158424/2;
printf "!C158424to11201: %3d / 2 = %10.2f \n", C158424to11201, C158424to11201/2;
printf "!C11253to169647: %3d / 1 = %10.2f \n", C11253to169647, C11253to169647/1;
printf "!C11254to11255: %3d / 1 = %10.2f \n", C11254to11255, C11254to11255/1;
printf "!C11255to169646: %3d / 1 = %10.2f \n", C11255to169646, C11255to169646/1;
printf "!C169646to11256: %3d / 1 = %10.2f \n", C169646to11256, C169646to11256/1;
printf "!C11256to11262: %3d / 1 = %10.2f \n", C11256to11262, C11256to11262/1;
printf "!C11262to169737: %3d / 1 = %10.2f \n", C11262to169737, C11262to169737/1;
printf "!C169737to11263: %3d / 1 = %10.2f \n", C169737to11263, C169737to11263/1;
printf "!C11263to169736: %3d / 1 = %10.2f \n", C11263to169736, C11263to169736/1;
printf "!C169736to11264: %3d / 1 = %10.2f \n", C169736to11264, C169736to11264/1;
printf "!C11264to11265: %3d / 1 = %10.2f \n", C11264to11265, C11264to11265/1;
printf "!C11065to33339: %3d / 2 = %10.2f \n", C11065to33339, C11065to33339/2;
printf "!C33339to11295: %3d / 3 = %10.2f \n", C33339to11295, C33339to11295/3;
printf "!C11299to11300: %3d / 3 = %10.2f \n", C11299to11300, C11299to11300/3;
printf "!C11300to11301: %3d / 3 = %10.2f \n", C11300to11301, C11300to11301/3;
printf "!C11301to122084: %3d / 3 = %10.2f \n", C11301to122084, C11301to122084/3;
printf "!C122084to11302: %3d / 3 = %10.2f \n", C122084to11302, C122084to11302/3;
printf "!C11302to11303: %3d / 4 = %10.2f \n", C11302to11303, C11302to11303/4;
printf "!C11303to127506: %3d / 4 = %10.2f \n", C11303to127506, C11303to127506/4;
printf "!C127506to11304: %3d / 4 = %10.2f \n", C127506to11304, C127506to11304/4;
printf "!C11304to11305: %3d / 4 = %10.2f \n", C11304to11305, C11304to11305/4;
printf "!C11309to11310: %3d / 1 = %10.2f \n", C11309to11310, C11309to11310/1;
printf "!C11317to11318: %3d / 4 = %10.2f \n", C11317to11318, C11317to11318/4;
printf "!C11318to11319: %3d / 4 = %10.2f \n", C11318to11319, C11318to11319/4;
printf "!C11319to11320: %3d / 4 = %10.2f \n", C11319to11320, C11319to11320/4;
printf "!C11320to11321: %3d / 4 = %10.2f \n", C11320to11321, C11320to11321/4;
printf "!C11321to11322: %3d / 5 = %10.2f \n", C11321to11322, C11321to11322/5;
printf "!C79823to7139: %3d / 1 = %10.2f \n", C79823to7139, C79823to7139/1;
printf "!C11322to11323: %3d / 5 = %10.2f \n", C11322to11323, C11322to11323/5;
printf "!C8302to8304: %3d / 1 = %10.2f \n", C8302to8304, C8302to8304/1;
printf "!C11323to11324: %3d / 5 = %10.2f \n", C11323to11324, C11323to11324/5;
printf "!C8304to8303: %3d / 1 = %10.2f \n", C8304to8303, C8304to8303/1;
printf "!C11324to169573: %3d / 4 = %10.2f \n", C11324to169573, C11324to169573/4;
printf "!C8303to13317: %3d / 1 = %10.2f \n", C8303to13317, C8303to13317/1;
printf "!C169573to11325: %3d / 3 = %10.2f \n", C169573to11325, C169573to11325/3;
printf "!C166671to166673: %3d / 1 = %10.2f \n", C166671to166673, C166671to166673/1;
printf "!C166673to2642: %3d / 1 = %10.2f \n", C166673to2642, C166673to2642/1;
printf "!C2642to2641: %3d / 1 = %10.2f \n", C2642to2641, C2642to2641/1;
printf "!C13317to138945: %3d / 1 = %10.2f \n", C13317to138945, C13317to138945/1;
printf "!C13916to45696: %3d / 5 = %10.2f \n", C13916to45696, C13916to45696/5;
printf "!C45696to130297: %3d / 5 = %10.2f \n", C45696to130297, C45696to130297/5;
printf "!C130297to45687: %3d / 5 = %10.2f \n", C130297to45687, C130297to45687/5;
printf "!C45687to45682: %3d / 5 = %10.2f \n", C45687to45682, C45687to45682/5;
printf "!C45682to45688: %3d / 4 = %10.2f \n", C45682to45688, C45682to45688/4;
printf "!C4163to153753: %3d / 1 = %10.2f \n", C4163to153753, C4163to153753/1;
printf "!C153753to8600: %3d / 1 = %10.2f \n", C153753to8600, C153753to8600/1;
printf "!C123340to123334: %3d / 1 = %10.2f \n", C123340to123334, C123340to123334/1;
printf "!C123334to18470: %3d / 1 = %10.2f \n", C123334to18470, C123334to18470/1;
printf "!C18470to5314: %3d / 1 = %10.2f \n", C18470to5314, C18470to5314/1;
printf "!C5314to18471: %3d / 1 = %10.2f \n", C5314to18471, C5314to18471/1;
printf "!C8600to153742: %3d / 1 = %10.2f \n", C8600to153742, C8600to153742/1;
printf "!C153742to153740: %3d / 1 = %10.2f \n", C153742to153740, C153742to153740/1;
printf "!C153740to8601: %3d / 1 = %10.2f \n", C153740to8601, C153740to8601/1;
printf "!C8601to153580: %3d / 1 = %10.2f \n", C8601to153580, C8601to153580/1;
printf "!C153580to8602: %3d / 1 = %10.2f \n", C153580to8602, C153580to8602/1;
printf "!C18471to5315: %3d / 1 = %10.2f \n", C18471to5315, C18471to5315/1;
printf "!C5315to41116: %3d / 1 = %10.2f \n", C5315to41116, C5315to41116/1;
printf "!C41116to7103: %3d / 1 = %10.2f \n", C41116to7103, C41116to7103/1;
printf "!C69205to1633: %3d / 2 = %10.2f \n", C69205to1633, C69205to1633/2;
printf "!C1633to1632: %3d / 2 = %10.2f \n", C1633to1632, C1633to1632/2;
printf "!C11325to169572: %3d / 3 = %10.2f \n", C11325to169572, C11325to169572/3;
printf "!C169572to122163: %3d / 2 = %10.2f \n", C169572to122163, C169572to122163/2;
printf "!C169571to11328: %3d / 1 = %10.2f \n", C169571to11328, C169571to11328/1;
printf "!C45688to45693: %3d / 3 = %10.2f \n", C45688to45693, C45688to45693/3;
printf "!C8486to8485: %3d / 1 = %10.2f \n", C8486to8485, C8486to8485/1;
printf "!C8485to168904: %3d / 1 = %10.2f \n", C8485to168904, C8485to168904/1;
printf "!C11379to97149: %3d / 2 = %10.2f \n", C11379to97149, C11379to97149/2;
printf "!C97149to11380: %3d / 2 = %10.2f \n", C97149to11380, C97149to11380/2;
printf "!C1912to11404: %3d / 1 = %10.2f \n", C1912to11404, C1912to11404/1;
printf "!C11404to11405: %3d / 1 = %10.2f \n", C11404to11405, C11404to11405/1;
printf "!C2641to2640: %3d / 1 = %10.2f \n", C2641to2640, C2641to2640/1;
printf "!C11501to11500: %3d / 1 = %10.2f \n", C11501to11500, C11501to11500/1;
printf "!C171269to5413: %3d / 2 = %10.2f \n", C171269to5413, C171269to5413/2;
printf "!C45693to45690: %3d / 3 = %10.2f \n", C45693to45690, C45693to45690/3;
printf "!C25296to11558: %3d / 1 = %10.2f \n", C25296to11558, C25296to11558/1;
printf "!C2640to150217: %3d / 1 = %10.2f \n", C2640to150217, C2640to150217/1;
printf "!C168904to8484: %3d / 1 = %10.2f \n", C168904to8484, C168904to8484/1;
printf "!C45690to45694: %3d / 3 = %10.2f \n", C45690to45694, C45690to45694/3;
printf "\n\n#QUALIDADE DE FLUXO O-D:\n";
printf "!OD0to0: %3d / 9.0 = %10.2f \n", OD0to0, OD0to0/9.0;
printf "!OD0to1: %3d / 5.0 = %10.2f \n", OD0to1, OD0to1/5.0;
printf "!OD0to2: %3d / 2.0 = %10.2f \n", OD0to2, OD0to2/2.0;
printf "!OD0to3: %3d / 0.0 = %10.2f \n", OD0to3, OD0to3/1.0E-5;
printf "!OD0to4: %3d / 0.0 = %10.2f \n", OD0to4, OD0to4/1.0E-5;
printf "!OD0to5: %3d / 0.0 = %10.2f \n", OD0to5, OD0to5/1.0E-5;
printf "!OD0to6: %3d / 0.0 = %10.2f \n", OD0to6, OD0to6/1.0E-5;
printf "!OD0to7: %3d / 0.0 = %10.2f \n", OD0to7, OD0to7/1.0E-5;
printf "!OD0to8: %3d / 2.0 = %10.2f \n", OD0to8, OD0to8/2.0;
printf "!OD0to9: %3d / 2.0 = %10.2f \n", OD0to9, OD0to9/2.0;
printf "!OD0to10: %3d / 1.0 = %10.2f \n", OD0to10, OD0to10/1.0;
printf "!OD0to11: %3d / 3.0 = %10.2f \n", OD0to11, OD0to11/3.0;
printf "!OD0to12: %3d / 3.0 = %10.2f \n", OD0to12, OD0to12/3.0;
printf "!OD0to13: %3d / 1.0 = %10.2f \n", OD0to13, OD0to13/1.0;
printf "!OD0to14: %3d / 1.0 = %10.2f \n", OD0to14, OD0to14/1.0;
printf "!OD0to15: %3d / 0.0 = %10.2f \n", OD0to15, OD0to15/1.0E-5;
printf "!OD0to16: %3d / 0.0 = %10.2f \n", OD0to16, OD0to16/1.0E-5;
printf "!OD1to0: %3d / 8.0 = %10.2f \n", OD1to0, OD1to0/8.0;
printf "!OD1to1: %3d / 28.0 = %10.2f \n", OD1to1, OD1to1/28.0;
printf "!OD1to2: %3d / 53.0 = %10.2f \n", OD1to2, OD1to2/53.0;
printf "!OD1to3: %3d / 0.0 = %10.2f \n", OD1to3, OD1to3/1.0E-5;
printf "!OD1to4: %3d / 14.0 = %10.2f \n", OD1to4, OD1to4/14.0;
printf "!OD1to5: %3d / 0.0 = %10.2f \n", OD1to5, OD1to5/1.0E-5;
printf "!OD1to6: %3d / 0.0 = %10.2f \n", OD1to6, OD1to6/1.0E-5;
printf "!OD1to7: %3d / 3.0 = %10.2f \n", OD1to7, OD1to7/3.0;
printf "!OD1to8: %3d / 26.0 = %10.2f \n", OD1to8, OD1to8/26.0;
printf "!OD1to9: %3d / 19.0 = %10.2f \n", OD1to9, OD1to9/19.0;
printf "!OD1to10: %3d / 2.0 = %10.2f \n", OD1to10, OD1to10/2.0;
printf "!OD1to11: %3d / 16.0 = %10.2f \n", OD1to11, OD1to11/16.0;
printf "!OD1to12: %3d / 32.0 = %10.2f \n", OD1to12, OD1to12/32.0;
printf "!OD1to13: %3d / 30.0 = %10.2f \n", OD1to13, OD1to13/30.0;
printf "!OD1to14: %3d / 1.0 = %10.2f \n", OD1to14, OD1to14/1.0;
printf "!OD1to15: %3d / 0.0 = %10.2f \n", OD1to15, OD1to15/1.0E-5;
printf "!OD1to16: %3d / 0.0 = %10.2f \n", OD1to16, OD1to16/1.0E-5;
printf "!OD2to0: %3d / 6.0 = %10.2f \n", OD2to0, OD2to0/6.0;
printf "!OD2to1: %3d / 12.0 = %10.2f \n", OD2to1, OD2to1/12.0;
printf "!OD2to2: %3d / 23.0 = %10.2f \n", OD2to2, OD2to2/23.0;
printf "!OD2to3: %3d / 0.0 = %10.2f \n", OD2to3, OD2to3/1.0E-5;
printf "!OD2to4: %3d / 6.0 = %10.2f \n", OD2to4, OD2to4/6.0;
printf "!OD2to5: %3d / 22.0 = %10.2f \n", OD2to5, OD2to5/22.0;
printf "!OD2to6: %3d / 63.0 = %10.2f \n", OD2to6, OD2to6/63.0;
printf "!OD2to7: %3d / 0.0 = %10.2f \n", OD2to7, OD2to7/1.0E-5;
printf "!OD2to8: %3d / 17.0 = %10.2f \n", OD2to8, OD2to8/17.0;
printf "!OD2to9: %3d / 9.0 = %10.2f \n", OD2to9, OD2to9/9.0;
printf "!OD2to10: %3d / 18.0 = %10.2f \n", OD2to10, OD2to10/18.0;
printf "!OD2to11: %3d / 38.0 = %10.2f \n", OD2to11, OD2to11/38.0;
printf "!OD2to12: %3d / 19.0 = %10.2f \n", OD2to12, OD2to12/19.0;
printf "!OD2to13: %3d / 18.0 = %10.2f \n", OD2to13, OD2to13/18.0;
printf "!OD2to14: %3d / 4.0 = %10.2f \n", OD2to14, OD2to14/4.0;
printf "!OD2to15: %3d / 0.0 = %10.2f \n", OD2to15, OD2to15/1.0E-5;
printf "!OD2to16: %3d / 0.0 = %10.2f \n", OD2to16, OD2to16/1.0E-5;
printf "!OD3to0: %3d / 0.0 = %10.2f \n", OD3to0, OD3to0/1.0E-5;
printf "!OD3to1: %3d / 0.0 = %10.2f \n", OD3to1, OD3to1/1.0E-5;
printf "!OD3to2: %3d / 0.0 = %10.2f \n", OD3to2, OD3to2/1.0E-5;
printf "!OD3to3: %3d / 0.0 = %10.2f \n", OD3to3, OD3to3/1.0E-5;
printf "!OD3to4: %3d / 0.0 = %10.2f \n", OD3to4, OD3to4/1.0E-5;
printf "!OD3to5: %3d / 0.0 = %10.2f \n", OD3to5, OD3to5/1.0E-5;
printf "!OD3to6: %3d / 0.0 = %10.2f \n", OD3to6, OD3to6/1.0E-5;
printf "!OD3to7: %3d / 0.0 = %10.2f \n", OD3to7, OD3to7/1.0E-5;
printf "!OD3to8: %3d / 0.0 = %10.2f \n", OD3to8, OD3to8/1.0E-5;
printf "!OD3to9: %3d / 0.0 = %10.2f \n", OD3to9, OD3to9/1.0E-5;
printf "!OD3to10: %3d / 0.0 = %10.2f \n", OD3to10, OD3to10/1.0E-5;
printf "!OD3to11: %3d / 0.0 = %10.2f \n", OD3to11, OD3to11/1.0E-5;
printf "!OD3to12: %3d / 0.0 = %10.2f \n", OD3to12, OD3to12/1.0E-5;
printf "!OD3to13: %3d / 0.0 = %10.2f \n", OD3to13, OD3to13/1.0E-5;
printf "!OD3to14: %3d / 0.0 = %10.2f \n", OD3to14, OD3to14/1.0E-5;
printf "!OD3to15: %3d / 0.0 = %10.2f \n", OD3to15, OD3to15/1.0E-5;
printf "!OD3to16: %3d / 0.0 = %10.2f \n", OD3to16, OD3to16/1.0E-5;
printf "!OD4to0: %3d / 0.0 = %10.2f \n", OD4to0, OD4to0/1.0E-5;
printf "!OD4to1: %3d / 8.0 = %10.2f \n", OD4to1, OD4to1/8.0;
printf "!OD4to2: %3d / 5.0 = %10.2f \n", OD4to2, OD4to2/5.0;
printf "!OD4to3: %3d / 0.0 = %10.2f \n", OD4to3, OD4to3/1.0E-5;
printf "!OD4to4: %3d / 45.0 = %10.2f \n", OD4to4, OD4to4/45.0;
printf "!OD4to5: %3d / 50.0 = %10.2f \n", OD4to5, OD4to5/50.0;
printf "!OD4to6: %3d / 35.0 = %10.2f \n", OD4to6, OD4to6/35.0;
printf "!OD4to7: %3d / 1.0 = %10.2f \n", OD4to7, OD4to7/1.0;
printf "!OD4to8: %3d / 7.0 = %10.2f \n", OD4to8, OD4to8/7.0;
printf "!OD4to9: %3d / 12.0 = %10.2f \n", OD4to9, OD4to9/12.0;
printf "!OD4to10: %3d / 2.0 = %10.2f \n", OD4to10, OD4to10/2.0;
printf "!OD4to11: %3d / 2.0 = %10.2f \n", OD4to11, OD4to11/2.0;
printf "!OD4to12: %3d / 17.0 = %10.2f \n", OD4to12, OD4to12/17.0;
printf "!OD4to13: %3d / 42.0 = %10.2f \n", OD4to13, OD4to13/42.0;
printf "!OD4to14: %3d / 4.0 = %10.2f \n", OD4to14, OD4to14/4.0;
printf "!OD4to15: %3d / 0.0 = %10.2f \n", OD4to15, OD4to15/1.0E-5;
printf "!OD4to16: %3d / 0.0 = %10.2f \n", OD4to16, OD4to16/1.0E-5;
printf "!OD5to0: %3d / 12.0 = %10.2f \n", OD5to0, OD5to0/12.0;
printf "!OD5to1: %3d / 51.0 = %10.2f \n", OD5to1, OD5to1/51.0;
printf "!OD5to2: %3d / 94.0 = %10.2f \n", OD5to2, OD5to2/94.0;
printf "!OD5to3: %3d / 0.0 = %10.2f \n", OD5to3, OD5to3/1.0E-5;
printf "!OD5to4: %3d / 82.0 = %10.2f \n", OD5to4, OD5to4/82.0;
printf "!OD5to5: %3d / 316.0 = %10.2f \n", OD5to5, OD5to5/316.0;
printf "!OD5to6: %3d / 200.0 = %10.2f \n", OD5to6, OD5to6/200.0;
printf "!OD5to7: %3d / 9.0 = %10.2f \n", OD5to7, OD5to7/9.0;
printf "!OD5to8: %3d / 56.0 = %10.2f \n", OD5to8, OD5to8/56.0;
printf "!OD5to9: %3d / 14.0 = %10.2f \n", OD5to9, OD5to9/14.0;
printf "!OD5to10: %3d / 39.0 = %10.2f \n", OD5to10, OD5to10/39.0;
printf "!OD5to11: %3d / 75.0 = %10.2f \n", OD5to11, OD5to11/75.0;
printf "!OD5to12: %3d / 86.0 = %10.2f \n", OD5to12, OD5to12/86.0;
printf "!OD5to13: %3d / 115.0 = %10.2f \n", OD5to13, OD5to13/115.0;
printf "!OD5to14: %3d / 5.0 = %10.2f \n", OD5to14, OD5to14/5.0;
printf "!OD5to15: %3d / 0.0 = %10.2f \n", OD5to15, OD5to15/1.0E-5;
printf "!OD5to16: %3d / 0.0 = %10.2f \n", OD5to16, OD5to16/1.0E-5;
printf "!OD6to0: %3d / 19.0 = %10.2f \n", OD6to0, OD6to0/19.0;
printf "!OD6to1: %3d / 49.0 = %10.2f \n", OD6to1, OD6to1/49.0;
printf "!OD6to2: %3d / 134.0 = %10.2f \n", OD6to2, OD6to2/134.0;
printf "!OD6to3: %3d / 0.0 = %10.2f \n", OD6to3, OD6to3/1.0E-5;
printf "!OD6to4: %3d / 62.0 = %10.2f \n", OD6to4, OD6to4/62.0;
printf "!OD6to5: %3d / 182.0 = %10.2f \n", OD6to5, OD6to5/182.0;
printf "!OD6to6: %3d / 900.0 = %10.2f \n", OD6to6, OD6to6/900.0;
printf "!OD6to7: %3d / 47.0 = %10.2f \n", OD6to7, OD6to7/47.0;
printf "!OD6to8: %3d / 63.0 = %10.2f \n", OD6to8, OD6to8/63.0;
printf "!OD6to9: %3d / 7.0 = %10.2f \n", OD6to9, OD6to9/7.0;
printf "!OD6to10: %3d / 506.0 = %10.2f \n", OD6to10, OD6to10/506.0;
printf "!OD6to11: %3d / 211.0 = %10.2f \n", OD6to11, OD6to11/211.0;
printf "!OD6to12: %3d / 42.0 = %10.2f \n", OD6to12, OD6to12/42.0;
printf "!OD6to13: %3d / 56.0 = %10.2f \n", OD6to13, OD6to13/56.0;
printf "!OD6to14: %3d / 18.0 = %10.2f \n", OD6to14, OD6to14/18.0;
printf "!OD6to15: %3d / 0.0 = %10.2f \n", OD6to15, OD6to15/1.0E-5;
printf "!OD6to16: %3d / 0.0 = %10.2f \n", OD6to16, OD6to16/1.0E-5;
printf "!OD7to0: %3d / 1.0 = %10.2f \n", OD7to0, OD7to0/1.0;
printf "!OD7to1: %3d / 0.0 = %10.2f \n", OD7to1, OD7to1/1.0E-5;
printf "!OD7to2: %3d / 7.0 = %10.2f \n", OD7to2, OD7to2/7.0;
printf "!OD7to3: %3d / 0.0 = %10.2f \n", OD7to3, OD7to3/1.0E-5;
printf "!OD7to4: %3d / 1.0 = %10.2f \n", OD7to4, OD7to4/1.0;
printf "!OD7to5: %3d / 4.0 = %10.2f \n", OD7to5, OD7to5/4.0;
printf "!OD7to6: %3d / 16.0 = %10.2f \n", OD7to6, OD7to6/16.0;
printf "!OD7to7: %3d / 168.0 = %10.2f \n", OD7to7, OD7to7/168.0;
printf "!OD7to8: %3d / 8.0 = %10.2f \n", OD7to8, OD7to8/8.0;
printf "!OD7to9: %3d / 0.0 = %10.2f \n", OD7to9, OD7to9/1.0E-5;
printf "!OD7to10: %3d / 84.0 = %10.2f \n", OD7to10, OD7to10/84.0;
printf "!OD7to11: %3d / 189.0 = %10.2f \n", OD7to11, OD7to11/189.0;
printf "!OD7to12: %3d / 16.0 = %10.2f \n", OD7to12, OD7to12/16.0;
printf "!OD7to13: %3d / 9.0 = %10.2f \n", OD7to13, OD7to13/9.0;
printf "!OD7to14: %3d / 4.0 = %10.2f \n", OD7to14, OD7to14/4.0;
printf "!OD7to15: %3d / 0.0 = %10.2f \n", OD7to15, OD7to15/1.0E-5;
printf "!OD7to16: %3d / 0.0 = %10.2f \n", OD7to16, OD7to16/1.0E-5;
printf "!OD8to0: %3d / 3.0 = %10.2f \n", OD8to0, OD8to0/3.0;
printf "!OD8to1: %3d / 17.0 = %10.2f \n", OD8to1, OD8to1/17.0;
printf "!OD8to2: %3d / 84.0 = %10.2f \n", OD8to2, OD8to2/84.0;
printf "!OD8to3: %3d / 0.0 = %10.2f \n", OD8to3, OD8to3/1.0E-5;
printf "!OD8to4: %3d / 10.0 = %10.2f \n", OD8to4, OD8to4/10.0;
printf "!OD8to5: %3d / 1.0 = %10.2f \n", OD8to5, OD8to5/1.0;
printf "!OD8to6: %3d / 21.0 = %10.2f \n", OD8to6, OD8to6/21.0;
printf "!OD8to7: %3d / 4.0 = %10.2f \n", OD8to7, OD8to7/4.0;
printf "!OD8to8: %3d / 43.0 = %10.2f \n", OD8to8, OD8to8/43.0;
printf "!OD8to9: %3d / 4.0 = %10.2f \n", OD8to9, OD8to9/4.0;
printf "!OD8to10: %3d / 9.0 = %10.2f \n", OD8to10, OD8to10/9.0;
printf "!OD8to11: %3d / 47.0 = %10.2f \n", OD8to11, OD8to11/47.0;
printf "!OD8to12: %3d / 49.0 = %10.2f \n", OD8to12, OD8to12/49.0;
printf "!OD8to13: %3d / 37.0 = %10.2f \n", OD8to13, OD8to13/37.0;
printf "!OD8to14: %3d / 2.0 = %10.2f \n", OD8to14, OD8to14/2.0;
printf "!OD8to15: %3d / 0.0 = %10.2f \n", OD8to15, OD8to15/1.0E-5;
printf "!OD8to16: %3d / 0.0 = %10.2f \n", OD8to16, OD8to16/1.0E-5;
printf "!OD9to0: %3d / 0.0 = %10.2f \n", OD9to0, OD9to0/1.0E-5;
printf "!OD9to1: %3d / 3.0 = %10.2f \n", OD9to1, OD9to1/3.0;
printf "!OD9to2: %3d / 0.0 = %10.2f \n", OD9to2, OD9to2/1.0E-5;
printf "!OD9to3: %3d / 0.0 = %10.2f \n", OD9to3, OD9to3/1.0E-5;
printf "!OD9to4: %3d / 2.0 = %10.2f \n", OD9to4, OD9to4/2.0;
printf "!OD9to5: %3d / 0.0 = %10.2f \n", OD9to5, OD9to5/1.0E-5;
printf "!OD9to6: %3d / 1.0 = %10.2f \n", OD9to6, OD9to6/1.0;
printf "!OD9to7: %3d / 0.0 = %10.2f \n", OD9to7, OD9to7/1.0E-5;
printf "!OD9to8: %3d / 0.0 = %10.2f \n", OD9to8, OD9to8/1.0E-5;
printf "!OD9to9: %3d / 9.0 = %10.2f \n", OD9to9, OD9to9/9.0;
printf "!OD9to10: %3d / 1.0 = %10.2f \n", OD9to10, OD9to10/1.0;
printf "!OD9to11: %3d / 1.0 = %10.2f \n", OD9to11, OD9to11/1.0;
printf "!OD9to12: %3d / 0.0 = %10.2f \n", OD9to12, OD9to12/1.0E-5;
printf "!OD9to13: %3d / 3.0 = %10.2f \n", OD9to13, OD9to13/3.0;
printf "!OD9to14: %3d / 0.0 = %10.2f \n", OD9to14, OD9to14/1.0E-5;
printf "!OD9to15: %3d / 0.0 = %10.2f \n", OD9to15, OD9to15/1.0E-5;
printf "!OD9to16: %3d / 0.0 = %10.2f \n", OD9to16, OD9to16/1.0E-5;
printf "!OD10to0: %3d / 8.0 = %10.2f \n", OD10to0, OD10to0/8.0;
printf "!OD10to1: %3d / 5.0 = %10.2f \n", OD10to1, OD10to1/5.0;
printf "!OD10to2: %3d / 38.0 = %10.2f \n", OD10to2, OD10to2/38.0;
printf "!OD10to3: %3d / 0.0 = %10.2f \n", OD10to3, OD10to3/1.0E-5;
printf "!OD10to4: %3d / 9.0 = %10.2f \n", OD10to4, OD10to4/9.0;
printf "!OD10to5: %3d / 12.0 = %10.2f \n", OD10to5, OD10to5/12.0;
printf "!OD10to6: %3d / 205.0 = %10.2f \n", OD10to6, OD10to6/205.0;
printf "!OD10to7: %3d / 48.0 = %10.2f \n", OD10to7, OD10to7/48.0;
printf "!OD10to8: %3d / 13.0 = %10.2f \n", OD10to8, OD10to8/13.0;
printf "!OD10to9: %3d / 1.0 = %10.2f \n", OD10to9, OD10to9/1.0;
printf "!OD10to10: %3d / 255.0 = %10.2f \n", OD10to10, OD10to10/255.0;
printf "!OD10to11: %3d / 233.0 = %10.2f \n", OD10to11, OD10to11/233.0;
printf "!OD10to12: %3d / 37.0 = %10.2f \n", OD10to12, OD10to12/37.0;
printf "!OD10to13: %3d / 18.0 = %10.2f \n", OD10to13, OD10to13/18.0;
printf "!OD10to14: %3d / 12.0 = %10.2f \n", OD10to14, OD10to14/12.0;
printf "!OD10to15: %3d / 0.0 = %10.2f \n", OD10to15, OD10to15/1.0E-5;
printf "!OD10to16: %3d / 0.0 = %10.2f \n", OD10to16, OD10to16/1.0E-5;
printf "!OD11to0: %3d / 9.0 = %10.2f \n", OD11to0, OD11to0/9.0;
printf "!OD11to1: %3d / 3.0 = %10.2f \n", OD11to1, OD11to1/3.0;
printf "!OD11to2: %3d / 34.0 = %10.2f \n", OD11to2, OD11to2/34.0;
printf "!OD11to3: %3d / 0.0 = %10.2f \n", OD11to3, OD11to3/1.0E-5;
printf "!OD11to4: %3d / 8.0 = %10.2f \n", OD11to4, OD11to4/8.0;
printf "!OD11to5: %3d / 3.0 = %10.2f \n", OD11to5, OD11to5/3.0;
printf "!OD11to6: %3d / 38.0 = %10.2f \n", OD11to6, OD11to6/38.0;
printf "!OD11to7: %3d / 151.0 = %10.2f \n", OD11to7, OD11to7/151.0;
printf "!OD11to8: %3d / 22.0 = %10.2f \n", OD11to8, OD11to8/22.0;
printf "!OD11to9: %3d / 3.0 = %10.2f \n", OD11to9, OD11to9/3.0;
printf "!OD11to10: %3d / 236.0 = %10.2f \n", OD11to10, OD11to10/236.0;
printf "!OD11to11: %3d / 305.0 = %10.2f \n", OD11to11, OD11to11/305.0;
printf "!OD11to12: %3d / 45.0 = %10.2f \n", OD11to12, OD11to12/45.0;
printf "!OD11to13: %3d / 35.0 = %10.2f \n", OD11to13, OD11to13/35.0;
printf "!OD11to14: %3d / 17.0 = %10.2f \n", OD11to14, OD11to14/17.0;
printf "!OD11to15: %3d / 0.0 = %10.2f \n", OD11to15, OD11to15/1.0E-5;
printf "!OD11to16: %3d / 0.0 = %10.2f \n", OD11to16, OD11to16/1.0E-5;
printf "!OD12to0: %3d / 11.0 = %10.2f \n", OD12to0, OD12to0/11.0;
printf "!OD12to1: %3d / 3.0 = %10.2f \n", OD12to1, OD12to1/3.0;
printf "!OD12to2: %3d / 20.0 = %10.2f \n", OD12to2, OD12to2/20.0;
printf "!OD12to3: %3d / 0.0 = %10.2f \n", OD12to3, OD12to3/1.0E-5;
printf "!OD12to4: %3d / 12.0 = %10.2f \n", OD12to4, OD12to4/12.0;
printf "!OD12to5: %3d / 1.0 = %10.2f \n", OD12to5, OD12to5/1.0;
printf "!OD12to6: %3d / 16.0 = %10.2f \n", OD12to6, OD12to6/16.0;
printf "!OD12to7: %3d / 9.0 = %10.2f \n", OD12to7, OD12to7/9.0;
printf "!OD12to8: %3d / 17.0 = %10.2f \n", OD12to8, OD12to8/17.0;
printf "!OD12to9: %3d / 3.0 = %10.2f \n", OD12to9, OD12to9/3.0;
printf "!OD12to10: %3d / 55.0 = %10.2f \n", OD12to10, OD12to10/55.0;
printf "!OD12to11: %3d / 85.0 = %10.2f \n", OD12to11, OD12to11/85.0;
printf "!OD12to12: %3d / 52.0 = %10.2f \n", OD12to12, OD12to12/52.0;
printf "!OD12to13: %3d / 30.0 = %10.2f \n", OD12to13, OD12to13/30.0;
printf "!OD12to14: %3d / 1.0 = %10.2f \n", OD12to14, OD12to14/1.0;
printf "!OD12to15: %3d / 0.0 = %10.2f \n", OD12to15, OD12to15/1.0E-5;
printf "!OD12to16: %3d / 0.0 = %10.2f \n", OD12to16, OD12to16/1.0E-5;
printf "!OD13to0: %3d / 8.0 = %10.2f \n", OD13to0, OD13to0/8.0;
printf "!OD13to1: %3d / 27.0 = %10.2f \n", OD13to1, OD13to1/27.0;
printf "!OD13to2: %3d / 46.0 = %10.2f \n", OD13to2, OD13to2/46.0;
printf "!OD13to3: %3d / 0.0 = %10.2f \n", OD13to3, OD13to3/1.0E-5;
printf "!OD13to4: %3d / 48.0 = %10.2f \n", OD13to4, OD13to4/48.0;
printf "!OD13to5: %3d / 48.0 = %10.2f \n", OD13to5, OD13to5/48.0;
printf "!OD13to6: %3d / 21.0 = %10.2f \n", OD13to6, OD13to6/21.0;
printf "!OD13to7: %3d / 3.0 = %10.2f \n", OD13to7, OD13to7/3.0;
printf "!OD13to8: %3d / 34.0 = %10.2f \n", OD13to8, OD13to8/34.0;
printf "!OD13to9: %3d / 17.0 = %10.2f \n", OD13to9, OD13to9/17.0;
printf "!OD13to10: %3d / 7.0 = %10.2f \n", OD13to10, OD13to10/7.0;
printf "!OD13to11: %3d / 41.0 = %10.2f \n", OD13to11, OD13to11/41.0;
printf "!OD13to12: %3d / 57.0 = %10.2f \n", OD13to12, OD13to12/57.0;
printf "!OD13to13: %3d / 122.0 = %10.2f \n", OD13to13, OD13to13/122.0;
printf "!OD13to14: %3d / 2.0 = %10.2f \n", OD13to14, OD13to14/2.0;
printf "!OD13to15: %3d / 0.0 = %10.2f \n", OD13to15, OD13to15/1.0E-5;
printf "!OD13to16: %3d / 0.0 = %10.2f \n", OD13to16, OD13to16/1.0E-5;
printf "!OD14to0: %3d / 2.0 = %10.2f \n", OD14to0, OD14to0/2.0;
printf "!OD14to1: %3d / 1.0 = %10.2f \n", OD14to1, OD14to1/1.0;
printf "!OD14to2: %3d / 2.0 = %10.2f \n", OD14to2, OD14to2/2.0;
printf "!OD14to3: %3d / 0.0 = %10.2f \n", OD14to3, OD14to3/1.0E-5;
printf "!OD14to4: %3d / 1.0 = %10.2f \n", OD14to4, OD14to4/1.0;
printf "!OD14to5: %3d / 4.0 = %10.2f \n", OD14to5, OD14to5/4.0;
printf "!OD14to6: %3d / 9.0 = %10.2f \n", OD14to6, OD14to6/9.0;
printf "!OD14to7: %3d / 3.0 = %10.2f \n", OD14to7, OD14to7/3.0;
printf "!OD14to8: %3d / 1.0 = %10.2f \n", OD14to8, OD14to8/1.0;
printf "!OD14to9: %3d / 3.0 = %10.2f \n", OD14to9, OD14to9/3.0;
printf "!OD14to10: %3d / 11.0 = %10.2f \n", OD14to10, OD14to10/11.0;
printf "!OD14to11: %3d / 10.0 = %10.2f \n", OD14to11, OD14to11/10.0;
printf "!OD14to12: %3d / 2.0 = %10.2f \n", OD14to12, OD14to12/2.0;
printf "!OD14to13: %3d / 1.0 = %10.2f \n", OD14to13, OD14to13/1.0;
printf "!OD14to14: %3d / 7.0 = %10.2f \n", OD14to14, OD14to14/7.0;
printf "!OD14to15: %3d / 0.0 = %10.2f \n", OD14to15, OD14to15/1.0E-5;
printf "!OD14to16: %3d / 0.0 = %10.2f \n", OD14to16, OD14to16/1.0E-5;
printf "!OD15to0: %3d / 0.0 = %10.2f \n", OD15to0, OD15to0/1.0E-5;
printf "!OD15to1: %3d / 0.0 = %10.2f \n", OD15to1, OD15to1/1.0E-5;
printf "!OD15to2: %3d / 0.0 = %10.2f \n", OD15to2, OD15to2/1.0E-5;
printf "!OD15to3: %3d / 0.0 = %10.2f \n", OD15to3, OD15to3/1.0E-5;
printf "!OD15to4: %3d / 0.0 = %10.2f \n", OD15to4, OD15to4/1.0E-5;
printf "!OD15to5: %3d / 0.0 = %10.2f \n", OD15to5, OD15to5/1.0E-5;
printf "!OD15to6: %3d / 0.0 = %10.2f \n", OD15to6, OD15to6/1.0E-5;
printf "!OD15to7: %3d / 0.0 = %10.2f \n", OD15to7, OD15to7/1.0E-5;
printf "!OD15to8: %3d / 0.0 = %10.2f \n", OD15to8, OD15to8/1.0E-5;
printf "!OD15to9: %3d / 0.0 = %10.2f \n", OD15to9, OD15to9/1.0E-5;
printf "!OD15to10: %3d / 0.0 = %10.2f \n", OD15to10, OD15to10/1.0E-5;
printf "!OD15to11: %3d / 0.0 = %10.2f \n", OD15to11, OD15to11/1.0E-5;
printf "!OD15to12: %3d / 0.0 = %10.2f \n", OD15to12, OD15to12/1.0E-5;
printf "!OD15to13: %3d / 0.0 = %10.2f \n", OD15to13, OD15to13/1.0E-5;
printf "!OD15to14: %3d / 0.0 = %10.2f \n", OD15to14, OD15to14/1.0E-5;
printf "!OD15to15: %3d / 0.0 = %10.2f \n", OD15to15, OD15to15/1.0E-5;
printf "!OD15to16: %3d / 0.0 = %10.2f \n", OD15to16, OD15to16/1.0E-5;
printf "!OD16to0: %3d / 0.0 = %10.2f \n", OD16to0, OD16to0/1.0E-5;
printf "!OD16to1: %3d / 0.0 = %10.2f \n", OD16to1, OD16to1/1.0E-5;
printf "!OD16to2: %3d / 0.0 = %10.2f \n", OD16to2, OD16to2/1.0E-5;
printf "!OD16to3: %3d / 0.0 = %10.2f \n", OD16to3, OD16to3/1.0E-5;
printf "!OD16to4: %3d / 0.0 = %10.2f \n", OD16to4, OD16to4/1.0E-5;
printf "!OD16to5: %3d / 0.0 = %10.2f \n", OD16to5, OD16to5/1.0E-5;
printf "!OD16to6: %3d / 0.0 = %10.2f \n", OD16to6, OD16to6/1.0E-5;
printf "!OD16to7: %3d / 0.0 = %10.2f \n", OD16to7, OD16to7/1.0E-5;
printf "!OD16to8: %3d / 0.0 = %10.2f \n", OD16to8, OD16to8/1.0E-5;
printf "!OD16to9: %3d / 0.0 = %10.2f \n", OD16to9, OD16to9/1.0E-5;
printf "!OD16to10: %3d / 0.0 = %10.2f \n", OD16to10, OD16to10/1.0E-5;
printf "!OD16to11: %3d / 0.0 = %10.2f \n", OD16to11, OD16to11/1.0E-5;
printf "!OD16to12: %3d / 0.0 = %10.2f \n", OD16to12, OD16to12/1.0E-5;
printf "!OD16to13: %3d / 0.0 = %10.2f \n", OD16to13, OD16to13/1.0E-5;
printf "!OD16to14: %3d / 0.0 = %10.2f \n", OD16to14, OD16to14/1.0E-5;
printf "!OD16to15: %3d / 0.0 = %10.2f \n", OD16to15, OD16to15/1.0E-5;
printf "!OD16to16: %3d / 0.0 = %10.2f \n", OD16to16, OD16to16/1.0E-5;
printf "\n\n#Resultado a ser digerido pelo sistema:\n\n";
printf "8 8 1000 Rmenos ";

printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD0to0, OD0to1, OD0to2, OD0to3, OD0to4, OD0to5, OD0to6, OD0to7, OD0to8, OD0to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD0to10, OD0to11, OD0to12, OD0to13, OD0to14, OD0to15, OD0to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD1to0, OD1to1, OD1to2, OD1to3, OD1to4, OD1to5, OD1to6, OD1to7, OD1to8, OD1to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD1to10, OD1to11, OD1to12, OD1to13, OD1to14, OD1to15, OD1to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD2to0, OD2to1, OD2to2, OD2to3, OD2to4, OD2to5, OD2to6, OD2to7, OD2to8, OD2to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD2to10, OD2to11, OD2to12, OD2to13, OD2to14, OD2to15, OD2to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD3to0, OD3to1, OD3to2, OD3to3, OD3to4, OD3to5, OD3to6, OD3to7, OD3to8, OD3to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD3to10, OD3to11, OD3to12, OD3to13, OD3to14, OD3to15, OD3to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD4to0, OD4to1, OD4to2, OD4to3, OD4to4, OD4to5, OD4to6, OD4to7, OD4to8, OD4to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD4to10, OD4to11, OD4to12, OD4to13, OD4to14, OD4to15, OD4to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD5to0, OD5to1, OD5to2, OD5to3, OD5to4, OD5to5, OD5to6, OD5to7, OD5to8, OD5to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD5to10, OD5to11, OD5to12, OD5to13, OD5to14, OD5to15, OD5to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD6to0, OD6to1, OD6to2, OD6to3, OD6to4, OD6to5, OD6to6, OD6to7, OD6to8, OD6to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD6to10, OD6to11, OD6to12, OD6to13, OD6to14, OD6to15, OD6to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD7to0, OD7to1, OD7to2, OD7to3, OD7to4, OD7to5, OD7to6, OD7to7, OD7to8, OD7to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD7to10, OD7to11, OD7to12, OD7to13, OD7to14, OD7to15, OD7to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD8to0, OD8to1, OD8to2, OD8to3, OD8to4, OD8to5, OD8to6, OD8to7, OD8to8, OD8to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD8to10, OD8to11, OD8to12, OD8to13, OD8to14, OD8to15, OD8to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD9to0, OD9to1, OD9to2, OD9to3, OD9to4, OD9to5, OD9to6, OD9to7, OD9to8, OD9to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD9to10, OD9to11, OD9to12, OD9to13, OD9to14, OD9to15, OD9to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD10to0, OD10to1, OD10to2, OD10to3, OD10to4, OD10to5, OD10to6, OD10to7, OD10to8, OD10to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD10to10, OD10to11, OD10to12, OD10to13, OD10to14, OD10to15, OD10to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD11to0, OD11to1, OD11to2, OD11to3, OD11to4, OD11to5, OD11to6, OD11to7, OD11to8, OD11to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD11to10, OD11to11, OD11to12, OD11to13, OD11to14, OD11to15, OD11to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD12to0, OD12to1, OD12to2, OD12to3, OD12to4, OD12to5, OD12to6, OD12to7, OD12to8, OD12to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD12to10, OD12to11, OD12to12, OD12to13, OD12to14, OD12to15, OD12to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD13to0, OD13to1, OD13to2, OD13to3, OD13to4, OD13to5, OD13to6, OD13to7, OD13to8, OD13to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD13to10, OD13to11, OD13to12, OD13to13, OD13to14, OD13to15, OD13to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD14to0, OD14to1, OD14to2, OD14to3, OD14to4, OD14to5, OD14to6, OD14to7, OD14to8, OD14to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD14to10, OD14to11, OD14to12, OD14to13, OD14to14, OD14to15, OD14to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD15to0, OD15to1, OD15to2, OD15to3, OD15to4, OD15to5, OD15to6, OD15to7, OD15to8, OD15to9;
printf "%3f %3f %3f %3f %3f %3f %3f ", OD15to10, OD15to11, OD15to12, OD15to13, OD15to14, OD15to15, OD15to16;
printf "%3f %3f %3f %3f %3f %3f %3f %3f %3f %3f ", OD16to0, OD16to1, OD16to2, OD16to3, OD16to4, OD16to5, OD16to6, OD16to7, OD16to8, OD16to9;
printf "%3f %3f %3f %3f %3f %3f %3f \n\n", OD16to10, OD16to11, OD16to12, OD16to13, OD16to14, OD16to15, OD16to16;

end;

